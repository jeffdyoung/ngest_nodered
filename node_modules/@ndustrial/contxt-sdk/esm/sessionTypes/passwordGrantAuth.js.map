{"version":3,"sources":["sessionTypes/passwordGrantAuth.js"],"names":["auth0","axios","PasswordGrantAuth","sdk","_sdk","_sessionInfo","_auth0","Authentication","domain","clientID","config","auth","clientId","Promise","resolve","reject","accessToken","Error","hasToken","username","password","audience","audiences","contxtAuth","loginWithDefaultDirectory","err","response","errorMessage","description","then","_getApiToken","post","host","Object","keys","map","audienceName","filter","nonce","headers","Authorization","data","_saveSession","access_token","sessionInfo","TYPE"],"mappings":"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","file":"passwordGrantAuth.js","sourcesContent":["import auth0 from 'auth0-js';\nimport axios from 'axios';\n\n/**\n * A SessionType that allows the user to authenticate with Auth0 and\n * then gain a valid JWT from the Contxt Auth service. This method\n * utitlizes the password grant type authorization with Auth0. This\n * SessionType will expect a username and a password to be passed into\n * the `logIn` function from the user to authenticate.\n *\n * @type SessionType\n *\n * @typicalname contxtSdk.auth\n *\n * @example\n * const ContxtSdk = require('@ndustrial/contxt-sdk');\n *\n * const contxtService = new ContxtSdk({\n *   config: {\n *     auth: {\n *       clientId: '<client id>'\n *     }\n *   },\n *   sessionType: 'passwordGrantAuth'\n * });\n */\n\nclass PasswordGrantAuth {\n  /**\n   * @param {Object} sdk An instance of the SDK so the module can communicate with other modules\n   * @param {Object} sdk.audiences\n   * @param {Object} sdk.audiences.contxtAuth\n   * @param {string} sdk.audiences.contxtAuth.clientId The Auth0 client id of the\n   *   Contxt Auth environment\n   * @param {string} sdk.audiences.contxtAuth.host\n   * @param {Object} sdk.config\n   * @param {Object} sdk.config.auth\n   * @param {string} sdk.config.auth.clientId The Auth0 client id of the application\n   */\n  constructor(sdk) {\n    this._sdk = sdk;\n    this._sessionInfo = {};\n\n    this._auth0 = new auth0.Authentication({\n      domain: 'ndustrial.auth0.com',\n      clientID: this._sdk.config.auth.clientId\n    });\n  }\n\n  /**\n   * Gets the current API token (used to communicate with other Contxt APIs)\n   *\n   * @returns {Promise}\n   * @fulfills {string} apiToken\n   * @rejects {Error}\n   */\n  getCurrentApiToken() {\n    return new Promise((resolve, reject) => {\n      if (!this._sessionInfo.accessToken) {\n        return reject(new Error('No api token found.'));\n      }\n\n      return resolve(this._sessionInfo.accessToken);\n    });\n  }\n\n  /**\n   * Tells caller if the current user is authenticated\n   *\n   * @returns {boolean}\n   */\n  isAuthenticated() {\n    const hasToken = !!(this._sessionInfo && this._sessionInfo.accessToken);\n\n    return hasToken;\n  }\n\n  /**\n   * Logs the user in using Auth0 using a username a password\n   *\n   * @param {string} username The username of the user to authenticate\n   * @param {string} password The password of the user to authenticate\n   *\n   * @returns {Promise}\n   * @fulfills {string}\n   * @rejects {Error}\n   */\n  logIn(username, password) {\n    return new Promise((resolve, reject) => {\n      const audience = this._sdk.config.audiences.contxtAuth.clientId;\n\n      this._auth0.loginWithDefaultDirectory(\n        { password, username, audience },\n        (err, response) => {\n          if (err) {\n            const errorMessage =\n              (err && err.description) || 'Authentication failed.';\n\n            return reject(new Error(errorMessage));\n          }\n\n          return resolve(response.accessToken);\n        }\n      );\n    }).then((accessToken) => {\n      return this._getApiToken(accessToken);\n    });\n  }\n\n  /**\n   * Logs the user out by removing any stored session info.\n   *\n   * @returns {Promise}\n   * @fulfills {string}\n   */\n  logOut() {\n    return new Promise((resolve) => {\n      this._sessionInfo = {};\n\n      return resolve('Logout successful - session info cleared.');\n    });\n  }\n\n  /**\n   * Requests an access token from Contxt Auth with the correct audiences.\n   *\n   * @param {string} accessToken\n   *\n   * @returns {Promise}\n   * @fulfill {string} accessToken\n   * @rejects {Error}\n   *\n   * @private\n   */\n  _getApiToken(accessToken) {\n    return axios\n      .post(\n        `${this._sdk.config.audiences.contxtAuth.host}/v1/token`,\n        {\n          audiences: Object.keys(this._sdk.config.audiences)\n            .map((audienceName) => {\n              return this._sdk.config.audiences[audienceName].clientId;\n            })\n            .filter((clientId) => {\n              return (\n                clientId &&\n                clientId !== this._sdk.config.audiences.contxtAuth.clientId\n              );\n            }),\n          nonce: 'nonce'\n        },\n        {\n          headers: { Authorization: `Bearer ${accessToken}` }\n        }\n      )\n      .then((response) => {\n        const { data } = response;\n\n        this._saveSession({\n          accessToken: data.access_token\n        });\n\n        return data.access_token;\n      });\n  }\n\n  /**\n   * Saves the session info (i.e. the Contxt access token) for future use\n   *\n   * @param {Object} sessionInfo\n   * @param {string} sessionInfo.accessToken\n   *\n   * @private\n   */\n  _saveSession(sessionInfo) {\n    this._sessionInfo = sessionInfo;\n  }\n}\n\nexport const TYPE = 'passwordGrantAuth';\nexport default PasswordGrantAuth;\n"]}