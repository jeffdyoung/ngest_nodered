{"version":3,"sources":["sessionTypes/machineAuth.js"],"names":["axios","MachineAuth","sdk","_sdk","_sessionInfo","_tokenPromises","config","auth","clientId","Error","clientSecret","audienceName","promise","Promise","resolve","then","isAuthenticated","apiToken","_getNewSessionInfo","sessionInfo","expiresAt","tokenExpiresAtBufferMs","bufferedExpiresAt","Date","now","audience","audiences","reject","post","contxtAuth","host","client_id","client_secret","grant_type","data","access_token","expires_in","_saveSession","catch","err","response","status","TYPE"],"mappings":"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","file":"machineAuth.js","sourcesContent":["import axios from 'axios';\n\n/**\n * @typedef {Object} MachineAuthSessionInfo\n * @property {string} apiToken\n * @property {number} expiresAt\n */\n\n/**\n * A SessionType that allows machine to machine communication between Node.js servers. This would\n * only be used in Node.js applications. This SessionType requires a client id and a client secret,\n * which are obtained from Auth0.\n *\n * @type SessionType\n *\n * @typicalname contxtSdk.auth\n *\n * @example\n * const ContxtSdk = require('@ndustrial/contxt-sdk');\n *\n * const contxtSdk = new ContxtSDK({\n *   config: {\n *     auth: {\n *       clientId: '<client id>',\n *       clientSecret: '<client secret>'\n *     }\n *   },\n *   sessionType: 'machineAuth'\n * });\n */\nclass MachineAuth {\n  /**\n   * @param {Object} sdk An instance of the SDK so the module can communicate with other modules\n   */\n  constructor(sdk) {\n    this._sdk = sdk;\n    this._sessionInfo = {};\n    this._tokenPromises = {};\n\n    if (!this._sdk.config.auth.clientId) {\n      throw new Error('clientId is required for the MachineAuth config');\n    }\n\n    if (!this._sdk.config.auth.clientSecret) {\n      throw new Error('clientSecret is required for the MachineAuth config');\n    }\n  }\n\n  /**\n   * Removes an audience's API token from the in-memory token storage\n   *\n   * @param audienceName\n   *\n   * @returns {Promise}\n   */\n  clearCurrentApiToken(audienceName) {\n    const promise = this._tokenPromises[audienceName] || Promise.resolve();\n\n    return promise.then(() => {\n      delete this._sessionInfo[audienceName];\n    });\n  }\n\n  /**\n   * Gets the current API token (used to communicate with other Contxt APIs). Will get and store a\n   * token or use a previously acquired and stored token.\n   *\n   * @param {string} audienceName The audience you wish to get an API for\n   *\n   * @returns {Promise}\n   * @fulfills {string} apiToken\n   */\n  getCurrentApiToken(audienceName) {\n    if (this.isAuthenticated(audienceName)) {\n      return Promise.resolve(this._sessionInfo[audienceName].apiToken);\n    }\n\n    return this._getNewSessionInfo(audienceName).then(\n      (sessionInfo) => sessionInfo.apiToken\n    );\n  }\n\n  /**\n   * Tells caller if the app is authenticated with a particular service.\n   *\n   * @param audienceName\n   *\n   * @returns {boolean}\n   */\n  isAuthenticated(audienceName) {\n    if (!(this._sessionInfo && this._sessionInfo[audienceName])) {\n      return false;\n    }\n\n    const { apiToken, expiresAt } = this._sessionInfo[audienceName];\n    const tokenExpiresAtBufferMs =\n      this._sdk.config.auth.tokenExpiresAtBufferMs || 0;\n    const bufferedExpiresAt = expiresAt - tokenExpiresAtBufferMs;\n\n    return !!(apiToken && bufferedExpiresAt > Date.now());\n  }\n\n  /**\n   * Requests an access token from Contxt Auth for the correct audience\n   *\n   * @param audienceName\n   *\n   * @returns {Promise}\n   * @fulfill {MachineAuthSessionInfo}\n   *\n   * @private\n   */\n  _getNewSessionInfo(audienceName) {\n    const audience = this._sdk.config.audiences[audienceName];\n\n    if (!(audience && audience.clientId)) {\n      return Promise.reject(new Error('No valid audience found'));\n    }\n\n    if (!this._tokenPromises[audienceName]) {\n      this._tokenPromises[audienceName] = axios\n        .post(`${this._sdk.config.audiences.contxtAuth.host}/v1/oauth/token`, {\n          audience: audience.clientId,\n          client_id: this._sdk.config.auth.clientId,\n          client_secret: this._sdk.config.auth.clientSecret,\n          grant_type: 'client_credentials'\n        })\n        .then(({ data }) => {\n          return {\n            apiToken: data.access_token,\n            expiresAt: Date.now() + data.expires_in * 1000\n          };\n        })\n        .then((sessionInfo) => {\n          this._saveSession(audienceName, sessionInfo);\n          this._tokenPromises[audienceName] = null;\n\n          return sessionInfo;\n        })\n        .catch((err) => {\n          if (!(err.response && err.response.status)) {\n            throw new Error(\n              'There was a problem getting a token from the ContxtAuth server. Please check your configuration settings.'\n            );\n          }\n\n          throw err;\n        });\n    }\n\n    return this._tokenPromises[audienceName];\n  }\n\n  /**\n   * Saves a session in the auth instance for future use\n   *\n   * @param {string} audienceName\n   * @param {Object} sessionInfo\n   * @param {string} sessionInfo.apiToken\n   * @param {number} sessionInfo.expiresAt\n   *\n   * @private\n   */\n  _saveSession(audienceName, sessionInfo) {\n    this._sessionInfo = {\n      ...this._sessionInfo,\n      [audienceName]: sessionInfo\n    };\n  }\n}\n\nexport const TYPE = 'machineAuth';\nexport default MachineAuth;\n"]}