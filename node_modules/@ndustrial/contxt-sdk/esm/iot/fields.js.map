{"version":3,"sources":["iot/fields.js"],"names":["toCamelCase","Fields","sdk","request","baseUrl","_baseUrl","_request","_sdk","outputFieldId","Promise","reject","Error","get","then","outputField"],"mappings":";;;;AAAA,SAASA,WAAT,QAA4B,kBAA5B;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;IAKMC,M;AACJ;;;;;;;AAOA,kBAAYC,GAAZ,EAAiBC,OAAjB,EAA0BC,OAA1B,EAAmC;AAAA;;AACjC,SAAKC,QAAL,GAAgBD,OAAhB;AACA,SAAKE,QAAL,GAAgBH,OAAhB;AACA,SAAKI,IAAL,GAAYL,GAAZ;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;;wBAkBIM,a,EAAe;AACjB,UAAI,CAACA,aAAL,EAAoB;AAClB,eAAOC,QAAQC,MAAR,CACL,IAAIC,KAAJ,CACE,4EADF,CADK,CAAP;AAKD;;AAED,aAAO,KAAKL,QAAL,CACJM,GADI,CACG,KAAKP,QADR,gBAC2BG,aAD3B,EAEJK,IAFI,CAEC,UAACC,WAAD;AAAA,eAAiBd,YAAYc,WAAZ,CAAjB;AAAA,OAFD,CAAP;AAGD;;;;;;AAGH,eAAeb,MAAf","file":"fields.js","sourcesContent":["import { toCamelCase } from '../utils/objects';\n\n/**\n * @typedef {Object} OutputField\n * @property {Boolean} [canAggregate]\n * @property {Number} [divisor]\n * @property {String} feedKey\n * @property {String} fieldDescriptor\n * @property {String} fieldHumanName\n * @property {String} [fieldName]\n * @property {Number} id\n * @property {Boolean} [isDefault]\n * @property {Boolean} [isHidden]\n * @property {Boolean} [isTotalizer]\n * @property {Boolean} [isWindowed]\n * @property {String} [label]\n * @property {Number} outputId\n * @property {Number} [scalar]\n * @property {String} [status]\n * @property {String} [units]\n * @property {String} valueType What type of value can be coming from the feed.\n *   One of `boolean`, `numeric`, and `string`\n */\n\n/**\n * Module that provides access to field information\n *\n * @typicalname contxtSdk.iot.fields\n */\nclass Fields {\n  /**\n   * @param {Object} sdk An instance of the SDK so the module can communicate\n   *   with other modules\n   * @param {Object} request An instance of the request module tied to this\n   *   module's audience\n   * @param {string} baseUrl The base URL provided by the parent module\n   */\n  constructor(sdk, request, baseUrl) {\n    this._baseUrl = baseUrl;\n    this._request = request;\n    this._sdk = sdk;\n  }\n\n  /**\n   * Gets information about a field\n   *\n   * API Endpoint: '/fields/:fieldId'\n   * Method: GET\n   *\n   * @param {Number} outputFieldId The ID of an output field\n   *\n   * @returns {Promise}\n   * @fulfill {OutputField} Information about the output field\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.iot.fields\n   *   .get(563)\n   *   .then((outputField) => console.log(outputField))\n   *   .catch((err) => console.log(err));\n   */\n  get(outputFieldId) {\n    if (!outputFieldId) {\n      return Promise.reject(\n        new Error(\n          'An outputFieldId is required for getting information about an output field'\n        )\n      );\n    }\n\n    return this._request\n      .get(`${this._baseUrl}/fields/${outputFieldId}`)\n      .then((outputField) => toCamelCase(outputField));\n  }\n}\n\nexport default Fields;\n"]}