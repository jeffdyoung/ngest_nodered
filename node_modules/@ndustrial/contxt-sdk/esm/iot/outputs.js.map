{"version":3,"sources":["iot/outputs.js"],"names":["formatOutputFieldDataFromServer","Outputs","sdk","request","baseUrl","_baseUrl","_request","_sdk","outputId","fieldHumanName","options","Promise","reject","Error","get","params","then","fieldData"],"mappings":";;;;AAAA,SAASA,+BAAT,QAAgD,cAAhD;AACA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;AAMA;;;;;;IAKMC,O;AACJ;;;;;;;AAOA,mBAAYC,GAAZ,EAAiBC,OAAjB,EAA0BC,OAA1B,EAAmC;AAAA;;AACjC,SAAKC,QAAL,GAAgBD,OAAhB;AACA,SAAKE,QAAL,GAAgBH,OAAhB;AACA,SAAKI,IAAL,GAAYL,GAAZ;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iCAiCaM,Q,EAAUC,c,EAAgBC,O,EAAS;AAC9C,UAAI,CAACF,QAAL,EAAe;AACb,eAAOG,QAAQC,MAAR,CACL,IAAIC,KAAJ,CACE,kEADF,CADK,CAAP;AAKD;;AAED,UAAI,CAACJ,cAAL,EAAqB;AACnB,eAAOE,QAAQC,MAAR,CACL,IAAIC,KAAJ,CACE,yEADF,CADK,CAAP;AAKD;;AAED,aAAO,KAAKP,QAAL,CACJQ,GADI,CAEA,KAAKT,QAFL,iBAEyBG,QAFzB,gBAE4CC,cAF5C,YAGH,EAAEM,QAAQL,OAAV,EAHG,EAKJM,IALI,CAKC,UAACC,SAAD;AAAA,eAAejB,gCAAgCiB,SAAhC,CAAf;AAAA,OALD,CAAP;AAMD;;;;;;AAGH,eAAehB,OAAf","file":"outputs.js","sourcesContent":["import { formatOutputFieldDataFromServer } from '../utils/iot';\n/**\n * @typedef {Object} OutputFieldDataResponse\n * @property {Object} meta\n * @property {Number} meta.count Total number of field data records\n * @property {Boolean} meta.hasMore Indicates if there are more records\n *   to retrieve\n * @property {Number} [meta.limit] Number of records to return\n * @property {Number} [nextRecordTime] UNIX timestamp indicating a\n *   `timeStart` that would return new values\n * @property {Number} [meta.timeEnd] UNIX timestamp indicating the end of\n *   the query window\n * @property {Number} [meta.timeStart] UNIX timestamp indicating the\n *   start of the query window\n * @property {Number} [meta.window] The sampling window for records.\n *   Required if including a timeEnd or timeStart.\n *   Valid options include: `0`, `60`, `900`, and `3600`\n * @property {OutputFieldData[]} records\n */\n\n/**\n * @typedef {Object} OutputFieldData\n * @property {String} eventTime ISO 8601 Extended Format date/time string\n * @property {String} value\n */\n\n/**\n * Module that provides access to output information\n *\n * @typicalname contxtSdk.iot.outputs\n */\nclass Outputs {\n  /**\n   * @param {Object} sdk An instance of the SDK so the module can communicate\n   *   with other modules\n   * @param {Object} request An instance of the request module tied to this\n   *   module's audience\n   * @param {string} baseUrl The base URL provided by the parent module\n   */\n  constructor(sdk, request, baseUrl) {\n    this._baseUrl = baseUrl;\n    this._request = request;\n    this._sdk = sdk;\n  }\n\n  /**\n   * Gets an output's data from a specific field\n   *\n   * API Endpoint: '/outputs/:outputId/fields/:fieldHumanName/data'\n   * Method: GET\n   *\n   * @param {Number} outputId The ID of an output\n   * @param {String} fieldHumanName The human readable name of a field\n   * @param {Object} [options]\n   * @param {Number} [options.limit = 5000] Number of records to return\n   * @param {Number} [options.timeEnd] UNIX timestamp indicating the end of the\n   *   query window\n   * @param {Number} [options.timeStart] UNIX timestamp indicating the start of\n   *   the query window\n   * @param {Number} [options.window] The sampling window for records.\n   *   Required if including a timeEnd or timeStart.\n   *   Valid options include: `0`, `60`, `900`, and `3600`\n   *\n   * @returns {Promise}\n   * @fulfill {OutputFieldDataResponse}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.iot.outputs\n   *   .getFieldData(491, 'temperature', {\n   *     limit: 100,\n   *     timeStart: 1530290218365,\n   *     window: 3600\n   *   })\n   *   .then(outputData => console.log(outputData))\n   *   .catch(err => console.log(err));\n\n   */\n  getFieldData(outputId, fieldHumanName, options) {\n    if (!outputId) {\n      return Promise.reject(\n        new Error(\n          'An outputId is required for getting data about a specific output'\n        )\n      );\n    }\n\n    if (!fieldHumanName) {\n      return Promise.reject(\n        new Error(\n          \"A fieldHumanName is required for getting a specific field's output data\"\n        )\n      );\n    }\n\n    return this._request\n      .get(\n        `${this._baseUrl}/outputs/${outputId}/fields/${fieldHumanName}/data`,\n        { params: options }\n      )\n      .then((fieldData) => formatOutputFieldDataFromServer(fieldData));\n  }\n}\n\nexport default Outputs;\n"]}