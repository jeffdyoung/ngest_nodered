{"version":3,"sources":["iot/fieldCategories.js"],"names":["isPlainObject","toCamelCase","toSnakeCase","formatPaginatedDataFromServer","FieldCategories","sdk","request","baseUrl","_baseUrl","_request","_sdk","fieldCategory","requiredFields","i","length","field","Promise","reject","Error","formattedCategory","post","then","categoryId","delete","get","paginationOptions","params","fieldCategories","facilityId","update","formattedUpdate","excludeKeys","put"],"mappings":"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","file":"fieldCategories.js","sourcesContent":["import isPlainObject from 'lodash.isplainobject';\nimport { toCamelCase, toSnakeCase } from '../utils/objects';\nimport { formatPaginatedDataFromServer } from '../utils/pagination';\n\n/**\n * @typedef {Object} FieldCategory\n * @property {String} description\n * @property {String} id UUID\n * @property {String} name\n * @property {String} organizationId\n * @property {String} [parentCategoryId] UUID\n */\n\n/**\n * @typedef {Object} FieldCategoriesFromServer\n * @property {Object} _metadata Metadata about the pagination settings\n * @property {number} _metadata.offset Offset of records in subsequent queries\n * @property {number} _metadata.totalRecords Total number of asset types found\n * @property {FieldCategory[]} records\n */\n\n/**\n * Module that provides access to field category information\n *\n * @typicalname contxtSdk.iot.fieldCategories\n */\nclass FieldCategories {\n  /**\n   * @param {Object} sdk An instance of the SDK so the module can communicate\n   *   with other modules\n   * @param {Object} request An instance of the request module tied to this\n   *   module's audience\n   * @param {string} baseUrl The base URL provided by the parent module\n   */\n  constructor(sdk, request, baseUrl) {\n    this._baseUrl = baseUrl;\n    this._request = request;\n    this._sdk = sdk;\n  }\n\n  /**\n   * Create a field category\n   *\n   * API Endpoint: '/categories'\n   * Method: POST\n   *\n   * @param {Object} fieldCategory\n   * @param {string} fieldCategory.description\n   * @param {string} fieldCategory.name\n   * @param {string} fieldCategory.organizationId\n   * @param {string} [fieldCategory.parentCategoryId]\n   *\n   * @returns {Promise}\n   * @fulfill {FieldCategory} Information about the field category\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.iot.fieldCategories\n   *   .create({\n   *      description: 'Compressors in Room 2',\n   *      name: 'Room 2',\n   *      organizationId: '8a3cb818-0889-4674-b871-7ceadaecd26a',\n   *      parentCategoryId: 'e9f8f89c-609c-4c83-8ebc-cea928af661e'\n   *   })\n   *   .then((fieldCategory) => console.log(fieldCategory))\n   *   .catch((err) => console.log(err));\n   */\n  create(fieldCategory) {\n    const requiredFields = ['name', 'description', 'organizationId'];\n\n    for (let i = 0; requiredFields.length > i; i++) {\n      const field = requiredFields[i];\n      if (!fieldCategory[field]) {\n        return Promise.reject(\n          new Error(`A ${field} is required to create a new field category.`)\n        );\n      }\n    }\n\n    const formattedCategory = toSnakeCase(fieldCategory);\n\n    return this._request\n      .post(`${this._baseUrl}/categories`, formattedCategory)\n      .then((fieldCategory) => toCamelCase(fieldCategory));\n  }\n\n  /**\n   * Deletes a field category\n   *\n   * API Endpoint: '/categories/:categoryId'\n   * Method: DELETE\n   *\n   * @param {String} categoryId The UUID of a field category\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.iot.fieldCategories\n   *   .delete('b3dbaae3-25dd-475b-80dc-66296630a8d0');\n   */\n  delete(categoryId) {\n    if (!categoryId) {\n      return Promise.reject(\n        new Error('A categoryId is required for deleting a field category.')\n      );\n    }\n\n    return this._request.delete(`${this._baseUrl}/categories/${categoryId}`);\n  }\n\n  /**\n   * Gets information about a field category\n   *\n   * API Endpoint: '/categories/:categoryId'\n   * Method: GET\n   *\n   * @param {String} categoryId The UUID of a field category\n   *\n   * @returns {Promise}\n   * @fulfill {FieldCategory} Information about the field category\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.iot.fieldCategories\n   *   .get('b3dbaae3-25dd-475b-80dc-66296630a8d0')\n   *   .then((fieldCategory) => console.log(fieldCategory))\n   *   .catch((err) => console.log(err));\n   */\n  get(categoryId) {\n    if (!categoryId) {\n      return Promise.reject(\n        new Error(\n          'A categoryId is required for getting information about a field category.'\n        )\n      );\n    }\n\n    return this._request\n      .get(`${this._baseUrl}/categories/${categoryId}`)\n      .then((fieldCategory) => toCamelCase(fieldCategory));\n  }\n\n  /**\n   * Get a listing of all field categories available to the user.\n   *\n   * API Endpoint: '/categories'\n   * Method: GET\n   *\n   * @param {PaginationOptions} [paginationOptions]\n   *\n   * @returns {Promise}\n   * @fulfill {FieldCategoriesFromServer} Information about the field categories\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.iot.fieldCategories\n   *   .getAll()\n   *   .then((fieldCategories) => console.log(fieldCategories))\n   *   .catch((err) => console.log(err));\n   */\n  getAll(paginationOptions) {\n    return this._request\n      .get(`${this._baseUrl}/categories`, {\n        params: toSnakeCase(paginationOptions)\n      })\n      .then((fieldCategories) =>\n        formatPaginatedDataFromServer(fieldCategories)\n      );\n  }\n\n  /**\n   * Get a listing of all field categories for a given facility ID.\n   *\n   * API Endpoint: '/facilities/:facilityId/categories'\n   * Method: GET\n   *\n   * @param {String} facilityId\n   *\n   * @returns {Promise}\n   * @fulfill {FieldCategory[]} Information about the field categories\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.iot.fieldCategories\n   *   .getAllByFacility(187)\n   *   .then((fieldCategories) => console.log(fieldCategories))\n   *   .catch((err) => console.log(err));\n   */\n  getAllByFacility(facilityId) {\n    if (!facilityId) {\n      return Promise.reject(\n        new Error(\n          'A facilityId is required for getting field categories by facility.'\n        )\n      );\n    }\n\n    return this._request\n      .get(`${this._baseUrl}/facilities/${facilityId}/categories`)\n      .then((fieldCategories) => toCamelCase(fieldCategories));\n  }\n\n  /**\n   * Updates information about a field category\n   *\n   * API Endpoint: '/categories/:categoryId'\n   * Method: PUT\n   *\n   * @param {String} categoryId The UUID of a field category\n   * @param {Object} update\n   * @param {string} [update.description]\n   * @param {string} [update.name]\n   * @param {string} [update.parentCategoryId]\n   *\n   * @returns {Promise}\n   * @fulfill {FieldCategory} Information about the field category\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.iot.fieldCategories\n   *   .update('b3dbaae3-25dd-475b-80dc-66296630a8d0', {\n   *      description: 'Power usage from all compressors in Room 2',\n   *      parentCategoryId: 'e9f8f89c-609c-4c83-8ebc-cea928af661e',\n   *      name: 'Room 2 Compressors'\n   *   })\n   *   .then((fieldCategory) => console.log(fieldCategory))\n   *   .catch((err) => console.log(err));\n   */\n  update(categoryId, update) {\n    if (!categoryId) {\n      return Promise.reject(\n        new Error(\n          'A categoryId is required for updating information about a field category.'\n        )\n      );\n    }\n\n    if (!update) {\n      return Promise.reject(\n        new Error('An update is required to update a field category')\n      );\n    }\n\n    if (!isPlainObject(update)) {\n      return Promise.reject(\n        new Error(\n          'The field category update must be a well-formed object with the data you wish to update.'\n        )\n      );\n    }\n\n    const formattedUpdate = toSnakeCase(update, {\n      excludeKeys: ['id', 'organizationId']\n    });\n\n    return this._request\n      .put(`${this._baseUrl}/categories/${categoryId}`, formattedUpdate)\n      .then((fieldCategory) => toCamelCase(fieldCategory));\n  }\n}\n\nexport default FieldCategories;\n"]}