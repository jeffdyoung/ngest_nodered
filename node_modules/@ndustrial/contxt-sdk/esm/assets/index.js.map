{"version":3,"sources":["assets/index.js"],"names":["isPlainObject","AssetAttributes","AssetMetrics","AssetTypes","toCamelCase","toSnakeCase","formatPaginatedDataFromServer","Assets","sdk","request","baseUrl","config","audiences","facilities","host","_baseUrl","_request","_sdk","attributes","types","metrics","asset","requiredFields","i","length","field","Promise","reject","Error","post","then","assetId","delete","get","paginationOptions","params","assetsData","organizationId","options","update","formattedUpdate","excludeKeys","put"],"mappings":"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","file":"index.js","sourcesContent":["import isPlainObject from 'lodash.isplainobject';\nimport AssetAttributes from './assetAttributes';\nimport AssetMetrics from './assetMetrics';\nimport AssetTypes from './assetTypes';\n\nimport { toCamelCase, toSnakeCase } from '../utils/objects';\nimport { formatPaginatedDataFromServer } from '../utils/pagination';\n\n/**\n * @typedef {Object} Asset\n * @property {string} assetTypeId UUID corresponding with the asset type\n * @property {string} createdAt ISO 8601 Extended Format date/time string\n * @property {string} [description]\n * @property {string} id UUID\n * @property {string} label\n * @property {string} organizationId UUID corresponding with the organization\n * @property {string} updatedAt ISO 8601 Extended Format date/time string\n */\n\n/**\n * @typedef {Object} AssetsFromServer\n * @property {Object} _metadata Metadata about the pagination settings\n * @property {number} _metadata.offset Offset of records in subsequent queries\n * @property {number} _metadata.totalRecords Total number of asset types found\n * @property {Asset[]} records\n */\n\n/**\n * Module that provides access to, and the manipulation of, information about different assets\n *\n * @typicalname contxtSdk.assets\n */\nclass Assets {\n  /**\n   * @param {Object} sdk An instance of the SDK so the module can communicate with other modules.\n   * @param {Object} request An instance of the request module tied to this module's audience.\n   */\n  constructor(sdk, request) {\n    const baseUrl = `${sdk.config.audiences.facilities.host}/v1`;\n\n    this._baseUrl = baseUrl;\n    this._request = request;\n    this._sdk = sdk;\n\n    this.attributes = new AssetAttributes(sdk, request, baseUrl);\n    this.types = new AssetTypes(sdk, request, baseUrl);\n    this.metrics = new AssetMetrics(sdk, request, baseUrl);\n  }\n\n  /**\n   * Creates a new asset\n   *\n   * API Endpoint: '/assets'\n   * Method: POST\n   *\n   * @param {Object} asset\n   * @param {string} asset.assetTypeId UUID\n   * @param {string} [asset.description]\n   * @param {string} asset.label\n   * @param {string} asset.organizationId UUID\n   *\n   * @returns {Promise}\n   * @fulfill {Asset} information about the new asset\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.assets\n   *   .create({\n   *     assetTypeId: '4f0e51c6-728b-4892-9863-6d002e61204d',\n   *     description: '221B Baker Street, London',\n   *     label: 'Sherlock Homes Museum',\n   *     organizationId: 'b47e45af-3e18-408a-8070-008f9e6d7b42'\n   *   })\n   *   .then((asset) => console.log(asset))\n   *   .catch((err) => console.log(err));\n   */\n  create(asset = {}) {\n    const requiredFields = ['assetTypeId', 'label', 'organizationId'];\n\n    for (let i = 0; i < requiredFields.length; i++) {\n      const field = requiredFields[i];\n\n      if (!asset[field]) {\n        return Promise.reject(\n          new Error(`A ${field} is required to create a new asset.`)\n        );\n      }\n    }\n\n    return this._request\n      .post(`${this._baseUrl}/assets`, toSnakeCase(asset))\n      .then((asset) => toCamelCase(asset));\n  }\n\n  /**\n   * Deletes an asset\n   *\n   * API Endpoint: '/assets/:assetId'\n   * Method: DELETE\n   *\n   * @param {string} assetId The ID of the asset (formatted as a UUID)\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.assets.delete('0b51429f-91a0-48ba-b144-fd2db697000e');\n   */\n  delete(assetId) {\n    if (!assetId) {\n      return Promise.reject(\n        new Error('An asset ID is required for deleting an asset.')\n      );\n    }\n\n    return this._request.delete(`${this._baseUrl}/assets/${assetId}`);\n  }\n\n  /**\n   * Gets information about an asset\n   *\n   * API Endpoint: '/assets/:assetId'\n   * Method: GET\n   *\n   * @param {string} assetId The ID of the asset (formatted as a UUID)\n   *\n   * @returns {Promise}\n   * @fulfill {Asset} Information about the asset\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.assets\n   *   .get('0b51429f-91a0-48ba-b144-fd2db697000e')\n   *   .then((asset) => console.log(asset))\n   *   .catch((err) => console.log(err));\n   */\n  get(assetId) {\n    if (!assetId) {\n      return Promise.reject(\n        new Error(\n          'An asset ID is required for getting information about an asset.'\n        )\n      );\n    }\n\n    return this._request\n      .get(`${this._baseUrl}/assets/${assetId}`)\n      .then((asset) => toCamelCase(asset));\n  }\n\n  /**\n   * Get a list of all assets\n   *\n   * API Endpoint: '/assets'\n   * Method: GET\n   *\n   * @param {PaginationOptions} [paginationOptions]\n   *\n   * @returns {Promise}\n   * @fulfill {AssetsFromServer}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.assets\n   *   .getAll()\n   *   .then((assets) => console.log(assets))\n   *   .catch((err) => console.log(err));\n   */\n  getAll(paginationOptions) {\n    return this._request\n      .get(`${this._baseUrl}/assets`, {\n        params: toSnakeCase(paginationOptions)\n      })\n      .then((assetsData) => formatPaginatedDataFromServer(assetsData));\n  }\n\n  /**\n   * Get a list of all assets that belong to a particular organization\n   *\n   * API Endpoint: '/organizations/:organizationId/assets'\n   * Method: GET\n   *\n   * @param {string} organizationId UUID corresponding with an organization\n   * @param {Object} [options] Object containing parameters to be called with the request\n   * @param {string} [options.assetTypeId] UUID of the asset type to use for filtering\n   * @param {Number} [options.limit] Maximum number of records to return per query\n   * @param {Number} [options.offset] How many records from the first record to start\n   *\n   * @returns {Promise}\n   * @fulfill {AssetsFromServer}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.assets\n   *   .getAllByOrganizationId('53fba880-70b7-47a2-b4e3-ad9ecfb67d5c', {\n   *     assetTypeId: '4f0e51c6-728b-4892-9863-6d002e61204d'\n   *   })\n   *   .then((assets) => console.log(assets))\n   *   .catch((err) => console.log(err));\n   */\n  getAllByOrganizationId(organizationId, options) {\n    if (!organizationId) {\n      return Promise.reject(\n        new Error(\n          \"An organization ID is required for getting a list of an organization's assets.\"\n        )\n      );\n    }\n\n    const params = toSnakeCase(options);\n\n    return this._request\n      .get(`${this._baseUrl}/organizations/${organizationId}/assets`, {\n        params\n      })\n      .then((assetsData) => formatPaginatedDataFromServer(assetsData));\n  }\n\n  /**\n   * Updates an asset's data\n   *\n   * API Endpoint: '/assets/:assetId'\n   * Method: PUT\n   *\n   * @param {string} assetId The ID of the asset to update (formatted as a UUID)\n   * @param {Object} update An object containing the updated data for the asset\n   * @param {string} update.description\n   *\n   * @example\n   * contxtSdk.assets\n   *   .update({\n   *     description: 'A new description'\n   *   })\n   *   .then((asset) => console.log(asset))\n   *   .catch((err) => console.log(err));\n   */\n  update(assetId, update) {\n    if (!assetId) {\n      return Promise.reject(\n        new Error('An asset ID is required to update an asset.')\n      );\n    }\n\n    if (!update) {\n      return Promise.reject(\n        new Error('An update is required to update an asset.')\n      );\n    }\n\n    if (!isPlainObject(update)) {\n      return Promise.reject(\n        new Error(\n          'The asset update must be a well-formed object with the data you wish to update.'\n        )\n      );\n    }\n\n    const formattedUpdate = toSnakeCase(update, {\n      excludeKeys: ['assetTypeId', 'id', 'label', 'organizationId']\n    });\n\n    return this._request\n      .put(`${this._baseUrl}/assets/${assetId}`, formattedUpdate)\n      .then((asset) => toCamelCase(asset));\n  }\n}\n\nexport default Assets;\n"]}