{"version":3,"sources":["assets/assetTypes.js"],"names":["has","isPlainObject","toCamelCase","toSnakeCase","formatPaginatedDataFromServer","AssetTypes","sdk","request","baseUrl","_baseUrl","_request","_sdk","assetType","hasFieldFns","default","object","key","organizationId","requiredFields","i","length","field","hasField","Promise","reject","Error","post","then","assetTypeId","delete","get","paginationOptions","params","assetTypesData","update","formattedUpdate","excludeKeys","put"],"mappings":";;;;AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,OAAOC,aAAP,MAA0B,sBAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,kBAAzC;AACA,SAASC,6BAAT,QAA8C,qBAA9C;;AAEA;;;;;;;;;;AAUA;;;;;;;;AAQA;;;;;;IAKMC,U;AACJ;;;;;AAKA,sBAAYC,GAAZ,EAAiBC,OAAjB,EAA0BC,OAA1B,EAAmC;AAAA;;AACjC,SAAKC,QAAL,GAAgBD,OAAhB;AACA,SAAKE,QAAL,GAAgBH,OAAhB;AACA,SAAKI,IAAL,GAAYL,GAAZ;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BA0BuB;AAAA,UAAhBM,SAAgB,uEAAJ,EAAI;;AACrB,UAAMC,cAAc;AAClBC,iBAAS,kBAACC,MAAD,EAASC,GAAT;AAAA,iBAAiB,CAAC,CAACD,OAAOC,GAAP,CAAnB;AAAA,SADS;AAElBC,wBAAgB,wBAACF,MAAD,EAASC,GAAT;AAAA,iBAAiBhB,IAAIe,MAAJ,EAAYC,GAAZ,CAAjB;AAAA;AAFE,OAApB;AAIA,UAAME,iBAAiB,CAAC,aAAD,EAAgB,OAAhB,EAAyB,gBAAzB,CAAvB;;AAEA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,eAAeE,MAAnC,EAA2CD,GAA3C,EAAgD;AAC9C,YAAME,QAAQH,eAAeC,CAAf,CAAd;AACA,YAAMG,WAAWT,YAAYQ,KAAZ,KAAsBR,YAAYC,OAAnD;;AAEA,YAAI,CAACQ,SAASV,SAAT,EAAoBS,KAApB,CAAL,EAAiC;AAC/B,iBAAOE,QAAQC,MAAR,CACL,IAAIC,KAAJ,QAAeJ,KAAf,8CADK,CAAP;AAGD;AACF;;AAED,aAAO,KAAKX,QAAL,CACJgB,IADI,CACI,KAAKjB,QADT,oBACkCN,YAAYS,SAAZ,CADlC,EAEJe,IAFI,CAEC,UAACf,SAAD;AAAA,eAAeV,YAAYU,SAAZ,CAAf;AAAA,OAFD,CAAP;AAGD;;AAED;;;;;;;;;;;;;;;;;;4BAeOgB,W,EAAa;AAClB,UAAI,CAACA,WAAL,EAAkB;AAChB,eAAOL,QAAQC,MAAR,CACL,IAAIC,KAAJ,CAAU,0DAAV,CADK,CAAP;AAGD;;AAED,aAAO,KAAKf,QAAL,CAAcmB,MAAd,CAAwB,KAAKpB,QAA7B,sBAAsDmB,WAAtD,CAAP;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;wBAkBIA,W,EAAa;AACf,UAAI,CAACA,WAAL,EAAkB;AAChB,eAAOL,QAAQC,MAAR,CACL,IAAIC,KAAJ,CACE,2EADF,CADK,CAAP;AAKD;;AAED,aAAO,KAAKf,QAAL,CACJoB,GADI,CACG,KAAKrB,QADR,sBACiCmB,WADjC,EAEJD,IAFI,CAEC,UAACf,SAAD;AAAA,eAAeV,YAAYU,SAAZ,CAAf;AAAA,OAFD,CAAP;AAGD;;AAED;;;;;;;;;;;;;;;;;;;;;2BAkBOmB,iB,EAAmB;AACxB,aAAO,KAAKrB,QAAL,CACJoB,GADI,CACG,KAAKrB,QADR,oBACiC;AACpCuB,gBAAQ7B,YAAY4B,iBAAZ;AAD4B,OADjC,EAIJJ,IAJI,CAIC,UAACM,cAAD;AAAA,eAAoB7B,8BAA8B6B,cAA9B,CAApB;AAAA,OAJD,CAAP;AAKD;;AAED;;;;;;;;;;;;;;;;;;;;;;2CAmBuBhB,c,EAAgBc,iB,EAAmB;AACxD,UAAI,CAACd,cAAL,EAAqB;AACnB,eAAOM,QAAQC,MAAR,CACL,IAAIC,KAAJ,CACE,qFADF,CADK,CAAP;AAKD;;AAED,aAAO,KAAKf,QAAL,CACJoB,GADI,CACG,KAAKrB,QADR,uBACkCQ,cADlC,oBACiE;AACpEe,gBAAQ7B,YAAY4B,iBAAZ;AAD4D,OADjE,EAIJJ,IAJI,CAIC,UAACM,cAAD;AAAA,eAAoB7B,8BAA8B6B,cAA9B,CAApB;AAAA,OAJD,CAAP;AAKD;;AAED;;;;;;;;;;;;;;;;;;;;;;;2BAoBOL,W,EAAaM,O,EAAQ;AAC1B,UAAI,CAACN,WAAL,EAAkB;AAChB,eAAOL,QAAQC,MAAR,CACL,IAAIC,KAAJ,CAAU,uDAAV,CADK,CAAP;AAGD;;AAED,UAAI,CAACS,OAAL,EAAa;AACX,eAAOX,QAAQC,MAAR,CACL,IAAIC,KAAJ,CAAU,gDAAV,CADK,CAAP;AAGD;;AAED,UAAI,CAACxB,cAAciC,OAAd,CAAL,EAA4B;AAC1B,eAAOX,QAAQC,MAAR,CACL,IAAIC,KAAJ,CACE,sFADF,CADK,CAAP;AAKD;;AAED,UAAMU,kBAAkBhC,YAAY+B,OAAZ,EAAoB;AAC1CE,qBAAa,CAAC,IAAD,EAAO,OAAP,EAAgB,gBAAhB;AAD6B,OAApB,CAAxB;;AAIA,aAAO,KAAK1B,QAAL,CAAc2B,GAAd,CACF,KAAK5B,QADH,sBAC4BmB,WAD5B,EAELO,eAFK,CAAP;AAID;;;;;;AAGH,eAAe9B,UAAf","file":"assetTypes.js","sourcesContent":["import has from 'lodash.has';\nimport isPlainObject from 'lodash.isplainobject';\nimport { toCamelCase, toSnakeCase } from '../utils/objects';\nimport { formatPaginatedDataFromServer } from '../utils/pagination';\n\n/**\n * @typedef {Object} AssetType\n * @property {string} createdAt ISO 8601 Extended Format date/time string\n * @property {string} description\n * @property {string} id UUID\n * @property {string} label\n * @property {string} organizationId UUID corresponding with the organization\n * @property {string} updatedAt ISO 8601 Extended Format date/time string\n */\n\n/**\n * @typedef {Object} AssetTypesFromServer\n * @property {Object} _metadata Metadata about the pagination settings\n * @property {number} _metadata.offset Offset of records in subsequent queries\n * @property {number} _metadata.totalRecords Total number of asset types found\n * @property {AssetType[]} records\n */\n\n/**\n * Module that provides access to, and the manipulation of, information about different asset types\n *\n * @typicalname contxtSdk.assets.types\n */\nclass AssetTypes {\n  /**\n   * @param {Object} sdk An instance of the SDK so the module can communicate with other modules.\n   * @param {Object} request An instance of the request module tied to this module's audience.\n   * @param {string} baseUrl The base URL provided by the parent module\n   */\n  constructor(sdk, request, baseUrl) {\n    this._baseUrl = baseUrl;\n    this._request = request;\n    this._sdk = sdk;\n  }\n\n  /**\n   * Creates a new asset type\n   *\n   * API Endpoint: '/assets/types'\n   * Method: POST\n   *\n   * @param {Object} assetType\n   * @param {string} assetType.description\n   * @param {string} assetType.label\n   * @param {string} assetType.organizationId The ID of the asset type's parent organization. Can be\n   *   explicitly set to `null` to create a global asset type\n   *\n   * @returns {Promise}\n   * @fulfill {AssetType} Information about the new asset type\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.assets.types\n   *   .create({\n   *     description: 'A physicial facility building',\n   *     label: 'Facility',\n   *     organizationId: 'b47e45af-3e18-408a-8070-008f9e6d7b42'\n   *   })\n   *   .then((assetType) => console.log(assetType))\n   *   .catch((err) => console.log(err));\n   */\n  create(assetType = {}) {\n    const hasFieldFns = {\n      default: (object, key) => !!object[key],\n      organizationId: (object, key) => has(object, key)\n    };\n    const requiredFields = ['description', 'label', 'organizationId'];\n\n    for (let i = 0; i < requiredFields.length; i++) {\n      const field = requiredFields[i];\n      const hasField = hasFieldFns[field] || hasFieldFns.default;\n\n      if (!hasField(assetType, field)) {\n        return Promise.reject(\n          new Error(`A ${field} is required to create a new asset type.`)\n        );\n      }\n    }\n\n    return this._request\n      .post(`${this._baseUrl}/assets/types`, toSnakeCase(assetType))\n      .then((assetType) => toCamelCase(assetType));\n  }\n\n  /**\n   * Deletes an asset type\n   *\n   * API Endpoint: '/assets/types/:assetTypeId'\n   * Method: DELETE\n   *\n   * @param {string} assetTypeId The ID of the asset type (formatted as a UUID)\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.assets.types.delete('4f0e51c6-728b-4892-9863-6d002e61204d')\n   */\n  delete(assetTypeId) {\n    if (!assetTypeId) {\n      return Promise.reject(\n        new Error('An asset type ID is required for deleting an asset type.')\n      );\n    }\n\n    return this._request.delete(`${this._baseUrl}/assets/types/${assetTypeId}`);\n  }\n\n  /**\n   * Gets information about an asset type\n   *\n   * API Endpoint: '/assets/types/:assetTypeId'\n   * Method: GET\n   *\n   * @param {string} assetTypeId The ID of the asset type (formatted as a UUID)\n   *\n   * @returns {Promise}\n   * @fulfill {AssetType} Information about the asset type\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.assets.types\n   *   .get('4f0e51c6-728b-4892-9863-6d002e61204d')\n   *   .then((assetType) => console.log(assetType))\n   *   .catch((err) => console.log(err));\n   */\n  get(assetTypeId) {\n    if (!assetTypeId) {\n      return Promise.reject(\n        new Error(\n          'An asset type ID is required for getting information about an asset type.'\n        )\n      );\n    }\n\n    return this._request\n      .get(`${this._baseUrl}/assets/types/${assetTypeId}`)\n      .then((assetType) => toCamelCase(assetType));\n  }\n\n  /**\n   * Gets a list of all asset types\n   *\n   * API Endpoint: '/assets/types/\n   * Method: GET\n   *\n   * @param {PaginationOptions} [paginationOptions]\n   *\n   * @returns {Promise}\n   * @fulfill {AssetTypesFromServer}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.assets.types\n   *   .getAll()\n   *   .then((assetTypes) => console.log(assetTypes))\n   *   .catch((err) => console.log(err));\n   */\n  getAll(paginationOptions) {\n    return this._request\n      .get(`${this._baseUrl}/assets/types`, {\n        params: toSnakeCase(paginationOptions)\n      })\n      .then((assetTypesData) => formatPaginatedDataFromServer(assetTypesData));\n  }\n\n  /**\n   * Gets a list of all asset types that belong to a particular organization\n   *\n   * API Endpoint: '/organizations/:organizationId/assets/types'\n   * Method: GET\n   *\n   * @param {string} organizationId UUID corresponding with an organization\n   * @param {PaginationOptions} [paginationOptions]\n   *\n   * @returns {Promise}\n   * @fulfill {AssetTypesFromServer}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.assets.types\n   *   .getAllByOrganizationId('53fba880-70b7-47a2-b4e3-ad9ecfb67d5c')\n   *   .then((assetTypes) => console.log(assetTypes))\n   *   .catch((err) => console.log(assetTypes));\n   */\n  getAllByOrganizationId(organizationId, paginationOptions) {\n    if (!organizationId) {\n      return Promise.reject(\n        new Error(\n          \"An organization ID is required for getting a list of an organization's asset types.\"\n        )\n      );\n    }\n\n    return this._request\n      .get(`${this._baseUrl}/organizations/${organizationId}/assets/types`, {\n        params: toSnakeCase(paginationOptions)\n      })\n      .then((assetTypesData) => formatPaginatedDataFromServer(assetTypesData));\n  }\n\n  /**\n   * Updates an asset type's data\n   *\n   * API Endpoint: '/assets/types/:assetTypeId'\n   * Method: PUT\n   *\n   * @param {string} assetTypeId The ID of the asset type to update (formatted as a UUID)\n   * @param {Object} update An object containing the updated data for the asset type\n   * @param {string} update.description\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.assets.types\n   *   .update('5f310899-d8f9-4dac-ae82-cedb2048a8ef', {\n   *     description: 'A physical facility building'\n   *   });\n   */\n  update(assetTypeId, update) {\n    if (!assetTypeId) {\n      return Promise.reject(\n        new Error('An asset type ID is required to update an asset type.')\n      );\n    }\n\n    if (!update) {\n      return Promise.reject(\n        new Error('An update is required to update an asset type.')\n      );\n    }\n\n    if (!isPlainObject(update)) {\n      return Promise.reject(\n        new Error(\n          'The asset type update must be a well-formed object with the data you wish to update.'\n        )\n      );\n    }\n\n    const formattedUpdate = toSnakeCase(update, {\n      excludeKeys: ['id', 'label', 'organizationId']\n    });\n\n    return this._request.put(\n      `${this._baseUrl}/assets/types/${assetTypeId}`,\n      formattedUpdate\n    );\n  }\n}\n\nexport default AssetTypes;\n"]}