{"version":3,"sources":["coordinator/consent.js"],"names":["toCamelCase","Consent","sdk","request","baseUrl","organizationId","_baseUrl","_request","_sdk","_organizationId","consentId","Promise","reject","Error","auth","getCurrentAccessToken","then","accessToken","post","access_token","userApproval","applicationConsent"],"mappings":";;;;AAAA,SAASA,WAAT,QAA4B,kBAA5B;;AAEA;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;AAYA;;;;;;;;;;;AAWA;;;;;;;;;AASA;;;;;;IAKMC,O;AACJ;;;;;;AAMA,mBAAYC,GAAZ,EAAiBC,OAAjB,EAA0BC,OAA1B,EAA0D;AAAA,QAAvBC,cAAuB,uEAAN,IAAM;;AAAA;;AACxD,SAAKC,QAAL,GAAgBF,OAAhB;AACA,SAAKG,QAAL,GAAgBJ,OAAhB;AACA,SAAKK,IAAL,GAAYN,GAAZ;AACA,SAAKO,eAAL,GAAuBJ,cAAvB;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;2BAqBOK,S,EAAW;AAAA;;AAChB,UAAI,CAACA,SAAL,EAAgB;AACd,eAAOC,QAAQC,MAAR,CACL,IAAIC,KAAJ,CAAU,gDAAV,CADK,CAAP;AAGD;;AAED,aAAO,KAAKL,IAAL,CAAUM,IAAV,CAAeC,qBAAf,GAAuCC,IAAvC,CAA4C,UAACC,WAAD,EAAiB;AAClE,YAAI,CAACA,WAAL,EAAkB;AAChB,iBAAON,QAAQC,MAAR,CAAe,IAAIC,KAAJ,CAAU,+BAAV,CAAf,CAAP;AACD;;AAED,eAAO,MAAKN,QAAL,CACJW,IADI,CACI,MAAKZ,QADT,kBAC8BI,SAD9B,cACkD;AACrDS,wBAAcF;AADuC,SADlD,EAIJD,IAJI,CAIC,UAACI,YAAD;AAAA,iBAAkBpB,YAAYoB,YAAZ,CAAlB;AAAA,SAJD,CAAP;AAKD,OAVM,CAAP;AAWD;;AAED;;;;;;;;;;;;;;;;;;;;;;;+CAoB2B;AAAA;;AACzB,aAAO,KAAKZ,IAAL,CAAUM,IAAV,CAAeC,qBAAf,GAAuCC,IAAvC,CAA4C,UAACC,WAAD,EAAiB;AAClE,YAAI,CAACA,WAAL,EAAkB;AAChB,iBAAON,QAAQC,MAAR,CAAe,IAAIC,KAAJ,CAAU,+BAAV,CAAf,CAAP;AACD;;AAED,eAAO,OAAKN,QAAL,CACJW,IADI,CACI,OAAKZ,QADT,4BAC0C;AAC7Ca,wBAAcF;AAD+B,SAD1C,EAIJD,IAJI,CAIC,UAACK,kBAAD;AAAA,iBAAwBrB,YAAYqB,kBAAZ,CAAxB;AAAA,SAJD,CAAP;AAKD,OAVM,CAAP;AAWD;;;;;;AAGH,eAAepB,OAAf","file":"consent.js","sourcesContent":["import { toCamelCase } from '../utils/objects';\n\n/**\n * @typedef {Object} ContxtApplicationConsent\n * @param {string} clientId\n * @param {string} clientSecret\n * @param {string} createdAt ISO 8601 Extended Format date/time string\n * @param {ContxtApplicationVersion} currentVersion The current application version\n * @param {string} description Application's description\n * @param {string} iconUrl Application's icon url\n * @param {number} id Application's ID\n * @param {string} name Application's name\n * @param {number} serviceId Application's service ID\n * @param {string} updatedAt ISO 8601 Extended Format date/time string\n */\n\n/**\n * @typedef {Object} ContxtApplicationVersion\n * @param {number} applicationId\n * @param {ContxtConsent} [consent] The consent model associated with this application version\n * @param {string} consentId\n * @param {string} createdAt ISO 8601 Extended Format date/time string\n * @param {string} description\n * @param {string} id UUID\n * @param {string} label\n * @param {string} updatedAt ISO 8601 Extended Format date/time string\n */\n\n/**\n * @typedef {Object} ContxtConsent\n * @param {string} createdAt ISO 8601 Extended Format date/time string\n * @param {string} [effectiveEndDate] ISO 8601 Extended Format date/time string\n * @param {string} effectiveStartDate ISO 8601 Extended Format date/time string\n * @param {string} id UUID\n * @param {string} text The body of the consent form in HTML\n * @param {string} updatedAt ISO 8601 Extended Format date/time string\n * @param {ContxtUser[]} userApproval An array of users. If empty, the user has not consented\n */\n\n/**\n * @typedef {Object} ContxtUserConsentApproval\n * @param {string} consentId\n * @param {string} createdAt ISO 8601 Extended Format date/time string\n * @param {string} id UUID\n * @param {string} updatedAt ISO 8601 Extended Format date/time string\n * @param {string} userId UUID\n */\n\n/**\n * Module for managing application consent\n *\n * @typicalname contxtSdk.coordinator.consent\n */\nclass Consent {\n  /**\n   * @param {Object} sdk An instance of the SDK so the module can communicate with other modules\n   * @param {Object} request An instance of the request module tied to this module's audience.\n   * @param {string} baseUrl The base URL provided by the parent module\n   * @param {string} [organizationId] The organization ID to be used in tenant url requests\n   */\n  constructor(sdk, request, baseUrl, organizationId = null) {\n    this._baseUrl = baseUrl;\n    this._request = request;\n    this._sdk = sdk;\n    this._organizationId = organizationId;\n  }\n\n  /**\n   * Accepts a user's consent to an application\n   *\n   *\n   * API Endpoint: '/consents/:consentId/accept'\n   * Method: POST\n   *\n   * @param {string} consentId The ID of the consent form the user is accepting\n   *\n   * Note: Only valid for web users using auth0WebAuth session type\n   *\n   * @returns {Promise}\n   * @fulfill {ContxtUserConsentApproval}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.coordinator.consent\n   *   .accept('36b8421a-cc4a-4204-b839-1397374fb16b')\n   *   .then((userApproval) => console.log(userApproval))\n   *   .catch((err) => console.log(err));\n   */\n  accept(consentId) {\n    if (!consentId) {\n      return Promise.reject(\n        new Error('A consent ID is required for accepting consent')\n      );\n    }\n\n    return this._sdk.auth.getCurrentAccessToken().then((accessToken) => {\n      if (!accessToken) {\n        return Promise.reject(new Error('A valid JWT token is required'));\n      }\n\n      return this._request\n        .post(`${this._baseUrl}/consents/${consentId}/accept`, {\n          access_token: accessToken\n        })\n        .then((userApproval) => toCamelCase(userApproval));\n    });\n  }\n\n  /**\n   * Gets the current application version's consent forms. The current\n   * access_token will be used to derive which application is being consented to.\n   *\n   *\n   * API Endpoint: '/applications/consent'\n   * Method: POST\n   *\n   * Note: Only valid for web users using auth0WebAuth session type\n   *\n   * @returns {Promise}\n   * @fulfill {ContxtApplicationConsent}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.coordinator.consent\n   *   .getForCurrentApplication()\n   *   .then((applicationConsent) => console.log(applicationConsent))\n   *   .catch((err) => console.log(err));\n   */\n  getForCurrentApplication() {\n    return this._sdk.auth.getCurrentAccessToken().then((accessToken) => {\n      if (!accessToken) {\n        return Promise.reject(new Error('A valid JWT token is required'));\n      }\n\n      return this._request\n        .post(`${this._baseUrl}/applications/consent`, {\n          access_token: accessToken\n        })\n        .then((applicationConsent) => toCamelCase(applicationConsent));\n    });\n  }\n}\n\nexport default Consent;\n"]}