{"version":3,"sources":["coordinator/permissions.js"],"names":["toCamelCase","Permissions","sdk","request","baseUrl","organizationId","_baseUrl","_request","_sdk","_organizationId","get","then","userPermissions","Promise","reject","Error","userId"],"mappings":";;;;AAAA,SAASA,WAAT,QAA4B,kBAA5B;;AAEA;;;;;;;;;;AAUA;;;;;;IAKMC,W;AACJ;;;;;;AAMA,uBAAYC,GAAZ,EAAiBC,OAAjB,EAA0BC,OAA1B,EAA0D;AAAA,QAAvBC,cAAuB,uEAAN,IAAM;;AAAA;;AACxD,SAAKC,QAAL,GAAgBF,OAAhB;AACA,SAAKG,QAAL,GAAgBJ,OAAhB;AACA,SAAKK,IAAL,GAAYN,GAAZ;AACA,SAAKO,eAAL,GAAuBJ,cAAvB;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;;;2CAmBuBA,c,EAAgB;AACrC,UAAI,KAAKI,eAAT,EAA0B;AACxB,eAAO,KAAKF,QAAL,CACJG,GADI,CACG,KAAKJ,QADR,yBAEJK,IAFI,CAEC,UAACC,eAAD;AAAA,iBAAqBZ,YAAYY,eAAZ,CAArB;AAAA,SAFD,CAAP;AAGD;;AAED,UAAI,CAACP,cAAL,EAAqB;AACnB,eAAOQ,QAAQC,MAAR,CACL,IAAIC,KAAJ,CACE,kFADF,CADK,CAAP;AAKD;;AAED,aAAO,KAAKR,QAAL,CACJG,GADI,CACG,KAAKJ,QADR,uBACkCD,cADlC,yBAEJM,IAFI,CAEC,UAACC,eAAD;AAAA,eAAqBZ,YAAYY,eAAZ,CAArB;AAAA,OAFD,CAAP;AAGD;;AAED;;;;;;;;;;;;;;;;;;;;;;;2CAoBuBP,c,EAAgBW,M,EAAQ;AAC7C,UAAI,KAAKP,eAAT,EAA0B;AACxB,YAAI,CAACO,MAAL,EAAa;AACX,iBAAOH,QAAQC,MAAR,CACL,IAAIC,KAAJ,CACE,4EADF,CADK,CAAP;AAKD;;AAED,eAAO,KAAKR,QAAL,CACJG,GADI,CACG,KAAKJ,QADR,eAC0BU,MAD1B,mBAEJL,IAFI,CAEC,UAACC,eAAD;AAAA,iBAAqBZ,YAAYY,eAAZ,CAArB;AAAA,SAFD,CAAP;AAGD;;AAED,UAAI,CAACP,cAAL,EAAqB;AACnB,eAAOQ,QAAQC,MAAR,CACL,IAAIC,KAAJ,CACE,qFADF,CADK,CAAP;AAKD;;AAED,UAAI,CAACC,MAAL,EAAa;AACX,eAAOH,QAAQC,MAAR,CACL,IAAIC,KAAJ,CACE,4EADF,CADK,CAAP;AAKD;;AAED,aAAO,KAAKR,QAAL,CACJG,GADI,CAGD,KAAKJ,QAHJ,uBAIeD,cAJf,eAIuCW,MAJvC,mBAMJL,IANI,CAMC,UAACC,eAAD;AAAA,eAAqBZ,YAAYY,eAAZ,CAArB;AAAA,OAND,CAAP;AAOD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;gCAqBYI,M,EAAQ;AAClB,UAAI,CAACA,MAAL,EAAa;AACX,eAAOH,QAAQC,MAAR,CACL,IAAIC,KAAJ,CACE,8EADF,CADK,CAAP;AAKD;;AAED;AACA;AACA,aAAO,KAAKR,QAAL,CAAcG,GAAd,CAAqB,KAAKJ,QAA1B,eAA4CU,MAA5C,kBAAP;AACD;;;;;;AAGH,eAAef,WAAf","file":"permissions.js","sourcesContent":["import { toCamelCase } from '../utils/objects';\n\n/**\n * @typedef {Object} ContxtUserPermissions\n * @property {number[]} applicationsExplicit Application ids the user has directly been given access to\n * @property {number[]} applicationsImplicit Application ids the user has access to from a role or being the owner\n * @property {string[]} roles Role ids that the user belongs to\n * @property {number[]} stacksExplicit Stack ids the user has directly been given access to\n * @property {number[]} stacksImplicit Stack ids the user has access to from a role or being the owner\n * @property {string} userId\n */\n\n/**\n * Module that provides access to contxt user permissions\n *\n * @typicalname contxtSdk.coordinator.permissions\n */\nclass Permissions {\n  /**\n   * @param {Object} sdk An instance of the SDK so the module can communicate with other modules\n   * @param {Object} request An instance of the request module tied to this module's audience.\n   * @param {string} baseUrl The base URL provided by the parent module\n   * @param {string} [organizationId] The organization ID to be used in tenant url requests\n   */\n  constructor(sdk, request, baseUrl, organizationId = null) {\n    this._baseUrl = baseUrl;\n    this._request = request;\n    this._sdk = sdk;\n    this._organizationId = organizationId;\n  }\n\n  /**\n   * Gets a list of user permissions for each user in an organization\n   *\n   * Legacy API Endpoint: '/organizations/:organizationId/users/permissions'\n   * API Endpoint: '/users/permissions/'\n   * Method: GET\n   *\n   * @param {string} organizationId The ID of the organization, optional when using the tenant API and an organization ID has been set\n   *\n   * @returns {Promise}\n   * @fulfill {ContxtUserPermissions[]} A collection of user permissions\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.coordinator.permissions\n   *   .getAllByOrganizationId('36b8421a-cc4a-4204-b839-1397374fb16b')\n   *   .then((usersPermissions) => console.log(usersPermissions))\n   *   .catch((err) => console.log(err));\n   */\n  getAllByOrganizationId(organizationId) {\n    if (this._organizationId) {\n      return this._request\n        .get(`${this._baseUrl}/users/permissions`)\n        .then((userPermissions) => toCamelCase(userPermissions));\n    }\n\n    if (!organizationId) {\n      return Promise.reject(\n        new Error(\n          'An organization ID is required for getting users permissions for an organization'\n        )\n      );\n    }\n\n    return this._request\n      .get(`${this._baseUrl}/organizations/${organizationId}/users/permissions`)\n      .then((userPermissions) => toCamelCase(userPermissions));\n  }\n\n  /**\n   * Gets a single user's permissions within an organization\n   *\n   * Legacy API Endpoint: '/organizations/:organizationId/users/:userId/permissions'\n   * API Endpoint: '/users/:userId/permissions'\n   * Method: GET\n   *\n   * @param {string} organizationId The ID of the organization, optional when using the tenant API and an organization ID has been set\n   * @param {string} userId The ID of the user\n   *\n   * @returns {Promise}\n   * @fulfill {ContxtUserPermissions} A single user's permissions\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.coordinator.permissions\n   *   .getOneByOrganizationId('36b8421a-cc4a-4204-b839-1397374fb16b', 'auth0|12345')\n   *   .then((usersPermissions) => console.log(usersPermissions))\n   *   .catch((err) => console.log(err));\n   */\n  getOneByOrganizationId(organizationId, userId) {\n    if (this._organizationId) {\n      if (!userId) {\n        return Promise.reject(\n          new Error(\n            \"A user ID is required for getting a user's permissions for an organization\"\n          )\n        );\n      }\n\n      return this._request\n        .get(`${this._baseUrl}/users/${userId}/permissions`)\n        .then((userPermissions) => toCamelCase(userPermissions));\n    }\n\n    if (!organizationId) {\n      return Promise.reject(\n        new Error(\n          \"An organization ID is required for getting a user's permissions for an organization\"\n        )\n      );\n    }\n\n    if (!userId) {\n      return Promise.reject(\n        new Error(\n          \"A user ID is required for getting a user's permissions for an organization\"\n        )\n      );\n    }\n\n    return this._request\n      .get(\n        `${\n          this._baseUrl\n        }/organizations/${organizationId}/users/${userId}/permissions`\n      )\n      .then((userPermissions) => toCamelCase(userPermissions));\n  }\n\n  /**\n   * Gets a map of permission scopes to which the user has access\n   *\n   * API Endpoint: '/users/:userId/permissions'\n   * Method: GET\n   *\n   * @param {string} userId The ID of the user\n   *\n   * @returns {Promise}\n   * @fulfill {Object.<string, string[]>} A map of user permissions where the\n   *   key corresponds to a service ID (i.e. the ID generated by Auth0) and the\n   *   value is an array of permission scopes that are managed by Contxt (e.g.\n   *   `read:facilities` and `write:facilities`)\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.coordinator.permissions\n   *   .getByUserId('auth0|12345')\n   *   .then((permissionsMap) => console.log(permissionsMap))\n   *   .catch((err) => console.log(err));\n   */\n  getByUserId(userId) {\n    if (!userId) {\n      return Promise.reject(\n        new Error(\n          \"A user ID is required for getting information about a user's permissions map\"\n        )\n      );\n    }\n\n    // NOTE: This response is not run through the `toCamelCase` method because\n    // it could errantly remove underscores from service IDs.\n    return this._request.get(`${this._baseUrl}/users/${userId}/permissions`);\n  }\n}\n\nexport default Permissions;\n"]}