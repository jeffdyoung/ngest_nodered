{"version":3,"sources":["coordinator/organizations.js"],"names":["toCamelCase","Organizations","sdk","request","baseUrl","organizationId","_baseUrl","_request","_sdk","_organizationId","get","then","org","Promise","reject","Error","orgs","map"],"mappings":";;;;AAAA,SAASA,WAAT,QAA4B,kBAA5B;;AAEA;;;;;;;;;AASA;;;;;;IAKMC,a;AACJ;;;;;;AAMA,yBAAYC,GAAZ,EAAiBC,OAAjB,EAA0BC,OAA1B,EAA0D;AAAA,QAAvBC,cAAuB,uEAAN,IAAM;;AAAA;;AACxD,SAAKC,QAAL,GAAgBF,OAAhB;AACA,SAAKG,QAAL,GAAgBJ,OAAhB;AACA,SAAKK,IAAL,GAAYN,GAAZ;AACA,SAAKO,eAAL,GAAuBJ,cAAvB;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;;;wBAmBIA,c,EAAgB;AAClB,UAAI,KAAKI,eAAT,EAA0B;AACxB,eAAO,KAAKF,QAAL,CACJG,GADI,MACG,KAAKJ,QADR,EAEJK,IAFI,CAEC,UAACC,GAAD;AAAA,iBAASZ,YAAYY,GAAZ,CAAT;AAAA,SAFD,CAAP;AAGD;;AAED,UAAI,CAACP,cAAL,EAAqB;AACnB,eAAOQ,QAAQC,MAAR,CACL,IAAIC,KAAJ,CACE,8EADF,CADK,CAAP;AAKD;;AAED,aAAO,KAAKR,QAAL,CACJG,GADI,CACG,KAAKJ,QADR,uBACkCD,cADlC,EAEJM,IAFI,CAEC,UAACC,GAAD;AAAA,eAASZ,YAAYY,GAAZ,CAAT;AAAA,OAFD,CAAP;AAGD;;AAED;;;;;;;;;;;;;;;;;;;6BAgBS;AACP,aAAO,KAAKL,QAAL,CACJG,GADI,CACG,KAAKJ,QADR,qBAEJK,IAFI,CAEC,UAACK,IAAD;AAAA,eAAUA,KAAKC,GAAL,CAAS,UAACL,GAAD;AAAA,iBAASZ,YAAYY,GAAZ,CAAT;AAAA,SAAT,CAAV;AAAA,OAFD,CAAP;AAGD;;;;;;AAGH,eAAeX,aAAf","file":"organizations.js","sourcesContent":["import { toCamelCase } from '../utils/objects';\n\n/**\n * @typedef {Object} ContxtOrganization\n * @property {string} createdAt ISO 8601 Extended Format date/time string\n * @property {string} id UUID formatted ID\n * @property {number} legacyOrganizationId\n * @property {string} name\n * @property {string} updatedAt ISO 8601 Extended Format date/time string\n */\n\n/**\n * Module that provides access to contxt organizations\n *\n * @typicalname contxtSdk.coordinator.organizations\n */\nclass Organizations {\n  /**\n   * @param {Object} sdk An instance of the SDK so the module can communicate with other modules\n   * @param {Object} request An instance of the request module tied to this module's audience.\n   * @param {string} baseUrl The base URL provided by the parent module\n   * @param {string} [organizationId] The organization ID to be used in tenant url requests\n   */\n  constructor(sdk, request, baseUrl, organizationId = null) {\n    this._baseUrl = baseUrl;\n    this._request = request;\n    this._sdk = sdk;\n    this._organizationId = organizationId;\n  }\n\n  /**\n   * Gets information about a contxt organization\n   *\n   * Legacy API Endpoint: '/organizations/:organizationId'\n   * API Endpoint: '/'\n   * Method: GET\n   *\n   * @param {string} organizationId The ID of the organization, optional when using the tenant API and an organization ID has been set\n   *\n   * @returns {Promise}\n   * @fulfill {ContxtOrganization} Information about a contxt organization\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.coordinator.organizations\n   *   .get('36b8421a-cc4a-4204-b839-1397374fb16b')\n   *   .then((org) => console.log(org))\n   *   .catch((err) => console.log(err));\n   */\n  get(organizationId) {\n    if (this._organizationId) {\n      return this._request\n        .get(`${this._baseUrl}`)\n        .then((org) => toCamelCase(org));\n    }\n\n    if (!organizationId) {\n      return Promise.reject(\n        new Error(\n          'An organization ID is required for getting information about an organization'\n        )\n      );\n    }\n\n    return this._request\n      .get(`${this._baseUrl}/organizations/${organizationId}`)\n      .then((org) => toCamelCase(org));\n  }\n\n  /**\n   * Gets information about all contxt organizations\n   *\n   * API Endpoint: '/organizations'\n   * Method: GET\n   *\n   * @returns {Promise}\n   * @fulfill {ContxtOrganization[]} Information about all contxt organizations\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.coordinator.organizations\n   *   .getAll()\n   *   .then((orgs) => console.log(orgs))\n   *   .catch((err) => console.log(err));\n   */\n  getAll() {\n    return this._request\n      .get(`${this._baseUrl}/organizations`)\n      .then((orgs) => orgs.map((org) => toCamelCase(org)));\n  }\n}\n\nexport default Organizations;\n"]}