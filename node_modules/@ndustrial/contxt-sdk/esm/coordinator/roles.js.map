{"version":3,"sources":["coordinator/roles.js"],"names":["toSnakeCase","toCamelCase","Roles","sdk","request","baseUrl","organizationId","_baseUrl","_request","_sdk","_organizationId","roleId","applicationId","Promise","reject","Error","post","then","response","stackId","accessType","indexOf","access_type","role","name","description","delete","get","roles"],"mappings":";;;;AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,kBAAzC;;AAEA;;;;;;;;;;;AAWA;;;;;;;;;AASA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;AAiBA;;;;;;IAKMC,K;AACJ;;;;;;AAMA,iBAAYC,GAAZ,EAAiBC,OAAjB,EAA0BC,OAA1B,EAA0D;AAAA,QAAvBC,cAAuB,uEAAN,IAAM;;AAAA;;AACxD,SAAKC,QAAL,GAAgBF,OAAhB;AACA,SAAKG,QAAL,GAAgBJ,OAAhB;AACA,SAAKK,IAAL,GAAYN,GAAZ;AACA,SAAKO,eAAL,GAAuBJ,cAAvB;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;;;mCAmBeK,M,EAAQC,a,EAAe;AACpC,UAAI,CAACD,MAAL,EAAa;AACX,eAAOE,QAAQC,MAAR,CACL,IAAIC,KAAJ,CAAU,2DAAV,CADK,CAAP;AAGD;;AAED,UAAI,CAACH,aAAL,EAAoB;AAClB,eAAOC,QAAQC,MAAR,CACL,IAAIC,KAAJ,CACE,mEADF,CADK,CAAP;AAKD;;AAED,aAAO,KAAKP,QAAL,CACJQ,IADI,CACI,KAAKT,QADT,sBACkCK,aADlC,eACyDD,MADzD,EAEJM,IAFI,CAEC,UAACC,QAAD;AAAA,eAAcjB,YAAYiB,QAAZ,CAAd;AAAA,OAFD,CAAP;AAGD;;AAED;;;;;;;;;;;;;;;;;;;;;;;6BAoBSP,M,EAAQQ,O,EAASC,U,EAAY;AACpC,UAAI,CAACT,MAAL,EAAa;AACX,eAAOE,QAAQC,MAAR,CACL,IAAIC,KAAJ,CAAU,oDAAV,CADK,CAAP;AAGD;;AAED,UAAI,CAACI,OAAL,EAAc;AACZ,eAAON,QAAQC,MAAR,CACL,IAAIC,KAAJ,CAAU,qDAAV,CADK,CAAP;AAGD;;AAED,UAAI,CAAC,QAAD,EAAW,cAAX,EAA2B,OAA3B,EAAoCM,OAApC,CAA4CD,UAA5C,MAA4D,CAAC,CAAjE,EAAoE;AAClE,eAAOP,QAAQC,MAAR,CACL,IAAIC,KAAJ,CACE,iGADF,CADK,CAAP;AAKD;;AAED,aAAO,KAAKP,QAAL,CACJQ,IADI,CACI,KAAKT,QADT,gBAC4BY,OAD5B,eAC6CR,MAD7C,EACuD;AAC1DW,qBAAaF;AAD6C,OADvD,EAIJH,IAJI,CAIC,UAACC,QAAD;AAAA,eAAcjB,YAAYiB,QAAZ,CAAd;AAAA,OAJD,CAAP;AAKD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;2BAqBOZ,c,EAA2B;AAAA,UAAXiB,IAAW,uEAAJ,EAAI;;AAChC,UAAI,KAAKb,eAAT,EAA0B;AACxB,YAAI,CAACa,KAAKC,IAAV,EAAgB;AACd,iBAAOX,QAAQC,MAAR,CACL,IAAIC,KAAJ,4CADK,CAAP;AAGD;;AAED,YAAI,CAACQ,KAAKE,WAAV,EAAuB;AACrB,iBAAOZ,QAAQC,MAAR,CACL,IAAIC,KAAJ,mDADK,CAAP;AAGD;;AAED,eAAO,KAAKP,QAAL,CACJQ,IADI,CACI,KAAKT,QADT,aAC2BP,YAAYuB,IAAZ,CAD3B,EAEJN,IAFI,CAEC,UAACC,QAAD;AAAA,iBAAcjB,YAAYiB,QAAZ,CAAd;AAAA,SAFD,CAAP;AAGD;;AAED,UAAI,CAACZ,cAAL,EAAqB;AACnB,eAAOO,QAAQC,MAAR,CACL,IAAIC,KAAJ,CACE,uEADF,CADK,CAAP;AAKD;;AAED,UAAI,CAACQ,KAAKC,IAAV,EAAgB;AACd,eAAOX,QAAQC,MAAR,CACL,IAAIC,KAAJ,4CADK,CAAP;AAGD;;AAED,UAAI,CAACQ,KAAKE,WAAV,EAAuB;AACrB,eAAOZ,QAAQC,MAAR,CACL,IAAIC,KAAJ,mDADK,CAAP;AAGD;;AAED,aAAO,KAAKP,QAAL,CACJQ,IADI,CAEA,KAAKT,QAFL,uBAE+BD,cAF/B,aAGHN,YAAYuB,IAAZ,CAHG,EAKJN,IALI,CAKC,UAACC,QAAD;AAAA,eAAcjB,YAAYiB,QAAZ,CAAd;AAAA,OALD,CAAP;AAMD;;AAED;;;;;;;;;;;;;;;;;;;;4BAiBOZ,c,EAAgBK,M,EAAQ;AAC7B,UAAI,KAAKD,eAAT,EAA0B;AACxB,YAAI,CAACC,MAAL,EAAa;AACX,iBAAOE,QAAQC,MAAR,CACL,IAAIC,KAAJ,CAAU,2CAAV,CADK,CAAP;AAGD;;AAED,eAAO,KAAKP,QAAL,CAAckB,MAAd,CAAwB,KAAKnB,QAA7B,eAA+CI,MAA/C,CAAP;AACD;;AAED,UAAI,CAACL,cAAL,EAAqB;AACnB,eAAOO,QAAQC,MAAR,CACL,IAAIC,KAAJ,CAAU,oDAAV,CADK,CAAP;AAGD;;AAED,UAAI,CAACJ,MAAL,EAAa;AACX,eAAOE,QAAQC,MAAR,CACL,IAAIC,KAAJ,CAAU,2CAAV,CADK,CAAP;AAGD;;AAED,aAAO,KAAKP,QAAL,CAAckB,MAAd,CACF,KAAKnB,QADH,uBAC6BD,cAD7B,eACqDK,MADrD,CAAP;AAGD;;AAED;;;;;;;;;;;;;;;;;;;;;;wCAmBoBL,c,EAAgB;AAClC,UAAI,KAAKI,eAAT,EAA0B;AACxB,eAAO,KAAKF,QAAL,CACJmB,GADI,CACG,KAAKpB,QADR,aAEJU,IAFI,CAEC,UAACW,KAAD;AAAA,iBAAW3B,YAAY2B,KAAZ,CAAX;AAAA,SAFD,CAAP;AAGD;;AAED,UAAI,CAACtB,cAAL,EAAqB;AACnB,eAAOO,QAAQC,MAAR,CACL,IAAIC,KAAJ,CACE,sEADF,CADK,CAAP;AAKD;;AAED,aAAO,KAAKP,QAAL,CACJmB,GADI,CACG,KAAKpB,QADR,uBACkCD,cADlC,aAEJW,IAFI,CAEC,UAACW,KAAD;AAAA,eAAW3B,YAAY2B,KAAZ,CAAX;AAAA,OAFD,CAAP;AAGD;;AAED;;;;;;;;;;;;;;;;;;;;;sCAkBkBjB,M,EAAQC,a,EAAe;AACvC,UAAI,CAACD,MAAL,EAAa;AACX,eAAOE,QAAQC,MAAR,CACL,IAAIC,KAAJ,CACE,+DADF,CADK,CAAP;AAKD;;AAED,UAAI,CAACH,aAAL,EAAoB;AAClB,eAAOC,QAAQC,MAAR,CACL,IAAIC,KAAJ,CACE,uEADF,CADK,CAAP;AAKD;;AAED,aAAO,KAAKP,QAAL,CAAckB,MAAd,CACF,KAAKnB,QADH,sBAC4BK,aAD5B,eACmDD,MADnD,CAAP;AAGD;;AAED;;;;;;;;;;;;;;;;;;;;;gCAkBYA,M,EAAQQ,O,EAAS;AAC3B,UAAI,CAACR,MAAL,EAAa;AACX,eAAOE,QAAQC,MAAR,CACL,IAAIC,KAAJ,CAAU,wDAAV,CADK,CAAP;AAGD;;AAED,UAAI,CAACI,OAAL,EAAc;AACZ,eAAON,QAAQC,MAAR,CACL,IAAIC,KAAJ,CAAU,yDAAV,CADK,CAAP;AAGD;;AAED,aAAO,KAAKP,QAAL,CAAckB,MAAd,CACF,KAAKnB,QADH,gBACsBY,OADtB,eACuCR,MADvC,CAAP;AAGD;;;;;;AAGH,eAAeT,KAAf","file":"roles.js","sourcesContent":["import { toSnakeCase, toCamelCase } from '../utils/objects';\n\n/**\n * @typedef {Object} ContxtRole\n * @property {ContxtApplication[]} applications\n * @property {string} createdAt ISO 8601 Extended Format date/time string\n * @property {string} description\n * @property {string} id\n * @property {string} name\n * @property {string} organizationId\n * @property {ContxtStack[]} stacks\n * @property {string} updatedAt ISO 8601 Extended Format date/time string\n */\n/**\n * @typedef {Object} ContxtRoleApplication\n * @property {number} applicationId\n * @property {string} createdAt ISO 8601 Extended Format date/time string\n * @property {number} id\n * @property {string} roleId\n * @property {string} updatedAt ISO 8601 Extended Format date/time string\n */\n\n/**\n * @typedef {Object} ContxtRoleStack\n * @property {string} accessType Access Type of the user for this stack with options \"reader\", \"collaborator\", \"owner\"\n * @property {string} createdAt ISO 8601 Extended Format date/time string\n * @property {number} id\n * @property {string} userId\n * @property {number} stackId\n * @property {string} updatedAt ISO 8601 Extended Format date/time string\n */\n\n/**\n * @typedef {Object} ContxtStack\n * @property {string} clientId\n * @property {string} clusterId\n * @property {string} createdAt ISO 8601 Extended Format date/time string\n * @property {string} currentVersionId\n * @property {string} description\n * @property {string} documentationUrl\n * @property {string} icon\n * @property {number} id\n * @property {string} name\n * @property {string} organizationId\n * @property {string} ownerId\n * @property {string} type\n * @property {string} updatedAt ISO 8601 Extended Format date/time string\n */\n\n/**\n * Module that provides access to contxt roles\n *\n * @typicalname contxtSdk.coordinator.roles\n */\nclass Roles {\n  /**\n   * @param {Object} sdk An instance of the SDK so the module can communicate with other modules\n   * @param {Object} request An instance of the request module tied to this module's audience.\n   * @param {string} baseUrl The base URL provided by the parent module\n   * @param {string} [organizationId] The organization ID to be used in tenant url requests\n   */\n  constructor(sdk, request, baseUrl, organizationId = null) {\n    this._baseUrl = baseUrl;\n    this._request = request;\n    this._sdk = sdk;\n    this._organizationId = organizationId;\n  }\n\n  /**\n   * Add an application to a role\n   *\n   * API Endpoint: '/applications/:applications_id/roles/:roleId'\n   * Method: POST\n   *\n   * @param {string} roleId The UUID formatted ID of the role\n   * @param {number} applicationId The ID of the application\n   *\n   * @returns {Promise}\n   * @fulfill {ContxtRoleApplication}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.roles\n   *   .addApplication('36b8421a-cc4a-4204-b839-1397374fb16b', 42)\n   *   .then((roleApplication) => console.log(roleApplication))\n   *   .catch((err) => console.log(err));\n   */\n  addApplication(roleId, applicationId) {\n    if (!roleId) {\n      return Promise.reject(\n        new Error('A roleId is required for adding an application to a role.')\n      );\n    }\n\n    if (!applicationId) {\n      return Promise.reject(\n        new Error(\n          'An applicationId is required for adding an application to a role.'\n        )\n      );\n    }\n\n    return this._request\n      .post(`${this._baseUrl}/applications/${applicationId}/roles/${roleId}`)\n      .then((response) => toCamelCase(response));\n  }\n\n  /**\n   * Add a stack to a role\n   *\n   * API Endpoint: '/applications/:applications_id/stacks/:stackId'\n   * Method: POST\n   *\n   * @param {string} roleId The UUID formatted ID of the role\n   * @param {number} stackId The ID of the stack\n   * @param {'reader' | 'collaborator' | 'owner'} accessType The level of access for the role\n   *\n   * @returns {Promise}\n   * @fulfill {ContxtRoleStack}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.roles\n   *   .addStack('36b8421a-cc4a-4204-b839-1397374fb16b', 42, 'collaborator')\n   *   .then((roleStack) => console.log(roleStack))\n   *   .catch((err) => console.log(err));\n   */\n  addStack(roleId, stackId, accessType) {\n    if (!roleId) {\n      return Promise.reject(\n        new Error('A roleId is required for adding a stack to a role.')\n      );\n    }\n\n    if (!stackId) {\n      return Promise.reject(\n        new Error('A stackId is required for adding a stack to a role.')\n      );\n    }\n\n    if (['reader', 'collaborator', 'owner'].indexOf(accessType) === -1) {\n      return Promise.reject(\n        new Error(\n          'An accessType of \"reader\", \"collaborator\", or \"owner\" is required for adding a stack to a role.'\n        )\n      );\n    }\n\n    return this._request\n      .post(`${this._baseUrl}/stacks/${stackId}/roles/${roleId}`, {\n        access_type: accessType\n      })\n      .then((response) => toCamelCase(response));\n  }\n\n  /**\n   * Create a new role for an organization\n   *\n   * @param {string} organizationId The ID of the organization, optional when using the tenant API and an organization ID has been set\n   * @param {Object} role\n   * @param {string} role.name The name of the new role\n   * @param {string} role.description Some text describing the purpose of the role\n   *\n   * @returns {Promise}\n   * @fulfill {ContxtRole} The newly created role\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.coordinator.roles\n   *   .create('36b8421a-cc4a-4204-b839-1397374fb16b', {\n   *     name: 'view-myapp',\n   *     description: 'Give this role for viewing myapp'\n   *    })\n   *   .then((role) => console.log(role))\n   *   .catch((err) => console.log(err));\n   */\n  create(organizationId, role = {}) {\n    if (this._organizationId) {\n      if (!role.name) {\n        return Promise.reject(\n          new Error(`A name is required to create a new role.`)\n        );\n      }\n\n      if (!role.description) {\n        return Promise.reject(\n          new Error(`A description is required to create a new role.`)\n        );\n      }\n\n      return this._request\n        .post(`${this._baseUrl}/roles`, toSnakeCase(role))\n        .then((response) => toCamelCase(response));\n    }\n\n    if (!organizationId) {\n      return Promise.reject(\n        new Error(\n          'An organizationId is required for creating roles for an organization.'\n        )\n      );\n    }\n\n    if (!role.name) {\n      return Promise.reject(\n        new Error(`A name is required to create a new role.`)\n      );\n    }\n\n    if (!role.description) {\n      return Promise.reject(\n        new Error(`A description is required to create a new role.`)\n      );\n    }\n\n    return this._request\n      .post(\n        `${this._baseUrl}/organizations/${organizationId}/roles`,\n        toSnakeCase(role)\n      )\n      .then((response) => toCamelCase(response));\n  }\n\n  /**\n   * Deletes a role from an organization\n   *\n   * Legacy API Endpoint: '/organizations/:organizationId/roles/:roleId'\n   * API Endpiont: '/roles/:roleId'\n   * Method: DELETE\n   *\n   * @param {string} organizationId The ID of the organization, optional when using the tenant API and an organization ID has been set\n   * @param {string} roleId The UUID formatted ID of the role\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.roles.delete('4f0e51c6-728b-4892-9863-6d002e61204d', '8b64fb12-e649-46be-b330-e672d28eed99s');\n   */\n  delete(organizationId, roleId) {\n    if (this._organizationId) {\n      if (!roleId) {\n        return Promise.reject(\n          new Error('A roleId is required for deleting a role.')\n        );\n      }\n\n      return this._request.delete(`${this._baseUrl}/roles/${roleId}`);\n    }\n\n    if (!organizationId) {\n      return Promise.reject(\n        new Error('An organizationId is required for deleting a role.')\n      );\n    }\n\n    if (!roleId) {\n      return Promise.reject(\n        new Error('A roleId is required for deleting a role.')\n      );\n    }\n\n    return this._request.delete(\n      `${this._baseUrl}/organizations/${organizationId}/roles/${roleId}`\n    );\n  }\n\n  /**\n   * Gets an organization's list of roles\n   *\n   * Legacy API Endpoint: '/organizations/:organizationId/roles'\n   * API Endpoint: '/roles'\n   * Method: GET\n   *\n   * @param {string} organizationId The ID of the organization, optional when using the tenant API and an organization ID has been set\n   *\n   * @returns {Promise}\n   * @fulfill {ContxtRole[]} A list of roles\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.coordinator.roles\n   *   .getByOrganizationId('36b8421a-cc4a-4204-b839-1397374fb16b')\n   *   .then((roles) => console.log(roles))\n   *   .catch((err) => console.log(err));\n   */\n  getByOrganizationId(organizationId) {\n    if (this._organizationId) {\n      return this._request\n        .get(`${this._baseUrl}/roles`)\n        .then((roles) => toCamelCase(roles));\n    }\n\n    if (!organizationId) {\n      return Promise.reject(\n        new Error(\n          'An organizationId is required for getting roles for an organization.'\n        )\n      );\n    }\n\n    return this._request\n      .get(`${this._baseUrl}/organizations/${organizationId}/roles`)\n      .then((roles) => toCamelCase(roles));\n  }\n\n  /**\n   * Remove an application from a role\n   *\n   * API Endpoint: '/applications/:applications_id/roles/:roleId'\n   * Method: DELETE\n   *\n   * @param {string} roleId The UUID formatted ID of the role\n   * @param {number} applicationId The ID of the application\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.roles\n   *   .removeApplication('36b8421a-cc4a-4204-b839-1397374fb16b', 42)\n   *   .catch((err) => console.log(err));\n   */\n  removeApplication(roleId, applicationId) {\n    if (!roleId) {\n      return Promise.reject(\n        new Error(\n          'A roleId is required for removing an application from a role.'\n        )\n      );\n    }\n\n    if (!applicationId) {\n      return Promise.reject(\n        new Error(\n          'An applicationId is required for removing an application from a role.'\n        )\n      );\n    }\n\n    return this._request.delete(\n      `${this._baseUrl}/applications/${applicationId}/roles/${roleId}`\n    );\n  }\n\n  /**\n   * Remove an stack from a role\n   *\n   * API Endpoint: '/stacks/:stacks_id/roles/:roleId'\n   * Method: DELETE\n   *\n   * @param {string} roleId The UUID formatted ID of the role\n   * @param {number} stackId The ID of the stack\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.roles\n   *   .removeStack('36b8421a-cc4a-4204-b839-1397374fb16b', 42)\n   *   .catch((err) => console.log(err));\n   */\n  removeStack(roleId, stackId) {\n    if (!roleId) {\n      return Promise.reject(\n        new Error('A roleId is required for removing a stack from a role.')\n      );\n    }\n\n    if (!stackId) {\n      return Promise.reject(\n        new Error('A stackId is required for removing a stack from a role.')\n      );\n    }\n\n    return this._request.delete(\n      `${this._baseUrl}/stacks/${stackId}/roles/${roleId}`\n    );\n  }\n}\n\nexport default Roles;\n"]}