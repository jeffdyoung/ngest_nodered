{"version":3,"sources":["bus/index.js"],"names":["WebSocket","Channels","WebSocketConnection","Bus","sdk","request","baseUrl","config","audiences","bus","host","baseWebSocketUrl","webSocket","_baseWebSocketUrl","_baseUrl","_request","_sdk","_webSockets","channels","organizationId","Promise","resolve","reject","auth","getCurrentApiToken","then","apiToken","ws","headers","Authorization","onopen","event","onclose","onerror","errorEvent","catch","err"],"mappings":";;;;AAAA,OAAOA,SAAP,MAAsB,IAAtB;;AAEA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;AASA;;;;;;;;IAOMC,G;AACJ;;;;AAIA,eAAYC,GAAZ,EAAiBC,OAAjB,EAA0B;AAAA;;AACxB,QAAMC,eAAaF,IAAIG,MAAJ,CAAWC,SAAX,CAAqBC,GAArB,CAAyBC,IAA5C;AACA,QAAMC,wBAAsBP,IAAIG,MAAJ,CAAWC,SAAX,CAAqBC,GAArB,CAAyBG,SAArD;;AAEA,SAAKC,iBAAL,GAAyBF,gBAAzB;AACA,SAAKG,QAAL,GAAgBR,OAAhB;AACA,SAAKS,QAAL,GAAgBV,OAAhB;AACA,SAAKW,IAAL,GAAYZ,GAAZ;AACA,SAAKa,WAAL,GAAmB,EAAnB;;AAEA,SAAKC,QAAL,GAAgB,IAAIjB,QAAJ,CAAaG,GAAb,EAAkBC,OAAlB,EAA2BC,OAA3B,CAAhB;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;;;4BAmBQa,c,EAAgB;AAAA;;AACtB,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAI,MAAKL,WAAL,CAAiBE,cAAjB,CAAJ,EAAsC;AACpC,iBAAOE,QAAQ,MAAKJ,WAAL,CAAiBE,cAAjB,CAAR,CAAP;AACD;;AAED,eAAO,MAAKH,IAAL,CAAUO,IAAV,CACJC,kBADI,CACe,YADf,EAEJC,IAFI,CAEC,UAACC,QAAD,EAAc;AAClB,cAAMC,KAAK,IAAI3B,SAAJ,CACN,MAAKa,iBADC,uBACkCM,cADlC,cAET,EAFS,EAGT;AACES,qBAAS;AACPC,yCAAyBH;AADlB;AADX,WAHS,CAAX;;AAUAC,aAAGG,MAAH,GAAY,UAACC,KAAD,EAAW;AACrB,kBAAKd,WAAL,CAAiBE,cAAjB,IAAmC,IAAIjB,mBAAJ,CACjCyB,EADiC,EAEjCR,cAFiC,CAAnC;;AAKAE,oBAAQ,MAAKJ,WAAL,CAAiBE,cAAjB,CAAR;AACD,WAPD;;AASAQ,aAAGK,OAAH,GAAa,UAACD,KAAD,EAAW;AACtB,kBAAKd,WAAL,CAAiBE,cAAjB,IAAmC,IAAnC;AACD,WAFD;;AAIAQ,aAAGM,OAAH,GAAa,UAACC,UAAD,EAAgB;AAC3BZ,mBAAOY,UAAP;AACD,WAFD;AAGD,SA7BI,EA8BJC,KA9BI,CA8BE,UAACC,GAAD,EAAS;AACdd,iBAAOc,GAAP;AACD,SAhCI,CAAP;AAiCD,OAtCM,CAAP;AAuCD;;AAED;;;;;;;;;;;;;;2CAWuBjB,c,EAAgB;AACrC,aAAO,KAAKF,WAAL,CAAiBE,cAAjB,CAAP;AACD;;;;;;AAGH,eAAehB,GAAf","file":"index.js","sourcesContent":["import WebSocket from 'ws';\n\nimport Channels from './channels';\nimport WebSocketConnection from './webSocketConnection';\n\n/**\n * The raw WebSocket created by ws\n *\n * @typedef {Object} WebSocket\n * @property {function} addEventListener Register an event listener emulating the EventTarget interface\n * @property {string} binaryType A string indicating the type of binary data being transmitted by the connection. This should be one of \"nodebuffer\", \"arraybuffer\" or \"fragments\". Defaults to \"nodebuffer\".\n * @property {number} bufferedAmount The number of bytes of data that have been queued using calls to send() but not yet transmitted to the network.\n * @property {function} close Initiate a closing handshake\n * @property {Object} extensions An object containing the negotiated extensions\n * @property {function} onclose An event listener to be called when connection is closed\n * @property {function} onerror An event listener to be called when an error occurs\n * @property {function} onmessage An event listener to be called when a message is received from the server\n * @property {function} onopen An event listener to be called when the connection is established\n * @property {function} ping Send a ping to the WebSocket server\n * @property {function} pong Send a pong to the WebSocket server\n * @property {string} protocol The subprotocol selected by the server\n * @property {number} readyState The current state of the connection\n * @property {function} removeEventListener Removes an event listener emulating the EventTarget interface\n * @property {function} send Send data through the open WebSocket connection\n * @property {function} terminate Forcibly close the connection\n * @property {string} url The URL of the WebSocket server\n */\n\n/**\n * A wrapper around the raw WebSocket to provide a finite set of operations\n *\n * @typedef {Object} WebSocketConnection\n * @property {function} close Closes the WebSocket connection to the message bus server\n * @property {string} _organizationId The organization id for the open WebSocket connection\n * @property {WebSocket} _webSocket The raw WebSocket connection to the message bus\n */\n\n/**\n * Module that provides access to the message bus. This is for Node\n * environments. Documentation for browser environments is found under\n * `BrowserBus`.\n *\n * @typicalname contxtSdk.bus\n */\nclass Bus {\n  /**\n   * @param {Object} sdk An instance of the SDK so the module can communicate with other modules\n   * @param {Object} request An instance of the request module tied to this module's audience.\n   */\n  constructor(sdk, request) {\n    const baseUrl = `${sdk.config.audiences.bus.host}`;\n    const baseWebSocketUrl = `${sdk.config.audiences.bus.webSocket}`;\n\n    this._baseWebSocketUrl = baseWebSocketUrl;\n    this._baseUrl = baseUrl;\n    this._request = request;\n    this._sdk = sdk;\n    this._webSockets = {};\n\n    this.channels = new Channels(sdk, request, baseUrl);\n  }\n\n  /**\n   * Connects to the message bus via websocket.\n   * If a connection already exists for that organization id, the connection is returned, otherwise a new connection is created and returned.\n   *\n   * @param {string} organizationId UUID corresponding with an organization\n   *\n   * @returns {Promise}\n   * @fulfill {WebSocketConnection}\n   * @reject {errorEvent} The error event\n   *\n   * @example\n   * contxtSdk.bus.connect('4f0e51c6-728b-4892-9863-6d002e61204d')\n   *   .then((webSocket) => {\n   *     console.log(webSocket);\n   *   })\n   *   .catch((errorEvent) => {\n   *     console.log(errorEvent);\n   *   });\n   */\n  connect(organizationId) {\n    return new Promise((resolve, reject) => {\n      if (this._webSockets[organizationId]) {\n        return resolve(this._webSockets[organizationId]);\n      }\n\n      return this._sdk.auth\n        .getCurrentApiToken('contxtAuth')\n        .then((apiToken) => {\n          const ws = new WebSocket(\n            `${this._baseWebSocketUrl}/organizations/${organizationId}/stream`,\n            [],\n            {\n              headers: {\n                Authorization: `Bearer ${apiToken}`\n              }\n            }\n          );\n\n          ws.onopen = (event) => {\n            this._webSockets[organizationId] = new WebSocketConnection(\n              ws,\n              organizationId\n            );\n\n            resolve(this._webSockets[organizationId]);\n          };\n\n          ws.onclose = (event) => {\n            this._webSockets[organizationId] = null;\n          };\n\n          ws.onerror = (errorEvent) => {\n            reject(errorEvent);\n          };\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n\n  /**\n   * Gets the WebSocketConnection for an organization id\n   * If a connection already exists for that organization id, the connection is returned, otherwise returns undefined.\n   *\n   * @param {string} organizationId UUID corresponding with an organization\n   *\n   * @returns {WebSocketConnection}\n   *\n   * @example\n   * const messageBusWebSocket = contxtSdk.bus.getWebSocketConnection('4f0e51c6-728b-4892-9863-6d002e61204d');\n   */\n  getWebSocketConnection(organizationId) {\n    return this._webSockets[organizationId];\n  }\n}\n\nexport default Bus;\n"]}