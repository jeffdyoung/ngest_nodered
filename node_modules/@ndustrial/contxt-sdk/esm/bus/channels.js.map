{"version":3,"sources":["bus/channels.js"],"names":["isPlainObject","toCamelCase","toSnakeCase","Channels","sdk","request","baseUrl","_baseUrl","_request","_sdk","channel","requiredFields","i","length","field","Promise","reject","Error","post","organizationId","serviceId","then","response","channelId","errorMsg","delete","get","update","put"],"mappings":"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","file":"channels.js","sourcesContent":["import isPlainObject from 'lodash.isplainobject';\nimport { toCamelCase, toSnakeCase } from '../utils/objects';\n\n/**\n * @typedef {Object} MessageBusChannel\n * @property {string} id UUID formatted ID\n * @property {string} name\n * @property {string} organizationId UUID of the organization to which the channel belongs\n * @property {string} serviceId\n */\n\n/**\n * Module that provides access to message bus channels\n *\n * @typicalname contxtSdk.bus.channels\n */\nclass Channels {\n  /**\n   * @param {Object} sdk An instance of the SDK so the module can communicate with other modules\n   * @param {Object} request An instance of the request module tied to this module's audience.\n   * @param {string} baseUrl The base URL provided by the parent module\n   */\n  constructor(sdk, request, baseUrl) {\n    this._baseUrl = baseUrl;\n    this._request = request;\n    this._sdk = sdk;\n  }\n\n  /**\n   * Creates a new message bus channel\n   *\n   * API Endpoint: '/organizations/:organizationId/services/:serviceId/channels'\n   * Method: POST\n   *\n   * @param {Object} channel\n   * @param {string} channel.name\n   * @param {string} channel.organizationId UUID corresponding with an organization\n   * @param {string} channel.serviceId ID of a service\n   *\n   * @returns {Promise}\n   * @fulfill {MessageBusChannel} Information about the new channel\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.bus.channels\n   *   .create({\n   *     name: 'Channel 46',\n   *     organizationId: '28cc036c-d87f-4f06-bd30-1e78c2701064',\n   *     serviceId: 'abc123service'\n   *   })\n   *   .then((channel) => console.log(channel))\n   *   .catch((err) => console.log(err));\n   */\n  create(channel = {}) {\n    const requiredFields = ['name', 'organizationId', 'serviceId'];\n\n    for (let i = 0; requiredFields.length > i; i++) {\n      const field = requiredFields[i];\n\n      if (!channel[field]) {\n        return Promise.reject(\n          new Error(\n            `A ${field} is required to create a new message bus channel.`\n          )\n        );\n      }\n    }\n\n    return this._request\n      .post(\n        `${this._baseUrl}/organizations/${channel.organizationId}/services/${\n          channel.serviceId\n        }/channels`,\n        toSnakeCase(channel)\n      )\n      .then((response) => toCamelCase(response));\n  }\n\n  /**\n   * Deletes a message bus channel\n   *\n   * API Endpoint: '/organizations/:organizationId/services/:serviceId/channels/:channelId'\n   * Method: DELETE\n   *\n   * @param {string} organizationId UUID of the organization\n   * @param {string} serviceId ID of the service\n   * @param {string} channelId UUID of the channel\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.bus.channels\n   *   .delete(\n   *     '875afddd-091c-4385-bc21-0edf38804d27',\n   *     'ab123service',\n   *     '175afdec-291c-4385-bc21-0edf38804d21'\n   *   );\n   */\n  delete(organizationId, serviceId, channelId) {\n    let errorMsg;\n\n    if (!organizationId) {\n      errorMsg =\n        'An organizationId is required to delete a message bus channel.';\n    } else if (!serviceId) {\n      errorMsg = 'A serviceId is required to delete a message bus channel.';\n    } else if (!channelId) {\n      errorMsg = 'A channelId is required to delete a message bus channel.';\n    }\n\n    if (errorMsg) {\n      return Promise.reject(new Error(errorMsg));\n    }\n\n    return this._request.delete(\n      `${\n        this._baseUrl\n      }/organizations/${organizationId}/services/${serviceId}/channels/${channelId}`\n    );\n  }\n\n  /**\n   * Gets information about a message bus channel\n   *\n   * API Endpoint: '/organizations/:organizationId/services/:serviceId/channels/:channelId'\n   * Method: GET\n   *\n   * @param {string} organizationId UUID of the organization\n   * @param {string} serviceId ID of the service\n   * @param {string} channelId UUID of the channel\n   *\n   * @returns {Promise}\n   * @fulfill {MessageBusChannel} Information about an event\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.bus.channels\n   *   .get(\n   *     '875afddd-091c-4385-bc21-0edf38804d27',\n   *     'ab123service',\n   *     '175afdec-291c-4385-bc21-0edf38804d21'\n   *   )\n   *   .then((channel) => console.log(channel))\n   *   .catch((err) => console.log(err));\n   */\n  get(organizationId, serviceId, channelId) {\n    let errorMsg;\n\n    if (!organizationId) {\n      errorMsg = 'An organizationId is required to get a message bus channel.';\n    } else if (!serviceId) {\n      errorMsg = 'A serviceId is required to get a message bus channel.';\n    } else if (!channelId) {\n      errorMsg = 'A channelId is required to get a message bus channel.';\n    }\n\n    if (errorMsg) {\n      return Promise.reject(new Error(errorMsg));\n    }\n\n    return this._request\n      .get(\n        `${\n          this._baseUrl\n        }/organizations/${organizationId}/services/${serviceId}/channels/${channelId}`\n      )\n      .then((response) => toCamelCase(response));\n  }\n\n  /**\n   * Updates a message bus channel\n   *\n   * API Endpoint: '/organizations/:organizationId/services/:serviceId/channels/:channelId'\n   * Method: PUT\n   *\n   * @param {string} organizationId UUID of the organization\n   * @param {string} serviceId ID of the service\n   * @param {string} channelId UUID of the channel to update\n   * @param {Object} update An object containing the updated data for the channel\n   * @param {string} [update.name]\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.bus.channels\n   *   .update(\n   *     '875afddd-091c-4385-bc21-0edf38804d27',\n   *     'ab123service',\n   *     '175afdec-291c-4385-bc21-0edf38804d21'\n   *     { name: 'An Updated Channel Name' }\n   *   );\n   */\n  update(organizationId, serviceId, channelId, update) {\n    let errorMsg;\n\n    if (!organizationId) {\n      errorMsg =\n        'An organizationId is required to delete a message bus channel.';\n    } else if (!serviceId) {\n      errorMsg = 'A serviceId is required to delete a message bus channel.';\n    } else if (!channelId) {\n      errorMsg = 'A channelId is required to delete a message bus channel.';\n    }\n\n    if (errorMsg) {\n      return Promise.reject(new Error(errorMsg));\n    }\n\n    if (!update) {\n      return Promise.reject(\n        new Error('An update is required to update a message bus channel.')\n      );\n    }\n\n    if (!isPlainObject(update)) {\n      return Promise.reject(\n        new Error(\n          'The message bus channel update must be a well-formed object with the data you wish to update.'\n        )\n      );\n    }\n\n    return this._request.put(\n      `${\n        this._baseUrl\n      }/organizations/${organizationId}/services/${serviceId}/channels/${channelId}`,\n      toSnakeCase(update)\n    );\n  }\n}\n\nexport default Channels;\n"]}