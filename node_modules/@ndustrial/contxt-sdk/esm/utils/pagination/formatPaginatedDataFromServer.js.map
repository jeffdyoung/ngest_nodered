{"version":3,"sources":["utils/pagination/formatPaginatedDataFromServer.js"],"names":["toCamelCase","defaultFormatter","value","formatPaginatedDataFromServer","input","recordFormatter","_metadata","records","map"],"mappings":"AAAA,SAASA,WAAT,QAA4B,YAA5B;;AAEA;;;;;;;;;;AAUA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAC/B,SAAOF,YAAYE,KAAZ,CAAP;AACD;;AAED;;;;;;;;;;;;;;;;AAgBA,SAASC,6BAAT,GAGE;AAAA,MAFAC,KAEA,uEAFQ,EAER;AAAA,MADAC,eACA,uEADkBJ,gBAClB;;AACA,MAAMK,YAAYF,MAAME,SAAN,IAAmB,EAArC;AACA,MAAMC,UAAUH,MAAMG,OAAN,IAAiB,EAAjC;;AAEA,SAAO;AACLD,eAAWN,YAAYM,SAAZ,CADN;AAELC,aAASA,QAAQC,GAAR,CAAYH,eAAZ;AAFJ,GAAP;AAID;;AAED,eAAeF,6BAAf","file":"formatPaginatedDataFromServer.js","sourcesContent":["import { toCamelCase } from '../objects';\n\n/**\n * Default formatter. Returns the original value in case no formatter is\n * provided.\n *\n * @param {Any} value\n *\n * @returns {Any} output\n *\n * @private\n */\nfunction defaultFormatter(value) {\n  return toCamelCase(value);\n}\n\n/**\n * Normalizes paginated data returned from the API server\n *\n * @param {Object} input\n * @param {PaginationMetadata} input._metadata Metadata about the pagination\n *   position\n * @param {Array} input.records\n * @param {Function} [recordFormatter = defaultFormatter] A formatter for each\n *   individual record. If not provided, it will return the record untouched.\n *\n * @returns {Object} output\n * @returns {PaginationMetadata} output._metadata Metadata about the pagination settings\n * @returns {Array} output.records\n *\n * @private\n */\nfunction formatPaginatedDataFromServer(\n  input = {},\n  recordFormatter = defaultFormatter\n) {\n  const _metadata = input._metadata || {};\n  const records = input.records || [];\n\n  return {\n    _metadata: toCamelCase(_metadata),\n    records: records.map(recordFormatter)\n  };\n}\n\nexport default formatPaginatedDataFromServer;\n"]}