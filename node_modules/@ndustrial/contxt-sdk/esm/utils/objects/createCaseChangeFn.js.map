{"version":3,"sources":["utils/objects/createCaseChangeFn.js"],"names":["mapObj","createCaseChangeFn","caseChangeFn","changeCase","input","userOptions","options","deep","excludeKeys","excludeTransform","value","key","indexOf","Array","isArray","map","item"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,OAAnB;;AAEA;;;;;;;;;;;AAWA,SAASC,kBAAT,CAA4BC,YAA5B,EAA0C;AACxC;;;;;;;;;;;;;;;;;;AAkBA,WAASC,UAAT,GAA6C;AAAA,QAAzBC,KAAyB,uEAAjB,EAAiB;AAAA,QAAbC,WAAa;;AAC3C,QAAMC;AACJC,YAAM,IADF;AAEJC,mBAAa,EAFT;AAGJC,wBAAkB;AAHd,OAIDJ,WAJC,CAAN;;AAOA,WAAOL,OACLI,KADK,EAEL,UAACM,KAAD,EAAQC,GAAR,EAAgB;AACd,UAAIL,QAAQE,WAAR,CAAoBI,OAApB,CAA4BD,GAA5B,IAAmC,CAAC,CAAxC,EAA2C;AACzC,eAAO,CAACD,KAAD,EAAQ,wBAAR,CAAP;AACD;;AAED,UAAIJ,QAAQG,gBAAR,CAAyBG,OAAzB,CAAiCD,GAAjC,MAA0C,CAAC,CAA/C,EAAkD;AAChDA,cAAMT,aAAaS,GAAb,CAAN;AACD;;AAED,aAAO,CAACD,KAAD,EAAQC,GAAR,CAAP;AACD,KAZI,EAaL,EAAEJ,MAAMD,QAAQC,IAAhB,EAbK,CAAP;AAeD;;AAED,SAAO,UAASH,KAAT,EAAgBE,OAAhB,EAAyB;AAC9B,WAAOO,MAAMC,OAAN,CAAcV,KAAd,IACHA,MAAMW,GAAN,CAAU,UAACC,IAAD;AAAA,aAAUb,WAAWa,IAAX,EAAiBV,OAAjB,CAAV;AAAA,KAAV,CADG,GAEHH,WAAWC,KAAX,EAAkBE,OAAlB,CAFJ;AAGD,GAJD;AAKD;;AAED,eAAeL,kBAAf","file":"createCaseChangeFn.js","sourcesContent":["import mapObj from './map';\n\n/*\n * Creates a function that can be used to change object keys.\n *\n * @param {Function} caseChangeFn A function used to change the case of keys in\n * the object/array. Can be one from [the NPM package `change-case`](https://github.com/blakeembrey/change-case)\n * or a custom function that follows the same API.\n *\n * @returns {Function}\n *\n * @private\n */\nfunction createCaseChangeFn(caseChangeFn) {\n  /*\n   * Maps over an array or object and converts all the keys to a different\n   * format\n   *\n   * @param {Object|Array} input The object or array to map over\n   * @param {Object} [userOptions]\n   * @param {Boolean} [userOptions.deep = true] Boolean indicating if only the first\n   *   level should be mapped or if it should recursively map over nested\n   *   objects/arrays\n   * @param {String[]} [userOptions.excludeKeys] A list of keys that should not\n   *   be included in the returned object\n   * @param {String[]} [userOptions.excludeTransform] A list of keys that should\n   *   not be transformed in the returned object\n   *\n   * @returns {Object|Array}\n   *\n   * @private\n   */\n  function changeCase(input = {}, userOptions) {\n    const options = {\n      deep: true,\n      excludeKeys: [],\n      excludeTransform: [],\n      ...userOptions\n    };\n\n    return mapObj(\n      input,\n      (value, key) => {\n        if (options.excludeKeys.indexOf(key) > -1) {\n          return [value, '__MARKED_FOR_REMOVAL__'];\n        }\n\n        if (options.excludeTransform.indexOf(key) === -1) {\n          key = caseChangeFn(key);\n        }\n\n        return [value, key];\n      },\n      { deep: options.deep }\n    );\n  }\n\n  return function(input, options) {\n    return Array.isArray(input)\n      ? input.map((item) => changeCase(item, options))\n      : changeCase(input, options);\n  };\n}\n\nexport default createCaseChangeFn;\n"]}