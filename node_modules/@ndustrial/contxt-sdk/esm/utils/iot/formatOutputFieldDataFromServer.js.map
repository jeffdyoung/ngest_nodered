{"version":3,"sources":["utils/iot/formatOutputFieldDataFromServer.js"],"names":["parseOutputFieldNextPageUrlMetadata","toCamelCase","formatOutputFieldDataFromServer","input","meta","query","next_page_url","records","excludeKeys"],"mappings":";;AAAA,SAASA,mCAAT,QAAoD,SAApD;AACA,SAASC,WAAT,QAA4B,YAA5B;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,SAASC,+BAAT,GAAqD;AAAA,MAAZC,KAAY,uEAAJ,EAAI;;AACnD,MAAMC,OAAOD,MAAMC,IAAN,IAAc,EAA3B;AACA,MAAMC,QAAQL,oCAAoCI,KAAKE,aAAzC,CAAd;AACA,MAAMC,UAAUJ,MAAMI,OAAN,IAAiB,EAAjC;;AAEA,SAAO;AACLH,uBACKH,YAAYE,MAAMC,IAAlB,EAAwB,EAAEI,aAAa,CAAC,eAAD,CAAf,EAAxB,CADL,EAEKH,KAFL,CADK;AAKLE,aAASN,YAAYM,OAAZ;AALJ,GAAP;AAOD;;AAED,eAAeL,+BAAf","file":"formatOutputFieldDataFromServer.js","sourcesContent":["import { parseOutputFieldNextPageUrlMetadata } from './index';\nimport { toCamelCase } from '../objects';\n\n/**\n * Normalizes the output field data and metadata returned from the API server\n *\n * @returns {Object} input\n * @returns {Object} input.meta Metadata about the output field data query\n * @returns {Number} input.meta.count Total number of field data records found\n * @returns {Boolean} input.meta.has_more Indicates if there are more records\n *   to retrieve\n * @returns {String} [input.meta.next_page_url] URL that can be used to request\n *   the next page of results\n * @returns {Number} [input.meta.next_record_time] UNIX timestamp indicating a\n *   `timeStart` that would return new values\n * @param {Object[]} input.records\n * @param {String} input.records[].event_time\n * @param {String} input.records[].value\n *\n * @returns {Object} output\n * @returns {Object} output.meta Metadata about the request\n * @returns {Number} output.meta.count Total number of field data records\n * @returns {Boolean} output.meta.hasMore Indicates if there are more records\n *   to retrieve\n * @returns {Number} [output.meta.limit] Number of records to return\n * @returns {Number} [output.nextRecordTime] UNIX timestamp indicating a\n *   `timeStart` that would return new values\n * @returns {Number} [output.meta.timeEnd] UNIX timestamp indicating the end of\n *   the query window\n * @returns {Number} [output.meta.timeStart] UNIX timestamp indicating the\n *   start of the query window\n * @returns {Number} [output.meta.window] The sampling window for records.\n *   Required if including a timeEnd or timeStart.\n *   Valid options include: `0`, `60`, `900`, and `3600`\n * @returns {OutputFieldData[]} output.records\n *\n * @private\n */\nfunction formatOutputFieldDataFromServer(input = {}) {\n  const meta = input.meta || {};\n  const query = parseOutputFieldNextPageUrlMetadata(meta.next_page_url);\n  const records = input.records || [];\n\n  return {\n    meta: {\n      ...toCamelCase(input.meta, { excludeKeys: ['next_page_url'] }),\n      ...query\n    },\n    records: toCamelCase(records)\n  };\n}\n\nexport default formatOutputFieldDataFromServer;\n"]}