{"version":3,"sources":["facilities/index.js"],"names":["isPlainObject","FacilityGroupings","CostCenters","formatFacilityWithInfoFromServer","toCamelCase","toSnakeCase","Facilities","sdk","request","baseUrl","config","audiences","facilities","host","_baseUrl","_request","_sdk","groupings","costCenters","facility","requiredFields","i","length","field","Promise","reject","Error","post","then","facilityId","update","options","params","should_update","delete","get","map","organizationId","formattedUpdate","excludeKeys","put"],"mappings":"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","file":"index.js","sourcesContent":["import isPlainObject from 'lodash.isplainobject';\nimport FacilityGroupings from './groupings';\nimport CostCenters from './costCenters';\nimport { formatFacilityWithInfoFromServer } from '../utils/facilities';\nimport { toCamelCase, toSnakeCase } from '../utils/objects';\n\n/**\n * @typedef {Object} Facility\n * @property {string} [address1]\n * @property {string} [address2]\n * @property {string} [assetId] UUID corresponding with an asset\n * @property {string} [city]\n * @property {string} createdAt ISO 8601 Extended Format date/time string\n * @property {string} [geometryId] UUID corresponding with a geometry\n * @property {number} id\n * @property {Object} [Info] User declared information\n * @property {string} name\n * @property {Object} [Organization]\n * @property {string} [Organization.createdAt] ISO 8601 Extended Format date/time string\n * @property {string} [Organization.id] UUID formatted ID\n * @property {string} [Organization.name]\n * @property {string} [Organization.updatedAt] ISO 8601 Extended Format date/time string\n * @property {string} [state]\n * @property {Object[]} [tags]\n * @property {string} [tags[].createdAt] ISO 8601 Extended Format date/time string\n * @property {number} [tags[].id]\n * @property {number} [tags[].facilityId]\n * @property {string} [tags[].name]\n * @property {string} [tags[].updatedAt] ISO 8601 Extended Format date/time string\n * @property {string} timezone An IANA Time Zone Database string, i.e. America/Los_Angeles\n * @property {number} [weatherLocationId]\n * @property {string} [zip] US Zip Code\n */\n\n/**\n * Module that provides access to, and the manipulation\n * of, information about different facilities\n *\n * @typicalname contxtSdk.facilities\n */\nclass Facilities {\n  /**\n   * @param {Object} sdk An instance of the SDK so the module can communicate with other modules\n   * @param {Object} request An instance of the request module tied to this module's audience.\n   */\n  constructor(sdk, request) {\n    const baseUrl = `${sdk.config.audiences.facilities.host}/v1`;\n\n    this._baseUrl = baseUrl;\n    this._request = request;\n    this._sdk = sdk;\n\n    this.groupings = new FacilityGroupings(sdk, request, baseUrl);\n    this.costCenters = new CostCenters(sdk, request, baseUrl);\n  }\n\n  /**\n   * Creates a new facility\n   *\n   * API Endpoint: '/facilities'\n   * Method: POST\n   *\n   * @param {Object} facility\n   * @param {string} [facility.address1]\n   * @param {string} [facility.address2]\n   * @param {string} [facility.assetId] UUID corresponding with an asset\n   * @param {string} [facility.city]\n   * @param {string} [facility.geometryId] UUID corresponding with a geometry\n   * @param {string} facility.name\n   * @param {string} facility.organizationId UUID corresponding with an organization\n   * @param {string} [facility.state]\n   * @param {string} facility.timezone\n   * @param {number} [facility.weatherLocationId]\n   * @param {string} [facility.zip]\n   *\n   * @returns {Promise}\n   * @fulfill {Facility} Information about the new facility\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.facilities\n   *   .create({\n   *     address: '221 B Baker St, London, England',\n   *     name: 'Sherlock Holmes Museum',\n   *     organizationId: 25\n   *   })\n   *   .then((facilities) => console.log(facilities))\n   *   .catch((err) => console.log(err));\n   */\n  create(facility = {}) {\n    const requiredFields = ['organizationId', 'name', 'timezone'];\n\n    for (let i = 0; i < requiredFields.length; i++) {\n      const field = requiredFields[i];\n\n      if (!facility[field]) {\n        return Promise.reject(\n          new Error(`A ${field} is required to create a new facility.`)\n        );\n      }\n    }\n\n    return this._request\n      .post(`${this._baseUrl}/facilities`, toSnakeCase(facility))\n      .then((facility) => toCamelCase(facility));\n  }\n\n  /**\n   * Creates or updates a facility's info (NOTE: This refers to the facility_info model)\n   *\n   * API Endpoint: '/facilities/:facilityId/info?should_update=true'\n   * Method: POST\n   *\n   * @param {number} facilityId The ID of the facility to update\n   * @param {Object} update An object containing the facility info for the facility\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.facilities.createOrUpdateInfo(25, {\n   *   square_feet: '10000'\n   * });\n   */\n  createOrUpdateInfo(facilityId, update) {\n    if (!facilityId) {\n      return Promise.reject(\n        new Error(\"A facility ID is required to update a facility's info.\")\n      );\n    }\n\n    if (!update) {\n      return Promise.reject(\n        new Error(\"An update is required to update a facility's info.\")\n      );\n    }\n\n    if (!isPlainObject(update)) {\n      return Promise.reject(\n        new Error(\n          'The facility info update must be a well-formed object with the data you wish to update.'\n        )\n      );\n    }\n\n    const options = {\n      params: {\n        should_update: true\n      }\n    };\n\n    return this._request.post(\n      `${this._baseUrl}/facilities/${facilityId}/info`,\n      update,\n      options\n    );\n  }\n\n  /**\n   * Deletes a facility\n   *\n   * API Endpoint: '/facilities/:facilityId'\n   * Method: DELETE\n   *\n   * @param {number} facilityId The ID of the facility\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.facilities.delete(25);\n   */\n  delete(facilityId) {\n    if (!facilityId) {\n      return Promise.reject(\n        new Error('A facility ID is required for deleting a facility')\n      );\n    }\n\n    return this._request.delete(`${this._baseUrl}/facilities/${facilityId}`);\n  }\n\n  /**\n   * Gets information about a facility\n   *\n   * API Endpoint: '/facilities/:facilityId'\n   * Method: GET\n   *\n   * @param {number} facilityId The ID of the facility\n   *\n   * @returns {Promise}\n   * @fulfill {Facility} Information about a facility\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.facilities\n   *   .get(25)\n   *   .then((facility) => console.log(facility))\n   *   .catch((err) => console.log(err));\n   */\n  get(facilityId) {\n    if (!facilityId) {\n      return Promise.reject(\n        new Error(\n          'A facility ID is required for getting information about a facility'\n        )\n      );\n    }\n\n    return this._request\n      .get(`${this._baseUrl}/facilities/${facilityId}`)\n      .then((facility) => formatFacilityWithInfoFromServer(facility));\n  }\n\n  /**\n   * Gets a list of all facilities\n   *\n   * API Endpoint: '/facilities'\n   * Method: GET\n   *\n   * @returns {Promise}\n   * @fulfill {Facility[]} Information about all facilities\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.facilities\n   *   .getAll()\n   *   .then((facilities) => console.log(facilities))\n   *   .catch((err) => console.log(err));\n   */\n  getAll() {\n    return this._request\n      .get(`${this._baseUrl}/facilities`)\n      .then((facilities) =>\n        facilities.map((facility) => formatFacilityWithInfoFromServer(facility))\n      );\n  }\n\n  /**\n   * Gets a list of all facilities that belong to a particular organization\n   *\n   * API Endpoint: '/organizations/:organizationId/facilities'\n   * Method: GET\n   *\n   * @param {string} organizationId UUID corresponding with an organization\n   * @param {object} [options] Object containing parameters to be called with the request\n   * @param {boolean} [options.includeGroupings] Boolean flag for including groupings data with each facility\n   *\n   * @returns {Promise}\n   * @fulfill {Facility[]} Information about all facilities\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.facilities\n   *   .getAllByOrganizationId(25, { includeGroupings: true })\n   *   .then((facilities) => console.log(facilities))\n   *   .catch((err) => console.log(err));\n   */\n  getAllByOrganizationId(organizationId, options) {\n    if (!organizationId) {\n      return Promise.reject(\n        new Error(\n          \"An organization ID is required for getting a list of an organization's facilities\"\n        )\n      );\n    }\n\n    return this._request\n      .get(`${this._baseUrl}/organizations/${organizationId}/facilities`, {\n        params: toSnakeCase(options)\n      })\n      .then((facilities) =>\n        facilities.map((facility) => formatFacilityWithInfoFromServer(facility))\n      );\n  }\n\n  /**\n   * Updates a facility's specifics\n   *\n   * API Endpoint: '/facilities/:facilityId'\n   * Method: PUT\n   *\n   * @param {number} facilityId The ID of the facility to update\n   * @param {Object} update An object containing the updated data for the facility\n   * @param {string} [update.address1]\n   * @param {string} [update.address2]\n   * @param {string} [update.assetId] UUID corresponding with an asset\n   * @param {string} [update.city]\n   * @param {string} [update.geometryId] UUID corresponding with a geometry\n   * @param {Object} [update.info] User declared information\n   * @param {string} [update.name]\n   * @param {string} [update.organizationId] UUID corresponding with an organization\n   * @param {string} [update.state]\n   * @param {string} [update.timezone]\n   * @param {number} [update.weatherLocationId]\n   * @param {string} [update.zip]\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.facilities.update(25, {\n   *   address: '221 B Baker St, London, England',\n   *   name: 'Sherlock Homes Museum',\n   *   organizationId: 25\n   * });\n   */\n  update(facilityId, update) {\n    if (!facilityId) {\n      return Promise.reject(\n        new Error('A facility ID is required to update a facility.')\n      );\n    }\n\n    if (!update) {\n      return Promise.reject(\n        new Error('An update is required to update a facility.')\n      );\n    }\n\n    if (!isPlainObject(update)) {\n      return Promise.reject(\n        new Error(\n          'The facility update must be a well-formed object with the data you wish to update.'\n        )\n      );\n    }\n\n    const formattedUpdate = toSnakeCase(update, {\n      excludeKeys: ['id', 'organizationId']\n    });\n\n    return this._request.put(\n      `${this._baseUrl}/facilities/${facilityId}`,\n      formattedUpdate\n    );\n  }\n}\n\nexport default Facilities;\n"]}