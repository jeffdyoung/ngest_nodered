{"version":3,"sources":["facilities/groupings.js"],"names":["isPlainObject","toCamelCase","toSnakeCase","FacilityGroupings","sdk","request","baseUrl","_baseUrl","_request","_sdk","facilityGroupingId","facilityId","errorMsg","Promise","reject","Error","post","then","groupingFacility","grouping","requiredFields","i","length","field","delete","get","groupings","organizationId","update","formattedUpdate","excludeKeys","put"],"mappings":"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","file":"groupings.js","sourcesContent":["import isPlainObject from 'lodash.isplainobject';\nimport { toCamelCase, toSnakeCase } from '../utils/objects';\n\n/**\n * @typedef {Object} FacilityGrouping\n * @param {string} createdAt ISO 8601 Extended Format date/time string\n * @param {string} [description]\n * @param {Facility[]} [facilities]\n * @param {string} id UUID\n * @param {boolean} isPrivate\n * @param {string} name\n * @param {string} organizationId UUID\n * @param {string} ownerId Auth0 identifer of the user\n * @param {string} [parentGroupingId] UUID\n * @param {string} updatedAt ISO 8601 Extended Format date/time string\n */\n\n/**\n * @typedef {Object} FacilityGroupingFacility\n * @param {string} createdAt ISO 8601 Extended Format date/time string\n * @param {string} facilityGroupingId UUID\n * @param {number} facilityId\n * @param {string} id UUID\n * @param {string} updatedAt ISO 8601 Extended Format date/time string\n */\n\n/**\n * Module that provides access to facility groupings, and helps manage\n * the relationship between those groupings and facilities\n *\n * @typicalname contxtSdk.facilities.groupings\n */\nclass FacilityGroupings {\n  /**\n   * @param {Object} sdk An instance of the SDK so the module can communicate with other modules\n   * @param {Object} request An instance of the request module tied to this module's audience.\n   * @param {string} baseUrl The base URL provided by the parent module\n   */\n  constructor(sdk, request, baseUrl) {\n    this._baseUrl = baseUrl;\n    this._request = request;\n    this._sdk = sdk;\n  }\n\n  /**\n   * Adds a facility to a facility grouping\n   *\n   * API Endpoint: '/groupings/:facilityGroupingId/facilities/:facilityId'\n   * Method: POST\n   *\n   * @param {string} facilityGroupingId UUID corresponding with a facility grouping\n   * @param {number} facilityId\n   *\n   * @returns {Promise}\n   * @fulfill {FacilityGroupingFacility} Information about the new facility/grouping relationship\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.facilities.groupings\n   *   .addFacility('b3dbaae3-25dd-475b-80dc-66296630a8d0', 4)\n   *   .then((grouping) => console.log(grouping))\n   *   .catch((err) => console.log(err));\n   */\n  addFacility(facilityGroupingId, facilityId) {\n    let errorMsg;\n\n    if (!facilityGroupingId) {\n      errorMsg =\n        'A facilityGroupingId is required to create a relationship between a facility grouping and a facility.';\n    } else if (!facilityId) {\n      errorMsg =\n        'A facilityId is required to create a relationship between a facility grouping and a facility.';\n    }\n\n    if (errorMsg) {\n      return Promise.reject(new Error(errorMsg));\n    }\n\n    return this._request\n      .post(\n        `${\n          this._baseUrl\n        }/groupings/${facilityGroupingId}/facility/${facilityId}`\n      )\n      .then((groupingFacility) => toCamelCase(groupingFacility));\n  }\n\n  /**\n   * Creates a new facility grouping\n   *\n   * API Endpoint: '/groupings'\n   * Method: POST\n   *\n   * @param {Object} facilityGrouping\n   * @param {string} [facilityGrouping.description]\n   * @param {boolean} [facilityGrouping.isPrivate = false]\n   * @param {string} facilityGrouping.name\n   * @param {string} facilityGrouping.organizationId UUID\n   * @param {string} [facilityGrouping.parentGroupingId] UUID\n   *\n   * @returns {Promise}\n   * @fulfill {FacilityGrouping} Information about the new facility grouping\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.facilities.groupings\n   *   .create({\n   *     description: 'US States of CT, MA, ME, NH, RI, VT',\n   *     isPrivate: false,\n   *     name: 'New England, USA',\n   *     organizationId: '61f5fe1d-d202-4ae7-af76-8f37f5bbeec5',\n   *     parentGroupingId: 'e9f8f89c-609c-4c83-8ebc-cea928af661e'\n   *   })\n   *   .then((grouping) => console.log(grouping))\n   *   .catch((err) => console.log(err));\n   */\n  create(grouping = {}) {\n    const requiredFields = ['name', 'organizationId'];\n\n    for (let i = 0; requiredFields.length > i; i++) {\n      const field = requiredFields[i];\n\n      if (!grouping[field]) {\n        return Promise.reject(\n          new Error(`A ${field} is required to create a new facility grouping.`)\n        );\n      }\n    }\n\n    return this._request\n      .post(`${this._baseUrl}/groupings`, toSnakeCase(grouping))\n      .then((grouping) => toCamelCase(grouping));\n  }\n\n  /**\n   * Delete a facility groupings\n   *\n   * API Endpoint: '/groupings/:facilityGroupingId'\n   * Method: DELETE\n   *\n   * @param {string} facilityGroupingId The id of the facility grouping (formatted as a UUID)\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.facilities.groupings.delete(\n   *   'e4fec739-56aa-4b50-8dab-e9d6b9c91a5d'\n   * );\n   */\n  delete(facilityGroupingId) {\n    if (!facilityGroupingId) {\n      return Promise.reject(\n        new Error(\n          'A facility grouping id is required for deleting a facility grouping.'\n        )\n      );\n    }\n\n    return this._request.delete(\n      `${this._baseUrl}/groupings/${facilityGroupingId}`\n    );\n  }\n\n  /**\n   * Get a listing of all facility groupings available to a user. Includes public groupings across\n   * any organization the user has access to and the user's private groupings.\n   *\n   * API Endpoint: '/groupings'\n   * Method: GET\n   *\n   * @returns {Promise}\n   * @fulfill {FacilityGrouping[]}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.facilites.groupings\n   *   .getAll()\n   *   .then((groupings) => console.log(groupings))\n   *   .catch((err) => console.log(err));\n   */\n  getAll() {\n    return this._request\n      .get(`${this._baseUrl}/groupings`)\n      .then((groupings) => toCamelCase(groupings));\n  }\n\n  /**\n   * Get a listing of all facility groupings for an organization. Includes public groupings\n   * across that specific organization and the user's private groupings for that organization.\n   *\n   * API Endpoint: '/organizations/:organizationId/groupings'\n   * Method: GET\n   *\n   * @param {string} organizationId UUID corresponding with an organization\n   *\n   * @returns {Promise}\n   * @fulfill {FacilityGrouping[]}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.facilites.groupings\n   *   .getAllByOrganizationId('349dbd36-5dca-4a10-b54d-d0f71c3c8709')\n   *   .then((groupings) => console.log(groupings))\n   *   .catch((err) => console.log(err));\n   */\n  getAllByOrganizationId(organizationId) {\n    if (!organizationId) {\n      return Promise.reject(\n        new Error(\n          \"An organization id is required for getting a list of an organization's facility groupings\"\n        )\n      );\n    }\n\n    return this._request\n      .get(`${this._baseUrl}/organizations/${organizationId}/groupings`)\n      .then((groupings) => toCamelCase(groupings));\n  }\n\n  /**\n   * Removes a facility from a facility grouping\n   *\n   * API Endpoint: '/groupings/:facilityGroupingId/facilities/:facilityId'\n   * Method: DELETE\n   *\n   * @param {string} facilityGroupingId UUID corresponding with a facility grouping\n   * @param {number} facilityId\n   *\n   * @returns {Promise}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.facilities.groupings\n   *   .removeFacility('b3dbaae3-25dd-475b-80dc-66296630a8d0', 4)\n   *   .catch((err) => console.log(err));\n   */\n  removeFacility(facilityGroupingId, facilityId) {\n    let errorMsg;\n\n    if (!facilityGroupingId) {\n      errorMsg =\n        'A facilityGroupingId is required to remove a relationship between a facility grouping and a facility.';\n    } else if (!facilityId) {\n      errorMsg =\n        'A facilityId is required to remove a relationship between a facility grouping and a facility.';\n    }\n\n    if (errorMsg) {\n      return Promise.reject(new Error(errorMsg));\n    }\n\n    return this._request.delete(\n      `${this._baseUrl}/groupings/${facilityGroupingId}/facility/${facilityId}`\n    );\n  }\n\n  /**\n   * Updates an existing facility grouping\n   *\n   * API Endpoint: '/groupings/:facilityGroupingId'\n   * Method: PUT\n   *\n   * @param {String} facilityGroupingId\n   * @param {Object} update\n   * @param {string} [update.description]\n   * @param {boolean} [update.isPrivate]\n   * @param {string} [update.name]\n   * @param {string} [update.parentGroupingId] UUID corresponding with another facility grouping\n   *\n   * @returns {Promise}\n   * @fulfill {FacilityGrouping} Information about the updated facility grouping\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.facilities.groupings\n   *   .update('b3dbaae3-25dd-475b-80dc-66296630a8d0', {\n   *     description: 'US States of CT, MA, ME, NH, RI, VT',\n   *     isPrivate: false,\n   *     name: 'New England, USA',\n   *     parentGroupingId: 'e9f8f89c-609c-4c83-8ebc-cea928af661e'\n   *   })\n   *   .then((grouping) => console.log(grouping))\n   *   .catch((err) => console.log(err));\n   */\n  update(facilityGroupingId, update) {\n    if (!facilityGroupingId) {\n      return Promise.reject(\n        new Error(\n          'A facility grouping id is required to update a facility grouping.'\n        )\n      );\n    }\n\n    if (!update) {\n      return Promise.reject(\n        new Error('An update is required to update a facility grouping')\n      );\n    }\n\n    if (!isPlainObject(update)) {\n      return Promise.reject(\n        new Error(\n          'The facility grouping update must be a well-formed object with the data you wish to update.'\n        )\n      );\n    }\n\n    const formattedUpdate = toSnakeCase(update, {\n      excludeKeys: ['id', 'organizationId', 'ownerId']\n    });\n\n    return this._request\n      .put(`${this._baseUrl}/groupings/${facilityGroupingId}`, formattedUpdate)\n      .then((grouping) => toCamelCase(grouping));\n  }\n}\n\nexport default FacilityGroupings;\n"]}