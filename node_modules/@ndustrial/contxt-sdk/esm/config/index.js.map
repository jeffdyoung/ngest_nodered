{"version":3,"sources":["config/index.js"],"names":["defaultAudiences","defaultConfigs","Config","userConfig","externalModules","Object","assign","_dynamicAudienceNames","_replacedAudiences","audiences","_getAudiences","customModuleConfigs","auth","env","interceptors","audienceName","clientId","host","Error","indexOf","filter","name","config","audience","webSocket","options","_getInternalAudiences","_getExternalAudiences","keys","reduce","memo","key","hasClientId","hasHost","customModuleConfig","moduleAudiences","_getAudienceFromCustomConfig"],"mappings":"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","file":"index.js","sourcesContent":["import defaultAudiences from './audiences';\nimport defaultConfigs from './defaults';\n\n/**\n * A single audience used for authenticating and communicating with an individual API.\n *\n * @typedef {Object} Audience\n * @param {string} config.clientId Client Id provided by Auth0 for the environment you are\n *   trying to communicate with\n * @param {string} config.host Hostname for the API that corresponds with the clientId provided\n * @param {string} [config.webSocket] WebSocket URL for the API that corresponds with the clientId provided\n */\n\n/**\n * A custom audience that will override the configuration of an individual module. Consists of\n * either a reference to an environment that already exists or a clientId and host for a\n * custom environment.\n *\n * @typedef {Object} CustomAudience\n * @param {string} [config.clientId] Client Id provided by Auth0 for the environment you are\n *   trying to communicate with\n * @param {string} [config.env] The SDK provided environment name you are trying to reach\n * @param {string} [config.host] Hostname for the API that corresponds with the clientId provided\n * @param {string} [config.webSocket] WebSocket URL for the API that corresponds with the clientId provided\n */\n\n/**\n * An object of audiences that corresponds to all the different environments available for a\n * single module.\n *\n * @typedef {Object.<string, Audience>} Environments\n */\n\n/**\n * An external module to be integrated into the SDK as a first class citizen. Includes information\n * for authenticating and communicating with an individual API and the external module itself.\n *\n * @typedef {Object} ExternalModule\n * @param {string} config.clientId Client Id provided by Auth0 for the environment you are\n *   trying to communicate with. Can be a `null` value if the value is not needed. Some SessionType\n *   adapters (currently, just the MachineAuth adapter) require a value other than `null` if the\n *   built-in `request` module is used since they acquire contxt tokens based on a single clientId.\n * @param {string} config.host Hostname for the API that corresponds with the clientId provided.\n *   Can be a `null` value if the value is not needed.\n * @param {function} config.module The module that will be decorated into the SDK\n */\n\n/**\n * An object of interceptors that get called on every request or response.\n * More information at {@link https://github.com/axios/axios#interceptors axios Interceptors}\n *\n * @typedef {Object} AxiosInterceptor\n * @param {function} interceptor.fulfilled A function that is run on every successful request or\n *   response\n * @param {function} interceptor.rejected A function that is run on every failed request or response\n */\n\n/**\n * User provided configuration options\n *\n * @typedef {Object} UserConfig\n * @property {Object} auth User assigned configurations specific for their authentication methods\n * @property {string} [auth.authorizationPath] Path Auth0WebAuth process should redirect to after a\n *   successful sign in attempt\n * @property {string} auth.clientId Client Id provided by Auth0 for this application\n * @property {string} [auth.clientSecret] Client secret provided by Auth0 for this application. This\n *   is optional for the auth0WebAuth SessionType, but required for the machineAuth SessionType\n * @property {Object.<string, CustomAudience>} [auth.customModuleConfigs] Custom environment setups\n *   for individual modules. Requires clientId/host or env\n * @property {string} [auth.env = 'production'] The environment that every module should use for\n *   their clientId and host\n * @property {function} [auth.onRedirect = (pathname) => { window.location = pathname; }] A redirect\n *   method used for navigating through Auth0 callbacks in Web applications\n * @property {number} [auth.tokenExpiresAtBufferMs = 300000] The time (in milliseconds) before a\n *   token truly expires that we consider it expired (i.e. the token's expiresAt - this = calculated\n *   expiresAt). Defaults to 5 minutes.\n * @property {Object} [interceptors] Axios interceptors that can transform requests and responses.\n *   More information at {@link https://github.com/axios/axios#interceptors axios Interceptors}\n * @property {AxiosInterceptor[]} [interceptors.request] Interceptors that act on every request\n * @property {AxiosInterceptor[]} [intercepotrs.response] Intereptors that act on every response\n */\n\n/**\n * Module that merges user assigned configurations with default configurations.\n *\n * @typicalname contxtSdk.config\n */\nclass Config {\n  /**\n   * @param {UserConfig} userConfig The user provided configuration options\n   * @param {Object.<string, ExternalModule>} [externalModules] User provided external modules that should be treated as\n   *   first class citizens\n   */\n  constructor(userConfig, externalModules) {\n    Object.assign(this, userConfig);\n\n    this._dynamicAudienceNames = [];\n    this._replacedAudiences = {};\n\n    this.audiences = this._getAudiences({\n      externalModules,\n      customModuleConfigs: userConfig.auth.customModuleConfigs,\n      env: userConfig.auth.env\n    });\n\n    this.auth = {\n      ...defaultConfigs.auth,\n      ...userConfig.auth\n    };\n\n    this.interceptors = {\n      ...defaultConfigs.interceptors,\n      ...userConfig.interceptors\n    };\n  }\n\n  addDynamicAudience(audienceName, { clientId, host }) {\n    if (!clientId || !host) {\n      throw new Error(\n        'A dynamic audience must contain `clientId` and `host` properties'\n      );\n    }\n\n    if (this._dynamicAudienceNames.indexOf(audienceName) > -1) {\n      throw new Error(\n        `A dynamic audience of the name \\`${audienceName}\\` already exists. This problem can be rectified by using a different name for the audience.`\n      );\n    }\n\n    this._dynamicAudienceNames = [...this._dynamicAudienceNames, audienceName];\n\n    if (this.audiences[audienceName]) {\n      this._replacedAudiences[audienceName] = this.audiences[audienceName];\n    }\n\n    this.audiences[audienceName] = {\n      clientId,\n      host\n    };\n  }\n\n  removeDynamicAudience(audienceName) {\n    if (this._dynamicAudienceNames.indexOf(audienceName) === -1) {\n      throw new Error('There is no dynamic audience to remove.');\n    }\n\n    this.audiences[audienceName] = this._replacedAudiences[audienceName];\n\n    delete this._replacedAudiences[audienceName];\n    this._dynamicAudienceNames = this._dynamicAudienceNames.filter(\n      (name) => name !== audienceName\n    );\n  }\n\n  /**\n   * Parses a custom module configuration for a valid environment/audience. Requires either a\n   * clientId and host, or an environment that matches a default audience/environment.\n   *\n   * @param {CustomAudience} config A custom audience configuration to parse\n   * @param {Object.<string, Audience>} audiences An object with keys for environment names and values of Audience information\n   *\n   * @returns {Audience}\n   * @throws {Error}\n   *\n   * @private\n   */\n  _getAudienceFromCustomConfig(config, audiences) {\n    if (config.clientId && config.host) {\n      const audience = {\n        clientId: config.clientId,\n        host: config.host\n      };\n\n      if (config.webSocket) {\n        audience.webSocket = config.webSocket;\n      }\n\n      return audience;\n    } else if (config.env) {\n      return audiences[config.env];\n    } else {\n      throw new Error(\n        'Custom module configurations must either contain a `host` and `clientId` or specify a specific target environment via the `env` property'\n      );\n    }\n  }\n\n  /**\n   * Reconciles the main environment with custom environments and external modules.\n   *\n   * @param {Object} options\n   * @param {Object.<string, CustomAudience>} [options.customModuleConfigs = {}] Any custom\n   *   configurations for internal modules\n   * @param {string} [options.env = 'production'] The base environment for any\n   *   non-overridden modules\n   * @param {Object.<string, ExternalModule>} [options.externalModules = {}] An object of external\n   *   modules from which to build a set of audiences\n   *\n   * @returns {Object.<string, Audience>}\n   *\n   * @private\n   */\n  _getAudiences(options = {}) {\n    const {\n      customModuleConfigs = {},\n      env = 'production',\n      externalModules = {}\n    } = options;\n\n    return {\n      ...this._getInternalAudiences({\n        customModuleConfigs,\n        env,\n        audiences: defaultAudiences\n      }),\n      ...this._getExternalAudiences({ externalModules })\n    };\n  }\n\n  /**\n   * Builds up the audiences for external modules.\n   *\n   * @param {Object}\n   * @param {Object.<string, ExternalModule>} externalModules An object of external modules from\n   *   which to build a set of audiences\n   *\n   * @returns {Object.<string, Audience>}\n   * @throws {Error}\n   *\n   * @private\n   */\n  _getExternalAudiences({ externalModules }) {\n    return Object.keys(externalModules).reduce((memo, key) => {\n      const clientId = externalModules[key].clientId;\n      const host = externalModules[key].host;\n      const hasClientId = !!clientId || clientId === null;\n      const hasHost = !!host || host === null;\n\n      if (!(hasClientId && hasHost)) {\n        throw new Error(\n          'External modules must contain `clientId` and `host` properties'\n        );\n      }\n\n      memo[key] = {\n        clientId,\n        host\n      };\n\n      return memo;\n    }, {});\n  }\n\n  /**\n   * Reconciles the main environment with custom environments to build up audiences for\n   * internal modules.\n   *\n   * @param {Object.<string, Environments>} audiences All possible audiences/environments for\n   *   internal modules\n   * @param {Object.<string, CustomAudience>} customModuleConfigs Any custom configurations for\n   *   internal modules\n   * @param {string} env The base environment for any non-overridden modules\n   *\n   * @returns {Object.<string, Audience>}\n   *\n   * @private\n   */\n  _getInternalAudiences({ audiences, customModuleConfigs, env }) {\n    return Object.keys(audiences).reduce((memo, key) => {\n      const customModuleConfig = customModuleConfigs[key];\n      const moduleAudiences = audiences[key];\n\n      if (customModuleConfig) {\n        memo[key] = this._getAudienceFromCustomConfig(\n          customModuleConfig,\n          moduleAudiences\n        );\n      } else {\n        memo[key] = moduleAudiences[env];\n      }\n\n      return memo;\n    }, {});\n  }\n}\n\nexport default Config;\n"]}