{"version":3,"sources":["sessionTypes/auth0WebAuth.js"],"names":["Auth0WebAuth","sdk","_sdk","config","auth","clientId","Error","_onRedirect","onRedirect","_defaultOnRedirect","_sessionInfo","_getStoredSession","_sessionRenewalTimeout","_tokenPromises","currentUrl","URL","window","location","set","authorizationPath","_auth0","auth0","WebAuth","audience","audiences","contxtAuth","clientID","domain","redirectUri","origin","pathname","responseType","scope","isAuthenticated","_scheduleSessionRefresh","audienceName","promise","Promise","resolve","then","reject","_generateUnauthorizedError","accessToken","axios","post","host","nonce","headers","Authorization","data","access_token","client","userInfo","err","profile","formattedProfile","updatedAt","updated_at","_parseHash","authResult","_storeSession","redirectPathname","_getRedirectPathname","catch","console","log","expiresAt","Date","now","authorize","options","localStorage","removeItem","clearTimeout","logout","returnTo","checkSession","response","getItem","JSON","parse","_checkSession","sessionInfo","errorToThrow","error","indexOf","logOut","status","fromSdk","originalError","code","parseHash","tokenExpiresAtBufferMs","bufferedExpiresAt","delay","setTimeout","_getUpdatedSession","expiresIn","setItem","stringify","TYPE"],"mappings":"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","file":"auth0WebAuth.js","sourcesContent":["import auth0 from 'auth0-js';\nimport axios from 'axios';\nimport URL from 'url-parse';\n\n/**\n * @typedef {Object} UserProfile\n * @property {string} email\n * @property {boolean} email_verified\n * @property {string} name\n * @property {string} nickname\n * @property {string} picture URL to an avatar\n * @property {string} sub The Subject Claim of the user's JWT\n * @property {string} updatedAt ISO 8601 Extended Format date/time string\n */\n\n/**\n * @typedef {Object} Auth0WebAuthSessionInfo\n * @property {string} accessToken\n * @property {number} expiresAt\n */\n\n/**\n * A SessionType that allows the user to initially authenticate with Auth0 and then gain a valid JWT\n * from the Contxt Auth service. This would only be used in web applications. You will need to\n * integrate this module's `logIn`, `logOut`, and `handleAuthentication` methods with your UI\n * elements. `logIn` would be tied to a UI element to log the user in. `logOut` would be tied to a\n * UI element to log the user out. `handleAuthentication` would be tied with your application's\n * router and would be called when visting the route defined by `config.authorizationPath` (the\n * default is `/callback`).\n *\n * This SessionType is set up to refresh auth tokens automatically. To ensure this works, make sure\n * your single page application has {@link https://auth0.com/docs/cross-origin-authentication#configure-your-application-for-cross-origin-authentication Cross-Origin Authentication}\n * enabled in Auth0.\n *\n * *NOTE*: The web origin added in auth0 should be something like\n * \"http://localhost:5000\", not \"http://localhost:5000/callback\"\n *\n * @type SessionType\n *\n * @typicalname contxtSdk.auth\n *\n * @example\n * import ContxtSdk from '@ndustrial/contxt-sdk';\n * import history from '../services/history';\n *\n * const contxtSdk = new ContxtSDK({\n *   config: {\n *     auth: {\n *       clientId: '<client id>',\n *       onRedirect: (pathname) => history.push(pathname)\n *     }\n *   },\n *   sessionType: 'auth0WebAuth'\n * });\n */\nclass Auth0WebAuth {\n  /**\n   * @param {Object} sdk An instance of the SDK so the module can communicate with other modules\n   * @param {Object} sdk.audiences\n   * @param {Object} sdk.audiences.contxtAuth\n   * @param {string} sdk.audiences.contxtAuth.clientId The Auth0 client id of the\n   *   Contxt Auth environment\n   * @param {Object} sdk.config\n   * @param {Object} sdk.config.auth\n   * @param {string} sdk.config.auth.authorizationPath Path that is called by Auth0 after\n   *   successfully authenticating\n   * @param {string} sdk.config.auth.clientId The Auth0 client id of this application\n   * @param {function} [sdk.config.auth.onRedirect] Redirect method used when navigating between\n   *   Auth0 callbacks\n   */\n  constructor(sdk) {\n    this._sdk = sdk;\n\n    if (!this._sdk.config.auth.clientId) {\n      throw new Error('clientId is required for the WebAuth config');\n    }\n\n    this._onRedirect =\n      this._sdk.config.auth.onRedirect || this._defaultOnRedirect;\n    this._sessionInfo = this._getStoredSession();\n    this._sessionRenewalTimeout = null;\n    this._tokenPromises = {};\n\n    const currentUrl = new URL(window.location);\n    currentUrl.set('pathname', this._sdk.config.auth.authorizationPath);\n\n    this._auth0 = new auth0.WebAuth({\n      audience: this._sdk.config.audiences.contxtAuth.clientId,\n      clientID: this._sdk.config.auth.clientId,\n      domain: 'ndustrial.auth0.com',\n      redirectUri: `${currentUrl.origin}${currentUrl.pathname}`,\n      responseType: 'token',\n      scope: 'email profile openid'\n    });\n\n    if (this.isAuthenticated()) {\n      this._scheduleSessionRefresh();\n    }\n  }\n\n  /**\n   * Removes an audience's API token from the in-memory token storage\n   *\n   * @param audienceName\n   *\n   * @returns {Promise}\n   */\n  clearCurrentApiToken(audienceName) {\n    const promise = this._tokenPromises[audienceName] || Promise.resolve();\n\n    return promise.then(() => {\n      delete this._tokenPromises[audienceName];\n    });\n  }\n\n  /**\n   * Gets the current auth0 access token\n   *\n   * @returns {Promise}\n   * @fulfills {string} accessToken\n   */\n  getCurrentAccessToken() {\n    if (!this.isAuthenticated()) {\n      return Promise.reject(this._generateUnauthorizedError());\n    }\n\n    return Promise.resolve(this._sessionInfo.accessToken);\n  }\n\n  /**\n   * Requests an api token from Contxt Auth for the correct audience\n   *\n   * @param audienceName\n   *\n   * @returns {Promise}\n   * @fulfills {string} apiToken\n   */\n  getCurrentApiToken(audienceName) {\n    if (!this.isAuthenticated()) {\n      return Promise.reject(this._generateUnauthorizedError());\n    }\n\n    const audience = this._sdk.config.audiences[audienceName];\n\n    if (!(audience && audience.clientId)) {\n      return Promise.reject(new Error('No valid audience found'));\n    }\n\n    if (!this._tokenPromises[audienceName]) {\n      this._tokenPromises[audienceName] = axios\n        .post(\n          `${this._sdk.config.audiences.contxtAuth.host}/v1/token`,\n          {\n            audiences: [audience.clientId],\n            nonce: 'nonce'\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${this._sessionInfo.accessToken}`\n            }\n          }\n        )\n        .then(({ data }) => data.access_token);\n    }\n\n    return this._tokenPromises[audienceName];\n  }\n\n  /**\n   * Gets the current user's profile from Auth0\n   *\n   * @returns {Promise}\n   * @fulfill {UserProfile}\n   * @rejects {Error}\n   */\n  getProfile() {\n    return new Promise((resolve, reject) => {\n      this._auth0.client.userInfo(\n        this._sessionInfo.accessToken,\n        (err, profile) => {\n          if (err) {\n            return reject(err);\n          }\n\n          const formattedProfile = {\n            ...profile,\n            updatedAt: profile.updated_at\n          };\n          delete formattedProfile.updated_at;\n\n          resolve(formattedProfile);\n        }\n      );\n    });\n  }\n\n  /**\n   * Routine that takes unparsed information from Auth0, stores it in a way that\n   * can be used for getting access tokens, schedules its future renewal, and\n   * redirects to the correct page in the application.\n   *\n   * @returns {Promise}\n   * @fulfill {Auth0WebAuthSessionInfo}\n   * @rejects {Error}\n   */\n  handleAuthentication() {\n    return this._parseHash()\n      .then((authResult) => {\n        this._storeSession(authResult);\n        this._scheduleSessionRefresh();\n\n        const redirectPathname = this._getRedirectPathname();\n        this._onRedirect(redirectPathname);\n      })\n      .catch((err) => {\n        console.log(`Error while handling authentication: ${err}`);\n\n        this._onRedirect('/');\n\n        throw err;\n      });\n  }\n\n  /**\n   * Tells caller if the current user is authenticated.\n   *\n   * @returns {boolean}\n   */\n  isAuthenticated() {\n    return !!(\n      this._sessionInfo &&\n      this._sessionInfo.accessToken &&\n      this._sessionInfo.expiresAt > Date.now()\n    );\n  }\n\n  /**\n   * Starts the Auth0 log in process\n   */\n  logIn() {\n    this._auth0.authorize();\n  }\n\n  /**\n   * Logs the user out by removing any stored session info, clearing any token\n   * renewal, and redirecting to the root\n   *\n   * @param {Object} options\n   * @param {Boolean} [options.federated = false] Indicator for if Auth0 should\n   *   attempt to log out the user from an external IdP\n   * @param {String} [options.returnTo = window.location.origin] URL that the\n   *   user will be redirected to after a successful log out\n   */\n  logOut(options) {\n    this._sessionInfo = {};\n    this._tokenPromises = {};\n\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('expires_at');\n\n    clearTimeout(this._sessionRenewalTimeout);\n\n    this._auth0.logout({\n      returnTo: new URL(window.location).origin,\n      ...options\n    });\n  }\n\n  /**\n   * Wraps Auth0's `checkSession` method. Will check if the current Auth0\n   * session is valid and get updated information if needed\n   *\n   * @fulfill {Object} sessionResponse Information returned from Auth0\n   * @rejects {Error}\n   *\n   * @private\n   */\n  _checkSession(options = {}) {\n    return new Promise((resolve, reject) => {\n      this._auth0.checkSession(options, (err, response) => {\n        if (err || !response) {\n          return reject(\n            err || new Error('No valid tokens returned from auth0')\n          );\n        }\n\n        return resolve(response);\n      });\n    });\n  }\n\n  /**\n   * Default method used for redirecting around the web application. Overridden\n   * by `onRedirect` in the auth config\n   *\n   * @private\n   */\n  _defaultOnRedirect(pathname) {\n    window.location = pathname;\n  }\n\n  /**\n   * Grabs a stored redirect pathname that may have been stored in another part\n   * of the web application\n   *\n   * @private\n   */\n  _getRedirectPathname() {\n    const redirectPathname = localStorage.getItem('redirect_pathname');\n    localStorage.removeItem('redirect_pathname');\n\n    return redirectPathname || '/';\n  }\n\n  /**\n   * Loads a saved session from local storage\n   *\n   * @returns {Object} session\n   * @returns {string} session.accessToken\n   * @returns {number} session.expiresAt\n   *\n   * @private\n   */\n  _getStoredSession() {\n    return {\n      accessToken: localStorage.getItem('access_token'),\n      expiresAt: JSON.parse(localStorage.getItem('expires_at'))\n    };\n  }\n\n  /**\n   * Gets up to date session info. Will get an updated session/tokens if the\n   * previous session has already expired. Will log the user out if an error\n   * from Auth0 indicates the session cannot continue without re-authentication.\n   *\n   * @returns {Promise}\n   * @rejects {Error}\n   *\n   * @private\n   */\n  _getUpdatedSession() {\n    return this._checkSession()\n      .then((sessionInfo) => {\n        this._storeSession(sessionInfo);\n\n        this._tokenPromises = {};\n\n        this._scheduleSessionRefresh();\n      })\n      .catch((err) => {\n        let errorToThrow = err;\n\n        if (\n          err.error &&\n          [\n            'consent_required',\n            'interaction_required',\n            'login_required'\n          ].indexOf(err.error) > -1\n        ) {\n          errorToThrow = this._generateUnauthorizedError(err);\n\n          this.logOut();\n        } else if (!(err.response && err.response.status)) {\n          errorToThrow = new Error(\n            'There was a problem getting new session info. Please check your configuration settings.'\n          );\n          errorToThrow.fromSdk = true;\n          errorToThrow.originalError = err;\n        }\n\n        throw errorToThrow;\n      });\n  }\n\n  _generateUnauthorizedError(err) {\n    const error = new Error('Unauthorized');\n\n    if (!err) {\n      error.fromSdk = true;\n    }\n\n    error.response = {\n      data: {\n        ...err,\n        code: 401\n      },\n      status: 401\n    };\n\n    return error;\n  }\n\n  /**\n   * Wraps Auth0's method for parsing hash information after a successful\n   * authentication.\n   *\n   * @returns {Promise}\n   * @fulfill {Object} hashResponse Information returned from Auth0\n   * @rejects {Error}\n   *\n   * @private\n   */\n  _parseHash() {\n    return new Promise((resolve, reject) => {\n      this._auth0.parseHash((err, authResult) => {\n        if (err || !authResult) {\n          return reject(\n            err || new Error('No valid tokens returned from auth0')\n          );\n        }\n\n        return resolve(authResult);\n      });\n    });\n  }\n\n  /**\n   * Schedules the Access token to renew before they expire\n   *\n   * @private\n   */\n  _scheduleSessionRefresh() {\n    const tokenExpiresAtBufferMs =\n      this._sdk.config.auth.tokenExpiresAtBufferMs || 0;\n    const bufferedExpiresAt =\n      this._sessionInfo.expiresAt - tokenExpiresAtBufferMs;\n    const delay = bufferedExpiresAt - Date.now();\n\n    if (this._sessionRenewalTimeout) {\n      clearTimeout(this._sessionRenewalTimeout);\n    }\n\n    this._sessionRenewalTimeout = setTimeout(() => {\n      this._getUpdatedSession();\n    }, delay);\n  }\n\n  /**\n   * Saves a session in local storage for future use\n   *\n   * @param {Object} sessionInfo\n   * @param {string} sessionInfo.accessToken\n   * @param {number} sessionInfo.expiresAt\n   *\n   * @private\n   */\n  _storeSession({ accessToken, expiresIn }) {\n    const expiresAt = expiresIn * 1000 + Date.now();\n\n    localStorage.setItem('access_token', accessToken);\n    localStorage.setItem('expires_at', JSON.stringify(expiresAt));\n\n    this._sessionInfo.accessToken = accessToken;\n    this._sessionInfo.expiresAt = expiresAt;\n  }\n}\n\nexport const TYPE = 'auth0WebAuth';\nexport default Auth0WebAuth;\n"]}