'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _axios9 = require('axios');

var _axios10 = _interopRequireDefault(_axios9);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Request = function () {
  /**
   * @param {Object} sdk An instance of the SDK so the module can communicate with other modules
   * @param {string} audienceName The audience name for this instance. Used when grabbing a
   *   Bearer token
   */
  function Request(sdk, audienceName) {
    _classCallCheck(this, Request);

    this._audienceName = audienceName;
    this._axios = _axios10.default.create();
    this._insertHeaders = this._insertHeaders.bind(this);
    this._sdk = sdk;

    this._attachInterceptors();
  }

  /**
   * Makes a DELETE request
   * See more at {@link https://github.com/axios/axios axios}
   *
   * @returns {Promise}
   * @fulfill {string|number|object|array} data
   */


  _createClass(Request, [{
    key: 'delete',
    value: function _delete() {
      var _axios;

      return (_axios = this._axios).delete.apply(_axios, arguments).then(function (_ref) {
        var data = _ref.data;
        return data;
      });
    }

    /**
     * Makes a GET request
     * See more at {@link https://github.com/axios/axios axios}
     *
     * @returns {Promise}
     * @fulfill {string|number|object|array} data
     */

  }, {
    key: 'get',
    value: function get() {
      var _axios2;

      return (_axios2 = this._axios).get.apply(_axios2, arguments).then(function (_ref2) {
        var data = _ref2.data;
        return data;
      });
    }

    /**
     * Makes a HEAD request
     * See more at {@link https://github.com/axios/axios axios}
     *
     * @returns {Promise}
     * @fulfill {string|number|object|array} data
     */

  }, {
    key: 'head',
    value: function head() {
      var _axios3;

      return (_axios3 = this._axios).head.apply(_axios3, arguments).then(function (_ref3) {
        var data = _ref3.data;
        return data;
      });
    }

    /**
     * Makes an OPTIONS request
     * See more at {@link https://github.com/axios/axios axios}
     *
     * @returns {Promise}
     * @fulfill {string|number|object|array} data
     */

  }, {
    key: 'options',
    value: function options() {
      var _axios4;

      return (_axios4 = this._axios).options.apply(_axios4, arguments).then(function (_ref4) {
        var data = _ref4.data;
        return data;
      });
    }

    /**
     * Makes a PATCH request
     * See more at {@link https://github.com/axios/axios axios}
     *
     * @returns {Promise}
     * @fulfill {string|number|object|array} data
     */

  }, {
    key: 'patch',
    value: function patch() {
      var _axios5;

      return (_axios5 = this._axios).patch.apply(_axios5, arguments).then(function (_ref5) {
        var data = _ref5.data;
        return data;
      });
    }

    /**
     * Makes a POST request
     * See more at {@link https://github.com/axios/axios axios}
     *
     * @returns {Promise}
     * @fulfill {string|number|object|array} data
     */

  }, {
    key: 'post',
    value: function post() {
      var _axios6;

      return (_axios6 = this._axios).post.apply(_axios6, arguments).then(function (_ref6) {
        var data = _ref6.data;
        return data;
      });
    }

    /**
     * Makes a PUT request
     * See more at {@link https://github.com/axios/axios axios}
     *
     * @returns {Promise}
     * @fulfill {string|number|object|array} data
     */

  }, {
    key: 'put',
    value: function put() {
      var _axios7;

      return (_axios7 = this._axios).put.apply(_axios7, arguments).then(function (_ref7) {
        var data = _ref7.data;
        return data;
      });
    }

    /**
     * Makes a request
     * See more at {@link https://github.com/axios/axios axios}
     *
     * @returns {Promise}
     * @fulfill {string|number|object|array} data
     */

  }, {
    key: 'request',
    value: function request() {
      var _axios8;

      return (_axios8 = this._axios).request.apply(_axios8, arguments).then(function (_ref8) {
        var data = _ref8.data;
        return data;
      });
    }

    /**
     * Sets up axios interceptors for the request instance
     * More information at {@link https://github.com/axios/axios#interceptors axios Interceptors}
     *
     * @private
     */

  }, {
    key: '_attachInterceptors',
    value: function _attachInterceptors() {
      var _this = this;

      var requestInterceptors = [{ fulfilled: this._insertHeaders }].concat(_toConsumableArray(this._sdk.config.interceptors.request));
      var responseInterceptors = [].concat(_toConsumableArray(this._sdk.config.interceptors.response));

      requestInterceptors.forEach(function (_ref9) {
        var fulfilled = _ref9.fulfilled,
            rejected = _ref9.rejected;

        _this._axios.interceptors.request.use(fulfilled, rejected);
      });
      responseInterceptors.forEach(function (_ref10) {
        var fulfilled = _ref10.fulfilled,
            rejected = _ref10.rejected;

        _this._axios.interceptors.response.use(fulfilled, rejected);
      });
    }

    /**
     * Decorates custom modules onto the SDK instance so they behave as first-class citizens.
     *
     * @param {Object} config
     * @param {Object} config.headers
     * @param {Object} config.headers.common
     *
     * @returns {Promise}
     * @fulfill {Object} axios.js config
     *
     * @private
     */

  }, {
    key: '_insertHeaders',
    value: function _insertHeaders(config) {
      return this._sdk.auth.getCurrentApiToken(this._audienceName).then(function (apiToken) {
        config.headers.common.Authorization = 'Bearer ' + apiToken;

        return config;
      });
    }
  }]);

  return Request;
}();

exports.default = Request;
//# sourceMappingURL=request.js.map
