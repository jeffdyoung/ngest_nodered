{"version":3,"sources":["facilities/costCenters.js"],"names":["CostCenters","sdk","request","baseUrl","_baseUrl","_request","_sdk","costCenterId","facilityId","errorMsg","Promise","reject","Error","post","then","costCenterFacility","costCenter","requiredFields","i","length","field","delete","get","costCenters","organizationId","update","put"],"mappings":"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","file":"costCenters.js","sourcesContent":["import isPlainObject from 'lodash.isplainobject';\nimport { toCamelCase, toSnakeCase } from '../utils/objects';\n\n/**\n * @typedef {Object} CostCenter\n * @param {string} createdAt ISO 8601 Extended Format date/time string\n * @param {string} [description]\n * @param {string} id UUID\n * @param {string} name\n * @param {string} organizationId UUID\n * @param {string} updatedAt ISO 8601 Extended Format date/time string\n */\n\n/**\n * @typedef {Object} CostCenterFacility\n * @param {string} costCenterId UUID\n * @param {string} createdAt ISO 8601 Extended Format date/time string\n * @param {number} facilityId\n * @param {string} id UUID\n * @param {string} updatedAt ISO 8601 Extended Format date/time string\n */\n\n/**\n * Module that provides access to cost centers, and helps manage\n * the relationship between those cost centers and facilities\n *\n * @typicalname contxtSdk.facilities.costCenters\n */\nclass CostCenters {\n  /**\n   * @param {Object} sdk An instance of the SDK so the module can communicate with other modules\n   * @param {Object} request An instance of the request module tied to this module's audience.\n   * @param {string} baseUrl The base URL provided by the parent module\n   */\n  constructor(sdk, request, baseUrl) {\n    this._baseUrl = baseUrl;\n    this._request = request;\n    this._sdk = sdk;\n  }\n\n  /**\n   * Adds a facility to a cost center\n   *\n   * API Endpoint: '/costcenters/:costCenterId/facility/:facilityId'\n   * Method: POST\n   *\n   * @param {string} costCenterId UUID corresponding with a cost center\n   * @param {number} facilityId The ID of a facility\n   *\n   * @returns {Promise}\n   * @fulfill {CostCenterFacility} Information about the new cost center facility relationship\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.facilities.costCenters\n   *   .addFacility('b3dbaae3-25dd-475b-80dc-66296630a8d0', 4)\n   *   .then((costCenter) => console.log(costCenter))\n   *   .catch((err) => console.log(err));\n   */\n  addFacility(costCenterId, facilityId) {\n    let errorMsg;\n\n    if (!costCenterId) {\n      errorMsg =\n        'A costCenterId is required to create a relationship between a cost center and a facility.';\n    } else if (!facilityId) {\n      errorMsg =\n        'A facilityId is required to create a relationship between a cost center and a facility.';\n    }\n\n    if (errorMsg) {\n      return Promise.reject(new Error(errorMsg));\n    }\n\n    return this._request\n      .post(\n        `${this._baseUrl}/costcenters/${costCenterId}/facility/${facilityId}`\n      )\n      .then((costCenterFacility) => toCamelCase(costCenterFacility));\n  }\n\n  /**\n   * Creates a new cost center\n   *\n   * API Endpoint: '/costcenters'\n   * Method: POST\n   *\n   * @param {Object} costCenter\n   * @param {string} [costCenter.description]\n   * @param {string} costCenter.name\n   * @param {string} costCenter.organizationId UUID\n   *\n   * @returns {Promise}\n   * @fulfill {CostCenter} Information about the new cost center\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.facilities.costCenters\n   *   .create({\n   *     decsription: 'Cost center number 1',\n   *     name: 'North Carolina, USA',\n   *     organizationId: '61f5fe1d-d202-4ae7-af76-8f37f5bbeec5'\n   *   })\n   *   .then((costCenter) => console.log(costCenter))\n   *   .catch((err) => console.log(err));\n   */\n  create(costCenter = {}) {\n    const requiredFields = ['name', 'organizationId'];\n\n    for (let i = 0; i < requiredFields.length; i++) {\n      const field = requiredFields[i];\n\n      if (!costCenter[field]) {\n        return Promise.reject(\n          new Error(`A ${field} is required to create a new cost center.`)\n        );\n      }\n    }\n\n    return this._request\n      .post(`${this._baseUrl}/costcenters`, toSnakeCase(costCenter))\n      .then((costCenter) => toCamelCase(costCenter));\n  }\n\n  /**\n   * Delete a cost center\n   *\n   * API Endpoint: '/costcenters/:costCenterId'\n   * Method: DELETE\n   *\n   * @param {string} costCenterId The ID of the cost center (formatted as a UUID)\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.facilities.costCenters.delete(\n   *   'e4fec739-56aa-4b50-8dab-e9d6b9c91a5d'\n   * );\n   */\n  delete(costCenterId) {\n    if (!costCenterId) {\n      return Promise.reject(\n        new Error('A cost center id is required for deleting a cost center.')\n      );\n    }\n\n    return this._request.delete(`${this._baseUrl}/costcenters/${costCenterId}`);\n  }\n\n  /**\n   * Get a listing of all cost centers\n   *\n   * API Endpoint: '/costcenters'\n   * METHOD: GET\n   *\n   * @returns {Promise}\n   * @fulfill {CostCenter[]}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.facilities.costCenters\n   *   .getAll()\n   *   .then((costCenters) => console.log(costCenters))\n   *   .catch((err) => console.log(err));\n   */\n  getAll() {\n    return this._request\n      .get(`${this._baseUrl}/costcenters`)\n      .then((costCenters) => toCamelCase(costCenters));\n  }\n\n  /**\n   * Get a listing of all cost centers for an organization\n   *\n   * API Endpoint: '/organizations/:organizationId/costcenters'\n   * METHOD: GET\n   *\n   * @param {string} organizationId The ID of the organization (formatted as a UUID)\n   *\n   * @returns {Promise}\n   * @fulfill {CostCenter[]}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.facilities.costCenters\n   *   .getAllByOrganizationId('59270c25-4de9-4b22-8e0b-ab287ac344ce')\n   *   .then((costCenters) => console.log(costCenters))\n   *   .catch((err) => console.log(err));\n   */\n  getAllByOrganizationId(organizationId) {\n    if (!organizationId) {\n      return Promise.reject(\n        new Error(\n          \"An organization id is required for getting a list of an organization's cost centers.\"\n        )\n      );\n    }\n\n    return this._request\n      .get(`${this._baseUrl}/organizations/${organizationId}/costcenters`)\n      .then((costCenters) => toCamelCase(costCenters));\n  }\n\n  /**\n   * Removes a facility from a cost center\n   *\n   * API Endpoint: '/costcenters/:costCenterId/facility/:facilityId'\n   * Method: DELETE\n   *\n   * @param {string} costCenterId UUID corresponding with a cost center\n   * @param {number} facilityId ID corresponding with the facility\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.facilities.costCenters\n   *   .removeFacility('b3dbaae3-25dd-475b-80dc-66296630a8d0', 4)\n   *   .catch((err) => console.log(err));\n   */\n  removeFacility(costCenterId, facilityId) {\n    let errorMsg;\n\n    if (!costCenterId) {\n      errorMsg =\n        'A costCenterId is required to remove a relationship between a cost center and a facility.';\n    } else if (!facilityId) {\n      errorMsg =\n        'A facilityId is required to remove a relationship between a cost center and a facility.';\n    }\n\n    if (errorMsg) {\n      return Promise.reject(new Error(errorMsg));\n    }\n\n    return this._request.delete(\n      `${this._baseUrl}/costcenters/${costCenterId}/facility/${facilityId}`\n    );\n  }\n\n  /**\n   * Updates an existing cost center\n   *\n   * API Endpoint: '/costcenters/:costCenterId'\n   * Method: PUT\n   *\n   * @param {String} costCenterId\n   * @param {Object} update\n   * @param {string} [update.description]\n   * @param {string} [update.name]\n   *\n   * @returns {Promise}\n   * @fulfill {FacilityGrouping} Information about the updated cost center\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.facilities.costCenters\n   *   .update({\n   *     description: 'Refrigeration compressors throughout the facility',\n   *     name: 'Compressors',\n   *   })\n   *   .then((costCenter) => console.log(costCenter))\n   *   .catch((err) => console.log(err));\n   */\n  update(costCenterId, update) {\n    if (!costCenterId) {\n      return Promise.reject(\n        new Error('A cost center id is required to update a cost center.')\n      );\n    }\n\n    if (!update) {\n      return Promise.reject(\n        new Error('An update is required to update a cost center.')\n      );\n    }\n\n    if (!isPlainObject(update)) {\n      return Promise.reject(\n        new Error(\n          'The cost center update must be a well-formed object with the data you wish to update.'\n        )\n      );\n    }\n\n    return this._request\n      .put(`${this._baseUrl}/costcenters/${costCenterId}`, toSnakeCase(update))\n      .then((costCenter) => toCamelCase(costCenter));\n  }\n}\n\nexport default CostCenters;\n"]}