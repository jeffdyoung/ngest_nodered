{"version":3,"sources":["index.js"],"names":["sessionTypes","ContxtSdk","config","externalModules","sessionType","_dynamicModuleNames","_replacedModules","Config","assets","Assets","_createRequest","auth","_createAuthSession","bus","Bus","coordinator","Coordinator","events","Events","facilities","Facilities","files","Files","iot","Iot","_decorate","moduleName","clientId","host","module","indexOf","Error","addDynamicAudience","clearCurrentApiToken","removeDynamicAudience","filter","name","TYPES","AUTH0_WEB_AUTH","Auth0WebAuth","PASSWORD_GRANT_AUTH","PasswordGrantAuth","MACHINE_AUTH","MachineAuth","audienceName","Request","modules","Object","keys","forEach"],"mappings":"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","file":"index.js","sourcesContent":["import Assets from './assets';\nimport Bus from './bus';\nimport Config from './config';\nimport Coordinator from './coordinator';\nimport Events from './events';\nimport Facilities from './facilities';\nimport Files from './files';\nimport Iot from './iot';\nimport Request from './request';\nimport * as sessionTypes from './sessionTypes';\n\n/**\n * An adapter that allows the SDK to authenticate with different services and manage various tokens.\n * Can authenticate with a service like Auth0 and then with Contxt or can communicate directly\n * with Contxt. The adapter must implement required methods, but most methods are optional. Some of\n * the optional methods are documented below.\n *\n * @typedef {Object} SessionType\n * @property {function} [getCurrentAccessToken] Provides a current access token from Auth0 that is\n *   used for profile information and can be used to get API token for Contxt itself\n * @property {function} getCurrentApiToken Provides a current API token that is used across\n *   different Contxt services\n * @property {function} [getProfile] Provides profile information about the current user\n * @property {function} [handleAuthentication] Is called by front-end code in the Auth0 reference\n *  implementation to handle getting the access token from Auth0\n * @property {function} [isAuthenticated] Tells caller if the current user is authenticated.\n *  Different session types may determine if a user is authenticated in different ways.\n * @property {function} [logIn] Is used by front-end code in the Auth0 reference implementation to\n *   start the sign in process\n * @property {function} [logOut] Is used by the front-end code in the Auth0 reference implementation\n *   to sign the user out\n */\n\n/**\n * ContxtSdk constructor\n *\n * @example\n * import ContxtSdk from '@ndustrial/contxt-sdk';\n * import ExternalModule1 from './ExternalModule1';\n * import history from '../services/history';\n *\n * const contxtSdk = new ContxtSdk({\n *   config: {\n *     auth: {\n *       clientId: 'Auth0 client id of the application being built',\n *       customModuleConfigs: {\n *         facilities: {\n *           env: 'production'\n *         }\n *       },\n *       env: 'staging',\n *       onRedirect: (pathname) => history.push(pathname)\n *     }\n *   },\n *   externalModules: {\n *     externalModule1: {\n *       clientId: 'Auth0 client id of the external module',\n *       host: 'https://www.example.com/externalModule1',\n *       module: ExternalModule1\n *     }\n *   },\n *   sessionType: 'auth0WebAuth'\n * });\n */\nclass ContxtSdk {\n  /**\n   * @param {UserConfig} config The user provided configuration options\n   * @param {Object.<string, ExternalModule>} [externalModules] User provided external modules that\n   *   should be treated as first class citizens\n   * @param {string} sessionType The type of auth session you wish to use (e.g. auth0WebAuth\n   *   or machine)\n   */\n  constructor({ config = {}, externalModules = {}, sessionType }) {\n    this._dynamicModuleNames = [];\n    this._replacedModules = {};\n\n    this.config = new Config(config, externalModules);\n\n    this.assets = new Assets(this, this._createRequest('facilities'));\n    this.auth = this._createAuthSession(sessionType);\n    this.bus = new Bus(this, this._createRequest('bus'));\n    this.coordinator = new Coordinator(\n      this,\n      this._createRequest('coordinator')\n    );\n    this.events = new Events(this, this._createRequest('events'));\n    this.facilities = new Facilities(this, this._createRequest('facilities'));\n    this.files = new Files(this, this._createRequest('files'));\n    this.iot = new Iot(this, this._createRequest('iot'));\n\n    this._decorate(externalModules);\n  }\n\n  /**\n   * Mounts a dynamic module into the SDK. Is used to add a module after initial\n   * instatiation that will use the SDK's authentication and request methods to\n   * access an ndustrial.io API\n   *\n   * @param {string} moduleName The name (or key) that will serve as the mount\n   *   point for the module in the SDK (i.e. customModule -> sdk.customModule)\n   * @param {ExternalModule} externalModule\n   */\n  mountDynamicModule(moduleName, { clientId, host, module }) {\n    if (this._dynamicModuleNames.indexOf(moduleName) > -1) {\n      throw new Error(\n        `An dynamic module of the name \\`${moduleName}\\` already exists. This problem can be rectified by using a different name for the new module.`\n      );\n    }\n\n    this.config.addDynamicAudience(moduleName, { clientId, host });\n\n    this._dynamicModuleNames = [...this._dynamicModuleNames, moduleName];\n\n    if (this[moduleName]) {\n      this._replacedModules[moduleName] = this[moduleName];\n    }\n\n    this[moduleName] = new module(this, this._createRequest(moduleName));\n  }\n\n  /**\n   * Unmounts a dynamic module from the SDK\n   *\n   * @param {string} moduleName The name of the dynamic module to unmount\n   */\n  unmountDynamicModule(moduleName) {\n    if (this._dynamicModuleNames.indexOf(moduleName) === -1) {\n      throw new Error('There is no external module to unmount.');\n    }\n\n    this.auth.clearCurrentApiToken(moduleName);\n    this.config.removeDynamicAudience(moduleName);\n\n    this[moduleName] = this._replacedModules[moduleName];\n\n    delete this._replacedModules[moduleName];\n    this._dynamicModuleNames = this._dynamicModuleNames.filter(\n      (name) => name !== moduleName\n    );\n  }\n\n  /**\n   * Returns a new instance of the session type requested\n   *\n   * @param {string} sessionType\n   *\n   * @returns {SessionType} sessionType\n   * @throws {Error}\n   *\n   * @private\n   */\n  _createAuthSession(sessionType) {\n    switch (sessionType) {\n      case sessionTypes.TYPES.AUTH0_WEB_AUTH:\n        return new sessionTypes.Auth0WebAuth(this);\n\n      case sessionTypes.TYPES.PASSWORD_GRANT_AUTH:\n        return new sessionTypes.PasswordGrantAuth(this);\n\n      case sessionTypes.TYPES.MACHINE_AUTH:\n        return new sessionTypes.MachineAuth(this);\n\n      default:\n        throw new Error('Invalid sessionType provided');\n    }\n  }\n\n  /**\n   * Returns an instance of the Request module that is tied to the requested audience\n   *\n   * @param {string} audienceName The audience name of the service you are trying to reach\n   *   (e.g. facilities or feeds)\n   *\n   * @returns {Object} Request module\n   *\n   * @private\n   */\n  _createRequest(audienceName) {\n    return new Request(this, audienceName);\n  }\n\n  /**\n   * Decorates custom modules onto the SDK instance so they behave as first-class citizens.\n   *\n   * @param {Object} modules\n   * @param {function} modules.module\n   *\n   * @private\n   */\n  _decorate(modules) {\n    Object.keys(modules).forEach((moduleName) => {\n      this[moduleName] = new modules[moduleName].module(\n        this,\n        this._createRequest(moduleName)\n      );\n    });\n  }\n}\n\nexport default ContxtSdk;\n"]}