{"version":3,"sources":["iot/fieldGroupings.js"],"names":["FieldGroupings","sdk","request","baseUrl","_baseUrl","_request","_sdk","fieldGroupingId","outputFieldId","errorMsg","Promise","reject","Error","post","then","grouping","facilityId","fieldGrouping","requiredFields","i","length","field","formattedGrouping","groupingId","delete","get","paginationOptions","params","update","formattedUpdate","excludeKeys","put"],"mappings":"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","file":"fieldGroupings.js","sourcesContent":["import isPlainObject from 'lodash.isplainobject';\nimport { toCamelCase, toSnakeCase } from '../utils/objects';\nimport { formatPaginatedDataFromServer } from '../utils/pagination';\n\n/**\n * @typedef {Object} FieldGrouping\n * @property {String} description\n * @property {String} [fieldCategoryId] UUID\n * @property {Number} facilityId\n * @property {String} id UUID\n * @property {Boolean} isPublic\n * @property {String} label\n * @property {String} ownerId\n * @property {String} slug\n */\n\n/**\n * @typedef {Object} FieldGroupingsFromServer\n * @property {Object} _metadata Metadata about the pagination settings\n * @property {number} _metadata.offset Offset of records in subsequent queries\n * @property {number} _metadata.totalRecords Total number of asset types found\n * @property {FieldGrouping[]} records\n */\n\n/**\n * @typedef {Object} FieldGroupingField\n * @param {string} createdAt ISO 8601 Extended Format date/time string\n * @param {string} fieldGroupingId UUID\n * @param {string} id UUID\n * @param {number} outputFieldId\n * @param {string} updatedAt ISO 8601 Extended Format date/time string\n */\n\n/**\n * Module that provides access to field information\n *\n * @typicalname contxtSdk.iot.fieldGroupings\n */\nclass FieldGroupings {\n  /**\n   * @param {Object} sdk An instance of the SDK so the module can communicate\n   *   with other modules\n   * @param {Object} request An instance of the request module tied to this\n   *   module's audience\n   * @param {string} baseUrl The base URL provided by the parent module\n   */\n  constructor(sdk, request, baseUrl) {\n    this._baseUrl = baseUrl;\n    this._request = request;\n    this._sdk = sdk;\n  }\n\n  /**\n   * Adds a field to a field grouping\n   *\n   * API Endpoint: '/groupings/:fieldGroupingId/fields/:outputFieldId'\n   * Method: POST\n   *\n   * @param {string} fieldGroupingId UUID corresponding with a field grouping\n   * @param {number} outputFieldId ID corresponding to the field being added\n   *\n   * @returns {Promise}\n   * @fulfill {FieldGroupingField} Information about the new field/grouping relationship\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.iot.fieldGroupings\n   *   .addField('b3dbaae3-25dd-475b-80dc-66296630a8d0', 4)\n   *   .then((grouping) => console.log(grouping))\n   *   .catch((err) => console.log(err));\n   */\n  addField(fieldGroupingId, outputFieldId) {\n    let errorMsg;\n\n    if (!fieldGroupingId) {\n      errorMsg =\n        'A fieldGroupingId is required to create a relationship between a field grouping and a field.';\n    } else if (!outputFieldId) {\n      errorMsg =\n        'A outputFieldId is required to create a relationship between a field grouping and a field.';\n    }\n\n    if (errorMsg) {\n      return Promise.reject(new Error(errorMsg));\n    }\n\n    return this._request\n      .post(\n        `${this._baseUrl}/groupings/${fieldGroupingId}/fields/${outputFieldId}`\n      )\n      .then((grouping) => toCamelCase(grouping));\n  }\n\n  /**\n   * Create a field grouping associated with a facility\n   *\n   * API Endpoint: '/facilities/:facilityId/groupings'\n   * Method: POST\n   *\n   * @param {String} facilityId TheID of a facility\n   * @param {Object} fieldGrouping\n   * @param {string} fieldGrouping.description\n   * @param {string} [fieldGrouping.fieldCategoryId]\n   * @param {boolean} [fieldGrouping.isPublic]\n   * @param {string} fieldGrouping.label\n   *\n   * @returns {Promise}\n   * @fulfill {FieldGrouping} Information about the field grouping\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.iot.fieldGroupings\n   *   .create(135, {\n   *      description: 'Power usage from all compressors in Room 2',\n   *      fieldCategoryId: 'e9f8f89c-609c-4c83-8ebc-cea928af661e',\n   *      isPublic: true,\n   *      label: 'Room 2 Compressors'\n   *   })\n   *   .then((fieldGrouping) => console.log(fieldGrouping))\n   *   .catch((err) => console.log(err));\n   */\n  create(facilityId, fieldGrouping) {\n    if (!facilityId) {\n      return Promise.reject(\n        new Error('A facilityId is required for creating a field grouping.')\n      );\n    }\n\n    const requiredFields = ['label', 'description'];\n\n    for (let i = 0; requiredFields.length > i; i++) {\n      const field = requiredFields[i];\n      if (!fieldGrouping[field]) {\n        return Promise.reject(\n          new Error(`A ${field} is required to create a new field grouping.`)\n        );\n      }\n    }\n\n    const formattedGrouping = toSnakeCase(fieldGrouping);\n\n    return this._request\n      .post(\n        `${this._baseUrl}/facilities/${facilityId}/groupings`,\n        formattedGrouping\n      )\n      .then((fieldGrouping) => toCamelCase(fieldGrouping));\n  }\n\n  /**\n   * Deletes a field grouping\n   *\n   * API Endpoint: '/groupings/:groupingId'\n   * Method: DELETE\n   *\n   * @param {String} groupingId The UUID of a field grouping\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.iot.fieldGroupings\n   *   .delete('b3dbaae3-25dd-475b-80dc-66296630a8d0');\n   */\n  delete(groupingId) {\n    if (!groupingId) {\n      return Promise.reject(\n        new Error('A groupingId is required for deleting a field grouping.')\n      );\n    }\n\n    return this._request.delete(`${this._baseUrl}/groupings/${groupingId}`);\n  }\n\n  /**\n   * Gets information about a field grouping\n   *\n   * API Endpoint: '/groupings/:groupingId'\n   * Method: GET\n   *\n   * @param {String} groupingId The UUID of a field grouping\n   *\n   * @returns {Promise}\n   * @fulfill {FieldGrouping} Information about the field grouping\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.iot.fieldGroupings\n   *   .get('b3dbaae3-25dd-475b-80dc-66296630a8d0')\n   *   .then((fieldGrouping) => console.log(fieldGrouping))\n   *   .catch((err) => console.log(err));\n   */\n  get(groupingId) {\n    if (!groupingId) {\n      return Promise.reject(\n        new Error(\n          'A groupingId is required for getting information about a field grouping.'\n        )\n      );\n    }\n\n    return this._request\n      .get(`${this._baseUrl}/groupings/${groupingId}`)\n      .then((fieldGrouping) => toCamelCase(fieldGrouping));\n  }\n\n  /**\n   * Get a paginated listing of field groupings for a facility available to the user. Includes public groupings across\n   * any organization the user has access to and the user's private groupings.\n   *\n   * API Endpoint: '/facilities/:facilityId/groupings'\n   * Method: GET\n   *\n   * @param {number} facilityId The ID of a facility with groupings\n   * @param {PaginationOptions} [paginationOptions]\n   *\n   * @returns {Promise}\n   * @fulfill {FieldGroupingsFromServer} Information about the field grouping\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.iot.fieldGroupings\n   *   .getGroupingsByFacilityId(135)\n   *   .then((fieldGroupings) => console.log(fieldGroupings))\n   *   .catch((err) => console.log(err));\n   */\n  getGroupingsByFacilityId(facilityId, paginationOptions) {\n    if (!facilityId) {\n      return Promise.reject(\n        new Error('A facilityId is required for getting all field groupings.')\n      );\n    }\n\n    return this._request\n      .get(`${this._baseUrl}/facilities/${facilityId}/groupings`, {\n        params: toSnakeCase(paginationOptions)\n      })\n      .then((fieldGrouping) => formatPaginatedDataFromServer(fieldGrouping));\n  }\n\n  /**\n   * Removes a field from a field grouping\n   *\n   * API Endpoint: '/groupings/:fieldGroupingId/fields/:outputFieldId'\n   * Method: DELETE\n   *\n   * @param {string} fieldGroupingId UUID corresponding with a field grouping\n   * @param {number} outputFieldId ID corresponding with the field\n   *\n   * @returns {Promise}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.iot.fieldGroupings\n   *   .removeField('b3dbaae3-25dd-475b-80dc-66296630a8d0', 4)\n   *   .catch((err) => console.log(err));\n   */\n  removeField(fieldGroupingId, outputFieldId) {\n    let errorMsg;\n\n    if (!fieldGroupingId) {\n      errorMsg =\n        'A fieldGroupingId is required to remove a relationship between a field grouping and a field.';\n    } else if (!outputFieldId) {\n      errorMsg =\n        'A outputFieldId is required to remove a relationship between a field grouping and a field.';\n    }\n\n    if (errorMsg) {\n      return Promise.reject(new Error(errorMsg));\n    }\n\n    return this._request.delete(\n      `${this._baseUrl}/groupings/${fieldGroupingId}/fields/${outputFieldId}`\n    );\n  }\n\n  /**\n   * Updates information about a field grouping\n   *\n   * API Endpoint: '/groupings/:groupingId'\n   * Method: PUT\n   *\n   * @param {String} groupingId The UUID of a field grouping\n   * @param {Object} update\n   * @param {string} [update.description]\n   * @param {string} [update.fieldCategoryId]\n   * @param {boolean} [update.isPublic]\n   * @param {string} [update.label]\n   *\n   * @returns {Promise}\n   * @fulfill {FieldGrouping} Information about the field grouping\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.iot.fieldGroupings\n   *   .update('b3dbaae3-25dd-475b-80dc-66296630a8d0', {\n   *      description: 'Power usage from all compressors in Room 2',\n   *      fieldCategoryId: 'e9f8f89c-609c-4c83-8ebc-cea928af661e',\n   *      isPublic: true,\n   *      label: 'Room 2 Compressors'\n   *   })\n   *   .then((fieldGrouping) => console.log(fieldGrouping))\n   *   .catch((err) => console.log(err));\n   */\n  update(groupingId, update) {\n    if (!groupingId) {\n      return Promise.reject(\n        new Error(\n          'A groupingId is required for getting information about a field grouping.'\n        )\n      );\n    }\n\n    if (!update) {\n      return Promise.reject(\n        new Error('An update is required to update a field grouping')\n      );\n    }\n\n    if (!isPlainObject(update)) {\n      return Promise.reject(\n        new Error(\n          'The field grouping update must be a well-formed object with the data you wish to update.'\n        )\n      );\n    }\n\n    const formattedUpdate = toSnakeCase(update, {\n      excludeKeys: ['facilityId', 'id', 'ownerId', 'slug']\n    });\n\n    return this._request\n      .put(`${this._baseUrl}/groupings/${groupingId}`, formattedUpdate)\n      .then((fieldGrouping) => toCamelCase(fieldGrouping));\n  }\n}\n\nexport default FieldGroupings;\n"]}