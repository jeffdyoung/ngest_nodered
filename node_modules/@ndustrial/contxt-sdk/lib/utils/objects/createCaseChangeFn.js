'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _map = require('./map');

var _map2 = _interopRequireDefault(_map);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Creates a function that can be used to change object keys.
 *
 * @param {Function} caseChangeFn A function used to change the case of keys in
 * the object/array. Can be one from [the NPM package `change-case`](https://github.com/blakeembrey/change-case)
 * or a custom function that follows the same API.
 *
 * @returns {Function}
 *
 * @private
 */
function createCaseChangeFn(caseChangeFn) {
  /*
   * Maps over an array or object and converts all the keys to a different
   * format
   *
   * @param {Object|Array} input The object or array to map over
   * @param {Object} [userOptions]
   * @param {Boolean} [userOptions.deep = true] Boolean indicating if only the first
   *   level should be mapped or if it should recursively map over nested
   *   objects/arrays
   * @param {String[]} [userOptions.excludeKeys] A list of keys that should not
   *   be included in the returned object
   * @param {String[]} [userOptions.excludeTransform] A list of keys that should
   *   not be transformed in the returned object
   *
   * @returns {Object|Array}
   *
   * @private
   */
  function changeCase() {
    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var userOptions = arguments[1];

    var options = _extends({
      deep: true,
      excludeKeys: [],
      excludeTransform: []
    }, userOptions);

    return (0, _map2.default)(input, function (value, key) {
      if (options.excludeKeys.indexOf(key) > -1) {
        return [value, '__MARKED_FOR_REMOVAL__'];
      }

      if (options.excludeTransform.indexOf(key) === -1) {
        key = caseChangeFn(key);
      }

      return [value, key];
    }, { deep: options.deep });
  }

  return function (input, options) {
    return Array.isArray(input) ? input.map(function (item) {
      return changeCase(item, options);
    }) : changeCase(input, options);
  };
}

exports.default = createCaseChangeFn;
//# sourceMappingURL=createCaseChangeFn.js.map
