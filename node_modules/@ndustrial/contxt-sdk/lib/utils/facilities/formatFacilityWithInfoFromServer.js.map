{"version":3,"sources":["utils/facilities/formatFacilityWithInfoFromServer.js"],"names":["formatFacilityWithInfoFromServer","input","formattedFacility","excludeKeys","Info","info"],"mappings":";;;;;;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA,SAASA,gCAAT,GAAsD;AAAA,MAAZC,KAAY,uEAAJ,EAAI;;AACpD,MAAMC,oBAAoB,0BAAYD,KAAZ,EAAmB;AAC3CE,iBAAa,CAAC,MAAD;AAD8B,GAAnB,CAA1B;;AAIA,MAAIF,MAAMG,IAAV,EAAgB;AACdF,sBAAkBG,IAAlB,GAAyBJ,MAAMG,IAA/B;AACD;;AAED,SAAOF,iBAAP;AACD;;kBAEcF,gC","file":"formatFacilityWithInfoFromServer.js","sourcesContent":["import { toCamelCase } from '../objects';\n\n/**\n * Normalizes the facility object returned from the API server\n *\n * @param {Object} input\n * @param {string} input.address1\n * @param {string} input.address2\n * @param {string} [input.asset_id] UUID corresponding with an asset\n * @param {string} input.city\n * @param {Object[]} [input.cost_centers]\n * @param {string} [input.cost_centers[].created_at] ISO 8601 Extended Format date/time string\n * @param {string} [input.cost_centers[].description]\n * @param {string} [input.cost_centers[].id]\n * @param {string} [input.cost_centers[].name]\n * @param {string} [input.cost_centers[].organization_id] UUID corresponding with an organization\n * @param {string} [input.cost_centers[].updated_at] ISO 8601 Extended Format date/time string\n * @param {string} input.created_at ISO 8601 Extended Format date/time string\n * @param {Object[]}[input.facility_groupings]\n * @param {string} [input.facility_groupings[].created_at] ISO 8601 Extended Format date/time string\n * @param {number} [input.facility_groupings[].facility_id] ID corresponding with the parent facility\n * @param {number} [input.facility_groupings[].id]\n * @param {string} [input.facility_groupings[].name]\n * @param {string} [input.facility_groupings[].updated_at] ISO 8601 Extended Format date/time string\n * @param {string} [input.geometry_id] UUID corresponding with a geometry\n * @param {number} input.id\n * @param {Object} [input.Info] User declared information\n * @param {string} input.name\n * @param {Object} [input.Organization]\n * @param {string} [input.Organization.created_at] ISO 8601 Extended Format date/time string\n * @param {string} [input.Organization.id] UUID\n * @param {string} [input.Organization.name]\n * @param {string} [input.Organization.updated_at]\n * @param {string} input.organization_id UUID corresponding with an organization\n * @param {string} [input.state]\n * @param {Object[]} [input.tags]\n * @param {string} [input.tags[].created_at] ISO 8601 Extended Format date/time string\n * @param {number} [input.tags[].facility_id] ID corresponding with the parent facility\n * @param {number} [input.tags[].id]\n * @param {string} [input.tags[].name]\n * @param {string} [input.tags[].updated_at] ISO 8601 Extended Format date/time string\n * @param {string} input.timezone An IANA Time Zone Database string, i.e. America/Los_Angeles\n * @param {string} [input.weather_location_id]\n * @param {string} [input.zip]\n *\n * @returns {Facility}\n *\n * @private\n */\nfunction formatFacilityWithInfoFromServer(input = {}) {\n  const formattedFacility = toCamelCase(input, {\n    excludeKeys: ['Info']\n  });\n\n  if (input.Info) {\n    formattedFacility.info = input.Info;\n  }\n\n  return formattedFacility;\n}\n\nexport default formatFacilityWithInfoFromServer;\n"]}