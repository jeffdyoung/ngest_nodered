{"version":3,"sources":["coordinator/applications.js"],"names":["Applications","sdk","request","baseUrl","organizationId","_baseUrl","_request","_sdk","_organizationId","applicationId","Promise","reject","Error","post","then","favoriteApplication","get","apps","map","app","favoriteApps","featuredApplications","groupings","delete"],"mappings":";;;;;;;;AAAA;;;;AAEA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;AAUA;;;;;;;;;;;;;;AAcA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;IAKMA,Y;AACJ;;;;;;AAMA,wBAAYC,GAAZ,EAAiBC,OAAjB,EAA0BC,OAA1B,EAA0D;AAAA,QAAvBC,cAAuB,uEAAN,IAAM;;AAAA;;AACxD,SAAKC,QAAL,GAAgBF,OAAhB;AACA,SAAKG,QAAL,GAAgBJ,OAAhB;AACA,SAAKK,IAAL,GAAYN,GAAZ;AACA,SAAKO,eAAL,GAAuBJ,cAAvB;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;gCAoBYK,a,EAAe;AACzB,UAAI,CAACA,aAAL,EAAoB;AAClB,eAAOC,QAAQC,MAAR,CACL,IAAIC,KAAJ,CACE,mEADF,CADK,CAAP;AAKD;;AAED,aAAO,KAAKN,QAAL,CACJO,IADI,CACI,KAAKR,QADT,sBACkCI,aADlC,iBAEJK,IAFI,CAEC,UAACC,mBAAD;AAAA,eAAyB,0BAAYA,mBAAZ,CAAzB;AAAA,OAFD,CAAP;AAGD;;AAED;;;;;;;;;;;;;;;;;;;6BAgBS;AACP,aAAO,KAAKT,QAAL,CACJU,GADI,CACG,KAAKX,QADR,oBAEJS,IAFI,CAEC,UAACG,IAAD;AAAA,eAAUA,KAAKC,GAAL,CAAS,UAACC,GAAD;AAAA,iBAAS,0BAAYA,GAAZ,CAAT;AAAA,SAAT,CAAV;AAAA,OAFD,CAAP;AAGD;;AAED;;;;;;;;;;;;;;;;;;;;;mCAkBe;AACb,aAAO,KAAKb,QAAL,CACJU,GADI,CACG,KAAKX,QADR,8BAEJS,IAFI,CAEC,UAACM,YAAD;AAAA,eAAkB,0BAAYA,YAAZ,CAAlB;AAAA,OAFD,CAAP;AAGD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;gCAqBYhB,c,EAAgB;AAC1B,UAAI,KAAKI,eAAT,EAA0B;AACxB,eAAO,KAAKF,QAAL,CACJU,GADI,CACG,KAAKX,QADR,6BAEJS,IAFI,CAEC,UAACO,oBAAD;AAAA,iBAA0B,0BAAYA,oBAAZ,CAA1B;AAAA,SAFD,CAAP;AAGD;;AAED,UAAI,CAACjB,cAAL,EAAqB;AACnB,eAAOM,QAAQC,MAAR,CACL,IAAIC,KAAJ,CACE,sFADF,CADK,CAAP;AAKD;;AAED,aAAO,KAAKN,QAAL,CACJU,GADI,CAEA,KAAKX,QAFL,uBAE+BD,cAF/B,6BAIJU,IAJI,CAIC,UAACO,oBAAD;AAAA,eAA0B,0BAAYA,oBAAZ,CAA1B;AAAA,OAJD,CAAP;AAKD;;AAED;;;;;;;;;;;;;;;;;;;;;;iCAmBaZ,a,EAAe;AAC1B,aAAO,KAAKH,QAAL,CACJU,GADI,CACG,KAAKX,QADR,sBACiCI,aADjC,iBAEJK,IAFI,CAEC,UAACQ,SAAD;AAAA,eAAe,0BAAYA,SAAZ,CAAf;AAAA,OAFD,CAAP;AAGD;;AAED;;;;;;;;;;;;;;;;;;;;;;mCAmBeb,a,EAAe;AAC5B,UAAI,CAACA,aAAL,EAAoB;AAClB,eAAOC,QAAQC,MAAR,CACL,IAAIC,KAAJ,CACE,mEADF,CADK,CAAP;AAKD;;AAED,aAAO,KAAKN,QAAL,CAAciB,MAAd,CACF,KAAKlB,QADH,sBAC4BI,aAD5B,gBAAP;AAGD;;;;;;kBAGYT,Y","file":"applications.js","sourcesContent":["import { toCamelCase } from '../utils/objects';\n\n/**\n * @typedef {Object} ContxtApplication\n * @property {string} clientId\n * @property {string} clientSecret\n * @property {string} createdAt ISO 8601 Extended Format date/time string\n * @property {string} currentVersionId\n * @property {string} description\n * @property {string} iconUrl\n * @property {number} id\n * @property {string} name\n * @property {number} serviceId\n * @property {string} type\n * @property {string} updatedAt ISO 8601 Extended Format date/time string\n */\n\n/**\n * @typedef {Object} ContxtApplicationGrouping\n * @property {number} applicationId\n * @property {ContxtApplicationModule[]} applicationModules\n * @property {string} id\n * @property {number} index The position of the grouping within the list of all\n *   groupings of a the parent application\n * @property {string} label\n */\n\n/**\n * @typedef {Object} ContxtApplicationModule\n * @property {string} applicationGroupingId\n * @property {string} [externalLink] A URI pointing to an external application\n * @property {string} [iconUrl] A URI pointing to an icon/image representing the\n *   application module\n * @property {string} id\n * @property {number} index The position of the module within the list of all\n *   modules of a the parent application grouping\n * @property {string} label\n * @property {string} slug String that corresponds with a front-end package\n *   name (e.g. the `@ndustrial/nsight-example` example application)\n */\n\n/**\n * @typedef {Object} ContxtOrganizationFeaturedApplication\n * @property {number} applicationId\n * @property {string} createdAt ISO 8601 Extended Format date/time string\n * @property {string} id\n * @property {string} organizationId\n * @property {string} updatedAt ISO 8601 Extended Format date/time string\n */\n\n/**\n * @typedef {Object} ContxtUserFavoriteApplication\n * @property {number} applicationId\n * @property {string} createdAt ISO 8601 Extended Format date/time string\n * @property {string} id\n * @property {string} updatedAt ISO 8601 Extended Format date/time string\n * @property {string} userId\n */\n\n/**\n * Module that provides access to contxt applications\n *\n * @typicalname contxtSdk.coordinator.applications\n */\nclass Applications {\n  /**\n   * @param {Object} sdk An instance of the SDK so the module can communicate with other modules\n   * @param {Object} request An instance of the request module tied to this module's audience.\n   * @param {string} baseUrl The base URL provided by the parent module\n   * @param {string} [organizationId] The organization ID to be used in tenant url requests\n   */\n  constructor(sdk, request, baseUrl, organizationId = null) {\n    this._baseUrl = baseUrl;\n    this._request = request;\n    this._sdk = sdk;\n    this._organizationId = organizationId;\n  }\n\n  /**\n   * Adds an application to the current user's list of favorited applications\n   *\n   * API Endpoint: '/applications/:applicationId/favorites'\n   * Method: POST\n   *\n   * Note: Only valid for web users using auth0WebAuth session type\n   *\n   * @param {number} applicationId The ID of the application\n   *\n   * @returns {Promise}\n   * @fulfill {ContxtUserFavoriteApplication} Information about the contxt application favorite\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.coordinator.applications\n   *   .addFavorite(25)\n   *   .then((favoriteApplication) => console.log(favoriteApplication))\n   *   .catch((err) => console.log(err));\n   */\n  addFavorite(applicationId) {\n    if (!applicationId) {\n      return Promise.reject(\n        new Error(\n          'An application ID is required for creating a favorite application'\n        )\n      );\n    }\n\n    return this._request\n      .post(`${this._baseUrl}/applications/${applicationId}/favorites`)\n      .then((favoriteApplication) => toCamelCase(favoriteApplication));\n  }\n\n  /**\n   * Gets information about all contxt applications\n   *\n   * API Endpoint: '/applications'\n   * Method: GET\n   *\n   * @returns {Promise}\n   * @fulfill {ContxtApplication[]} Information about all contxt applications\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.coordinator.applications\n   *   .getAll()\n   *   .then((apps) => console.log(apps))\n   *   .catch((err) => console.log(err));\n   */\n  getAll() {\n    return this._request\n      .get(`${this._baseUrl}/applications`)\n      .then((apps) => apps.map((app) => toCamelCase(app)));\n  }\n\n  /**\n   * Gets the current user's list of favorited applications\n   *\n   * API Endpoint: '/applications/favorites'\n   * Method: GET\n   *\n   * Note: Only valid for web users using auth0WebAuth session type\n   *\n   * @returns {Promise}\n   * @fulfill {ContxtUserFavoriteApplication[]} A list of favorited applications\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.coordinator.applications\n   *   .getFavorites()\n   *   .then((favoriteApplications) => console.log(favoriteApplications))\n   *   .catch((err) => console.log(err));\n   */\n  getFavorites() {\n    return this._request\n      .get(`${this._baseUrl}/applications/favorites`)\n      .then((favoriteApps) => toCamelCase(favoriteApps));\n  }\n\n  /**\n   * Gets an organization's list of featured applications\n   *\n   * Legacy API Endpoint: '/organizations/:organizationId/applications/featured'\n   * API Endpoint: '/applications/featured'\n   * Method: GET\n   *\n   * Note: Only valid for web users using auth0WebAuth session type\n   *\n   * @param {string} organizationId The ID of the organization, optional when using the tenant API and an organization ID has been set\n   *\n   * @returns {Promise}\n   * @fulfill {ContxtOrganizationFeaturedApplication[]} A list of featured applications\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.coordinator.applications\n   *   .getFeatured('36b8421a-cc4a-4204-b839-1397374fb16b')\n   *   .then((featuredApplications) => console.log(featuredApplications))\n   *   .catch((err) => console.log(err));\n   */\n  getFeatured(organizationId) {\n    if (this._organizationId) {\n      return this._request\n        .get(`${this._baseUrl}/applications/featured`)\n        .then((featuredApplications) => toCamelCase(featuredApplications));\n    }\n\n    if (!organizationId) {\n      return Promise.reject(\n        new Error(\n          'An organization ID is required for getting featured applications for an organization'\n        )\n      );\n    }\n\n    return this._request\n      .get(\n        `${this._baseUrl}/organizations/${organizationId}/applications/featured`\n      )\n      .then((featuredApplications) => toCamelCase(featuredApplications));\n  }\n\n  /**\n   * Gets the application groupings (and application modules) of an application\n   * that are available to the currently authenticated user.\n   *\n   * API Endpoint: '/applications/:applicationId/groupings'\n   * Method: GET\n   *\n   * @param {number} applicationId\n   *\n   * @returns {Promise}\n   * @fulfill {ContxtApplicationGrouping[]}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.coordinator.applications\n   *   .getGroupings(31)\n   *   .then((applicationGroupings) => console.log(applicationGroupings))\n   *   .catch((err) => console.log(err));\n   */\n  getGroupings(applicationId) {\n    return this._request\n      .get(`${this._baseUrl}/applications/${applicationId}/groupings`)\n      .then((groupings) => toCamelCase(groupings));\n  }\n\n  /**\n   * Removes an application from the current user's list of favorited applications\n   *\n   * API Endpoint: '/applications/:applicationId/favorites'\n   * Method: DELETE\n   *\n   * Note: Only valid for web users using auth0WebAuth session type\n   *\n   * @param {number} applicationId The ID of the application\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.coordinator.applications\n   *   .removeFavorite(25)\n   *   .catch((err) => console.log(err));\n   */\n  removeFavorite(applicationId) {\n    if (!applicationId) {\n      return Promise.reject(\n        new Error(\n          'An application ID is required for deleting a favorite application'\n        )\n      );\n    }\n\n    return this._request.delete(\n      `${this._baseUrl}/applications/${applicationId}/favorites`\n    );\n  }\n}\n\nexport default Applications;\n"]}