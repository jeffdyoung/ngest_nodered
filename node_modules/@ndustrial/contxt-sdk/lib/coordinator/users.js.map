{"version":3,"sources":["coordinator/users.js"],"names":["Users","sdk","request","baseUrl","organizationId","_baseUrl","_request","_sdk","_organizationId","userId","user","Promise","reject","Error","requiredFields","i","length","field","axios","post","applicationId","then","response","roleId","stackId","accessType","indexOf","access_type","get","orgUsers","delete"],"mappings":"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","file":"users.js","sourcesContent":["import axios from 'axios';\n\nimport { toCamelCase, toSnakeCase } from '../utils/objects';\n\n/**\n * @typedef {Object} ContxtUser\n * @property {string} createdAt ISO 8601 Extended Format date/time string\n * @property {string} email\n * @property {string} firstName\n * @property {string} id\n * @property {boolean} isActivated\n * @property {boolean} isSuperuser\n * @property {string} lastName\n * @property {string} [phoneNumber]\n * @property {string} updatedAt ISO 8601 Extended Format date/time string\n */\n\n/**\n * @typedef {Object} ContxtUserApplication\n * @property {string} applicationId\n * @property {string} createdAt ISO 8601 Extended Format date/time string\n * @property {string} id\n * @property {string} userId\n * @property {string} updatedAt ISO 8601 Extended Format date/time string\n */\n\n/**\n * @typedef {Object} ContxtUserRole\n * @property {string} createdAt ISO 8601 Extended Format date/time string\n * @property {string} id\n * @property {boolean} mappedFromExternalGroup\n * @property {string} userId\n * @property {string} roleId\n * @property {string} updatedAt ISO 8601 Extended Format date/time string\n */\n\n/**\n * @typedef {Object} ContxtUserStack\n * @property {string} accessType Access Type of the user for this stack with options \"reader\", \"collaborator\", \"owner\"\n * @property {string} createdAt ISO 8601 Extended Format date/time string\n * @property {string} id\n * @property {string} userId\n * @property {string} stackId\n * @property {string} updatedAt ISO 8601 Extended Format date/time string\n */\n\n/**\n * Module that provides access to contxt users\n *\n * @typicalname contxtSdk.coordinator.users\n */\nclass Users {\n  /**\n   * @param {Object} sdk An instance of the SDK so the module can communicate with other modules\n   * @param {Object} request An instance of the request module tied to this module's audience.\n   * @param {string} baseUrl The base URL provided by the parent module\n   * @param {string} [organizationId] The organization ID to be used in tenant url requests\n   */\n  constructor(sdk, request, baseUrl, organizationId = null) {\n    this._baseUrl = baseUrl;\n    this._request = request;\n    this._sdk = sdk;\n    this._organizationId = organizationId;\n  }\n\n  /**\n   * Activates a new user\n   *\n   * API Endpoint: '/users/:userId/activate'\n   * Method: POST\n   *\n   * Note: Only valid for web users using auth0WebAuth session type\n   *\n   * @param {string} userId The ID of the user to activate\n   * @param {Object} user\n   * @param {string} user.email The email address of the user\n   * @param {string} user.password The password to set for the user\n   * @param {string} user.userToken The JWT token provided by the invite link\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.coordinator.users\n   *   .activate('7bb79bdf-7492-45c2-8640-2dde63535827', {\n   *     email: 'bob.sagat56@gmail.com',\n   *     password: 'ds32jX32jaMM1Nr',\n   *     userToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'\n   *   })\n   *   .then(() => console.log(\"User Activated\"))\n   *   .catch((err) => console.log(err));\n   */\n  activate(userId, user = {}) {\n    if (!userId) {\n      return Promise.reject(\n        new Error('A user ID is required for activating a user')\n      );\n    }\n\n    const requiredFields = ['email', 'password', 'userToken'];\n\n    for (let i = 0; requiredFields.length > i; i++) {\n      const field = requiredFields[i];\n\n      if (!user[field]) {\n        return Promise.reject(\n          new Error(`A ${field} is required to activate a user.`)\n        );\n      }\n    }\n\n    // Uses axios directly instead of this.request to bypass authorization interceptors\n    return axios.post(\n      `${this._baseUrl}/users/${userId}/activate`,\n      toSnakeCase(user)\n    );\n  }\n\n  /**\n   * Adds a application to a user\n   *\n   * API Endpoint: '/users/:userId/applications/:applicationId'\n   * Method: GET\n   *\n   * @param {string} userId The ID of the user\n   * @param {string} applicationId The ID of the application\n   *\n   * @returns {Promise}\n   * @fulfill {ContxtUserApplication} The newly created user application\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.coordinator.users\n   *   .addApplication('36b8421a-cc4a-4204-b839-1397374fb16b', '007ca9ee-ece7-4931-9d11-9b4fd97d4d58')\n   *   .then((userApplication) => console.log(userApplication))\n   *   .catch((err) => console.log(err));\n   */\n  addApplication(userId, applicationId) {\n    if (!userId) {\n      return Promise.reject(\n        new Error('A user ID is required for adding a application to a user')\n      );\n    }\n\n    if (!applicationId) {\n      return Promise.reject(\n        new Error(\n          'An application ID is required for adding a application to a user'\n        )\n      );\n    }\n\n    return this._request\n      .post(`${this._baseUrl}/users/${userId}/applications/${applicationId}`)\n      .then((response) => toCamelCase(response));\n  }\n\n  /**\n   * Adds a role to a user\n   *\n   * API Endpoint: '/users/:userId/roles/:roleId'\n   * Method: POST\n   *\n   * @param {string} userId The ID of the user\n   * @param {string} roleId The ID of the role\n   *\n   * @returns {Promise}\n   * @fulfill {ContxtUserRole} The newly created user role\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.coordinator.users\n   *   .addRole('36b8421a-cc4a-4204-b839-1397374fb16b', '007ca9ee-ece7-4931-9d11-9b4fd97d4d58')\n   *   .then((userRole) => console.log(userRole))\n   *   .catch((err) => console.log(err));\n   */\n  addRole(userId, roleId) {\n    if (!userId) {\n      return Promise.reject(\n        new Error('A user ID is required for adding a role to a user')\n      );\n    }\n\n    if (!roleId) {\n      return Promise.reject(\n        new Error('A role ID is required for adding a role to a user')\n      );\n    }\n\n    return this._request\n      .post(`${this._baseUrl}/users/${userId}/roles/${roleId}`)\n      .then((response) => toCamelCase(response));\n  }\n\n  /**\n   * Adds a stack to a user\n   *\n   * API Endpoint: '/users/:userId/stacks/:stackId'\n   * Method: POST\n   *\n   * @param {string} userId The ID of the user\n   * @param {string} stackId The ID of the stack\n   * @param {'reader' | 'collaborator' | 'owner'} accessType The level of access for the user\n   *\n   * @returns {Promise}\n   * @fulfill {ContxtUserStack} The newly created user stack\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.coordinator.users\n   *   .addStack('36b8421a-cc4a-4204-b839-1397374fb16b', '007ca9ee-ece7-4931-9d11-9b4fd97d4d58', 'collaborator')\n   *   .then((userStack) => console.log(userStack))\n   *   .catch((err) => console.log(err));\n   */\n  addStack(userId, stackId, accessType) {\n    if (!userId) {\n      return Promise.reject(\n        new Error('A user ID is required for adding a stack to a user')\n      );\n    }\n\n    if (!stackId) {\n      return Promise.reject(\n        new Error('A stack ID is required for adding a stack to a user')\n      );\n    }\n\n    if (['reader', 'collaborator', 'owner'].indexOf(accessType) === -1) {\n      return Promise.reject(\n        new Error(\n          'An access type of \"reader\", \"collaborator\", or \"owner\" is required for adding a stack to a user'\n        )\n      );\n    }\n\n    return this._request\n      .post(`${this._baseUrl}/users/${userId}/stacks/${stackId}`, {\n        access_type: accessType\n      })\n      .then((response) => toCamelCase(response));\n  }\n\n  /**\n   * Gets information about a contxt user\n   *\n   * API Endpoint: '/users/:userId'\n   * Method: GET\n   *\n   * @param {string} userId The ID of the user\n   *\n   * @returns {Promise}\n   * @fulfill {ContxtUser} Information about a contxt user\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.coordinator.users\n   *   .get('auth0|12345')\n   *   .then((user) => console.log(user))\n   *   .catch((err) => console.log(err));\n   */\n  get(userId) {\n    if (!userId) {\n      return Promise.reject(\n        new Error('A user ID is required for getting information about a user')\n      );\n    }\n\n    return this._request\n      .get(`${this._baseUrl}/users/${userId}`)\n      .then((user) => toCamelCase(user));\n  }\n\n  /**\n   * Gets a list of users for a contxt organization\n   *\n   * Legacy API Endpoint: '/organizations/:organizationId/users'\n   * API Endpoint: '/users'\n   * Method: GET\n   *\n   * @param {string} organizationId The ID of the organization, optional when using the tenant API and an organization ID has been set\n   *\n   * @returns {Promise}\n   * @fulfill {ContxtUser[]} List of users for a contxt organization\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.coordinator.users\n   *   .getByOrganizationId('36b8421a-cc4a-4204-b839-1397374fb16b')\n   *   .then((orgUsers) => console.log(orgUsers))\n   *   .catch((err) => console.log(err));\n   */\n  getByOrganizationId(organizationId) {\n    if (this._organizationId) {\n      return this._request\n        .get(`${this._baseUrl}/users`)\n        .then((orgUsers) => toCamelCase(orgUsers));\n    }\n\n    if (!organizationId) {\n      return Promise.reject(\n        new Error(\n          'An organization ID is required for getting a list of users for an organization'\n        )\n      );\n    }\n\n    return this._request\n      .get(`${this._baseUrl}/organizations/${organizationId}/users`)\n      .then((orgUsers) => toCamelCase(orgUsers));\n  }\n\n  /**\n   * Creates a new contxt user, adds them to an organization, and\n   * sends them an email invite link to do final account setup.\n   *\n   * Legacy API Endpoint: '/organizations/:organizationId/users'\n   * API Endpoint: '/users'\n   * Method: POST\n   *\n   * Note: Only valid for web users using auth0WebAuth session type\n   *\n   * @param {string} organizationId The ID of the organization, optional when using the tenant API and an organization ID has been set\n   * @param {Object} user\n   * @param {string} user.email The email address of the new user\n   * @param {string} user.firstName The first name of the new user\n   * @param {string} user.lastName The last name of the new user\n   * @param {string} user.redirectUrl The url that the user will be redirected\n   * to after using the invite email link. Typically this is an /activate\n   * endpoint that accepts url query params userToken and userId and uses them\n   * to do final activation on the user's account.\n   *\n   * @returns {Promise}\n   * @fulfill {ContxtUser} The new user\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.coordinator.users\n   *   .invite('fdf01507-a26a-4dfe-89a2-bc91861169b8', {\n   *     email: 'bob.sagat56@gmail.com',\n   *     firstName: 'Bob',\n   *     lastName: 'Sagat',\n   *     redirectUrl: 'https://contxt.ndustrial.io/activate'\n   *   })\n   *   .then((newUser) => console.log(newUser))\n   *   .catch((err) => console.log(err));\n   */\n  invite(organizationId, user = {}) {\n    if (this._organizationId) {\n      const requiredFields = ['email', 'firstName', 'lastName', 'redirectUrl'];\n\n      for (let i = 0; requiredFields.length > i; i++) {\n        const field = requiredFields[i];\n\n        if (!user[field]) {\n          return Promise.reject(\n            new Error(`A ${field} is required to create a new user.`)\n          );\n        }\n      }\n\n      return this._request\n        .post(`${this._baseUrl}/users`, toSnakeCase(user))\n        .then((response) => toCamelCase(response));\n    }\n\n    if (!organizationId) {\n      return Promise.reject(\n        new Error('An organization ID is required for inviting a new user')\n      );\n    }\n\n    const requiredFields = ['email', 'firstName', 'lastName', 'redirectUrl'];\n\n    for (let i = 0; requiredFields.length > i; i++) {\n      const field = requiredFields[i];\n\n      if (!user[field]) {\n        return Promise.reject(\n          new Error(`A ${field} is required to create a new user.`)\n        );\n      }\n    }\n\n    return this._request\n      .post(\n        `${this._baseUrl}/organizations/${organizationId}/users`,\n        toSnakeCase(user)\n      )\n      .then((response) => toCamelCase(response));\n  }\n\n  /**\n   * Removes a user from an organization\n   *\n   * Legacy API Endpoint: '/organizations/:organizationId/users/:userId'\n   * API Endpoint: '/users/:userId'\n   * Method: DELETE\n   *\n   * @param {string} organizationId The ID of the organization, optional when using the tenant API and an organization ID has been set\n   * @param {string} userId The ID of the user\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.coordinator.users\n   *   .remove('ed2e8e24-79ef-4404-bf5f-995ef31b2298', '4a577e87-7437-4342-b183-00c18ec26d52')\n   *   .catch((err) => console.log(err));\n   */\n  remove(organizationId, userId) {\n    if (this._organizationId) {\n      if (!userId) {\n        return Promise.reject(\n          new Error(\n            'A user ID is required for removing a user from an organization'\n          )\n        );\n      }\n\n      return this._request.delete(`${this._baseUrl}/users/${userId}`);\n    }\n\n    if (!organizationId) {\n      return Promise.reject(\n        new Error(\n          'An organization ID is required for removing a user from an organization'\n        )\n      );\n    }\n\n    if (!userId) {\n      return Promise.reject(\n        new Error(\n          'A user ID is required for removing a user from an organization'\n        )\n      );\n    }\n\n    return this._request.delete(\n      `${this._baseUrl}/organizations/${organizationId}/users/${userId}`\n    );\n  }\n\n  /**\n   * Removes a application from a user\n   *\n   * API Endpoint: '/users/:userId/applications/:applicationId'\n   * Method: DELETE\n   *\n   * @param {string} userId The ID of the user\n   * @param {string} applicationId The ID of the application\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.coordinator.users\n   *   .removeApplication('36b8421a-cc4a-4204-b839-1397374fb16b', '007ca9ee-ece7-4931-9d11-9b4fd97d4d58')\n   *   .catch((err) => console.log(err));\n   */\n  removeApplication(userId, applicationId) {\n    if (!userId) {\n      return Promise.reject(\n        new Error(\n          'A user ID is required for removing a application from a user'\n        )\n      );\n    }\n\n    if (!applicationId) {\n      return Promise.reject(\n        new Error(\n          'An application ID is required for removing a application from a user'\n        )\n      );\n    }\n\n    return this._request.delete(\n      `${this._baseUrl}/users/${userId}/applications/${applicationId}`\n    );\n  }\n\n  /**\n   * Removes a role from a user\n   *\n   * API Endpoint: '/users/:userId/roles/:roleId'\n   * Method: DELETE\n   *\n   * @param {string} userId The ID of the user\n   * @param {string} roleId The ID of the role\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.coordinator.users\n   *   .removeRole('36b8421a-cc4a-4204-b839-1397374fb16b', '007ca9ee-ece7-4931-9d11-9b4fd97d4d58')\n   *   .catch((err) => console.log(err));\n   */\n  removeRole(userId, roleId) {\n    if (!userId) {\n      return Promise.reject(\n        new Error('A user ID is required for removing a role from a user')\n      );\n    }\n\n    if (!roleId) {\n      return Promise.reject(\n        new Error('A role ID is required for removing a role from a user')\n      );\n    }\n\n    return this._request.delete(\n      `${this._baseUrl}/users/${userId}/roles/${roleId}`\n    );\n  }\n\n  /**\n   * Removes a stack from a user\n   *\n   * API Endpoint: '/users/:userId/stacks/:stackId'\n   * Method: DELETE\n   *\n   * @param {string} userId The ID of the user\n   * @param {string} stackId The ID of the stack\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.coordinator.users\n   *   .removeStack('36b8421a-cc4a-4204-b839-1397374fb16b', '007ca9ee-ece7-4931-9d11-9b4fd97d4d58')\n   *   .catch((err) => console.log(err));\n   */\n  removeStack(userId, stackId) {\n    if (!userId) {\n      return Promise.reject(\n        new Error('A user ID is required for removing a stack from a user')\n      );\n    }\n\n    if (!stackId) {\n      return Promise.reject(\n        new Error('A stack ID is required for removing a stack from a user')\n      );\n    }\n\n    return this._request.delete(\n      `${this._baseUrl}/users/${userId}/stacks/${stackId}`\n    );\n  }\n\n  /**\n   * Syncs the user's roles and application access with the external auth provider\n   *\n   * API Endpoint: '/users/:userId/sync'\n   * Method: GET\n   *\n   * @param {string} userId The ID of the user\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.coordinator.users\n   *   .sync('36b8421a-cc4a-4204-b839-1397374fb16b')\n   *   .catch((err) => console.log(err));\n   */\n  sync(userId) {\n    if (!userId) {\n      return Promise.reject(\n        new Error('A user ID is required for syncing user permissions')\n      );\n    }\n\n    return this._request.get(`${this._baseUrl}/users/${userId}/sync`);\n  }\n}\n\nexport default Users;\n"]}