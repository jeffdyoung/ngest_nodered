'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _objects = require('../utils/objects');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @typedef {Object} ContxtOrganization
 * @property {string} createdAt ISO 8601 Extended Format date/time string
 * @property {string} id UUID formatted ID
 * @property {number} legacyOrganizationId
 * @property {string} name
 * @property {string} updatedAt ISO 8601 Extended Format date/time string
 */

/**
 * Module that provides access to contxt organizations
 *
 * @typicalname contxtSdk.coordinator.organizations
 */
var Organizations = function () {
  /**
   * @param {Object} sdk An instance of the SDK so the module can communicate with other modules
   * @param {Object} request An instance of the request module tied to this module's audience.
   * @param {string} baseUrl The base URL provided by the parent module
   * @param {string} [organizationId] The organization ID to be used in tenant url requests
   */
  function Organizations(sdk, request, baseUrl) {
    var organizationId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

    _classCallCheck(this, Organizations);

    this._baseUrl = baseUrl;
    this._request = request;
    this._sdk = sdk;
    this._organizationId = organizationId;
  }

  /**
   * Gets information about a contxt organization
   *
   * Legacy API Endpoint: '/organizations/:organizationId'
   * API Endpoint: '/'
   * Method: GET
   *
   * @param {string} organizationId The ID of the organization, optional when using the tenant API and an organization ID has been set
   *
   * @returns {Promise}
   * @fulfill {ContxtOrganization} Information about a contxt organization
   * @reject {Error}
   *
   * @example
   * contxtSdk.coordinator.organizations
   *   .get('36b8421a-cc4a-4204-b839-1397374fb16b')
   *   .then((org) => console.log(org))
   *   .catch((err) => console.log(err));
   */


  _createClass(Organizations, [{
    key: 'get',
    value: function get(organizationId) {
      if (this._organizationId) {
        return this._request.get('' + this._baseUrl).then(function (org) {
          return (0, _objects.toCamelCase)(org);
        });
      }

      if (!organizationId) {
        return Promise.reject(new Error('An organization ID is required for getting information about an organization'));
      }

      return this._request.get(this._baseUrl + '/organizations/' + organizationId).then(function (org) {
        return (0, _objects.toCamelCase)(org);
      });
    }

    /**
     * Gets information about all contxt organizations
     *
     * API Endpoint: '/organizations'
     * Method: GET
     *
     * @returns {Promise}
     * @fulfill {ContxtOrganization[]} Information about all contxt organizations
     * @reject {Error}
     *
     * @example
     * contxtSdk.coordinator.organizations
     *   .getAll()
     *   .then((orgs) => console.log(orgs))
     *   .catch((err) => console.log(err));
     */

  }, {
    key: 'getAll',
    value: function getAll() {
      return this._request.get(this._baseUrl + '/organizations').then(function (orgs) {
        return orgs.map(function (org) {
          return (0, _objects.toCamelCase)(org);
        });
      });
    }
  }]);

  return Organizations;
}();

exports.default = Organizations;
//# sourceMappingURL=organizations.js.map
