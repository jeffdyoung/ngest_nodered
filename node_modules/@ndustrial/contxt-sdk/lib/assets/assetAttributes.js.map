{"version":3,"sources":["assets/assetAttributes.js"],"names":["AssetAttributes","sdk","request","baseUrl","_baseUrl","_request","_sdk","assetTypeId","assetAttribute","hasFieldFns","default","object","key","organizationId","requiredFields","Promise","reject","Error","i","length","field","hasField","post","then","assetAttributeId","delete","get","paginationOptions","params","assetAttributeData","update","formattedUpdate","excludeKeys","put","assetId","assetAttributeValue","assetAttributeValueId","assetAttributeFilters","assetAttributeValues","assetAttributeValueData"],"mappings":"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","file":"assetAttributes.js","sourcesContent":["import has from 'lodash.has';\nimport isPlainObject from 'lodash.isplainobject';\nimport { toCamelCase, toSnakeCase } from '../utils/objects';\nimport { formatPaginatedDataFromServer } from '../utils/pagination';\n\n/**\n * @typedef {Object} PaginationMetadata\n * @property {number} offset Offset of records in subsequent queries\n * @property {number} totalRecords Total number of asset attributes found\n */\n\n/**\n * @typedef {Object} PaginationOptions\n * @property {Number} limit Maximum number of records to return per query\n * @property {Number} offset How many records from the first record to start\n *   the query\n */\n\n/**\n * @typedef {Object} AssetAttribute\n * @property {string} assetTypeId UUID corresponding with the asset type\n * @property {string} createdAt ISO 8601 Extended Format date/time string\n * @property {string} dataType Data Type of attribute with options \"boolean\", \"date\", \"number\", \"string\"\n * @property {string} description\n * @property {string} id UUID\n * @property {boolean} isRequired\n * @property {string} label\n * @property {string} organizationId UUID corresponding with the organization\n * @property {string} [units]\n * @property {string} updatedAt ISO 8601 Extended Format date/time string\n */\n\n/**\n * @typedef {Object} AssetAttributeData\n * @property {PaginationMetadata} _metadata Metadata about the pagination settings\n * @property {AssetAttribute[]} records\n */\n\n/**\n * @typedef {Object} AssetAttributeValue\n * @property {Object} [asset] The associated parent asset. Will always be\n *   present if retrieving more than one AssetAttributeValue.\n * @property {string} [asset.label] Label of the parent asset. Will always be\n *   present if retrieving more than one AssetAttributeValue.\n * @property {Object} [assetAttribute] The associated parent assetAttribute.\n *   Will always be present if retrieving more than one AssetAttributeValue.\n * @property {boolean} [assetAttribute.isRequired] Indication of required status\n *   for the parent asset attribute. Will always be present if retrieving more\n *   than one AssetAttributeValue.\n * @property {string} [assetAttribute.label] Label of the parent assetAttribute.\n *   Will always be present if retrieving more than one AssetAttributeValue.\n * @property {string} [assetAttribute.units] Units of the parent assetAttribute.\n *   Will always be present if retrieving more than one AssetAttributeValue.\n * @property {string} assetAttributeId UUID corresponding to the assetAttribute\n * @property {string} assetId UUID corresponding to the asset\n * @property {string} createdAt ISO 8601 Extended Format date/time string\n * @property {string} effectiveDate ISO 8601 Extended Format date/time string\n * @property {string} id UUID\n * @property {string} [notes]\n * @property {string} updatedAt ISO 8601 Extended Format date/time string\n * @property {string} value\n */\n\n/**\n * @typedef {Object} AssetAttributeValueData\n * @property {PaginationMetadata} _metadata Metadata about the pagination settings\n * @property {AssetAttributeValue[]} records\n */\n\n/**\n * Module that provides access to, and the manipulation of, information about\n * different asset attributes and their values\n *\n * @typicalname contxtSdk.assets.attributes\n */\nclass AssetAttributes {\n  /**\n   * @param {Object} sdk An instance of the SDK so the module can communicate with other modules.\n   * @param {Object} request An instance of the request module tied to this module's audience.\n   * @param {string} baseUrl The base URL provided by the parent module\n   */\n  constructor(sdk, request, baseUrl) {\n    this._baseUrl = baseUrl;\n    this._request = request;\n    this._sdk = sdk;\n  }\n\n  /**\n   * Creates a new asset attribute\n   *\n   * API Endpoint: '/assets/types/:assetTypeId/attributes'\n   * Method: POST\n   *\n   * @param {string} assetTypeId The ID of the asset type (formatted as a UUID)\n   * @param {Object} assetAttribute\n   * @param {string} assetAttribute.dataType\n   * @param {string} assetAttribute.description\n   * @param {boolean} [assetAttribute.isRequired]\n   * @param {string} assetAttribute.label\n   * @param {string} assetAttribute.organizationId Can be explicitly set to `null` to create a global attribute\n   * @param {string} [assetAttribute.units]\n   *\n   * @returns {Promise}\n   * @fulfill {AssetAttribute}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.assets.attributes\n   *   .create('4f0e51c6-728b-4892-9863-6d002e61204d', {\n   *     dataType: 'boolean',\n   *     description: 'Square footage of a facility',\n   *     isRequired: true,\n   *     label: 'Square Footage',\n   *     organizationId: 'b47e45af-3e18-408a-8070-008f9e6d7b42',\n   *     units: 'sqft'\n   *   })\n   *   .then((assetAttribute) => console.log(assetAttribute))\n   *   .catch((err) => console.log(err));\n   */\n  create(assetTypeId, assetAttribute = {}) {\n    const hasFieldFns = {\n      default: (object, key) => !!object[key],\n      organizationId: (object, key) => has(object, key)\n    };\n\n    const requiredFields = ['description', 'label', 'organizationId'];\n\n    if (!assetTypeId) {\n      return Promise.reject(\n        new Error(\n          'An asset type ID is required to create a new asset attribute.'\n        )\n      );\n    }\n\n    for (let i = 0; i < requiredFields.length; i++) {\n      const field = requiredFields[i];\n      const hasField = hasFieldFns[field] || hasFieldFns.default;\n\n      if (!hasField(assetAttribute, field)) {\n        return Promise.reject(\n          new Error(`A ${field} is required to create a new asset attribute.`)\n        );\n      }\n    }\n\n    return this._request\n      .post(\n        `${this._baseUrl}/assets/types/${assetTypeId}/attributes`,\n        toSnakeCase(assetAttribute)\n      )\n      .then((assetAttribute) => toCamelCase(assetAttribute));\n  }\n\n  /**\n   * Deletes an asset attribute\n   *\n   * API Endpoint: '/assets/attributes/:assetAttributeId'\n   * Method: DELETE\n   *\n   * @param {string} assetAttributeId The ID of the asset attribute (formatted as a UUID)\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.assets.attributes.delete('c7f927c3-11a7-4024-9269-e1231baeb765');\n   */\n  delete(assetAttributeId) {\n    if (!assetAttributeId) {\n      return Promise.reject(\n        new Error(\n          'An asset attribute ID is required for deleting an asset attribute.'\n        )\n      );\n    }\n\n    return this._request.delete(\n      `${this._baseUrl}/assets/attributes/${assetAttributeId}`\n    );\n  }\n\n  /**\n   * Gets information about an asset attribute\n   *\n   * API Endpoint: '/assets/attributes/:assetAttributeId'\n   * Method: GET\n   *\n   * @param {string} assetAttributeId The ID of the asset attribute (formatted as a UUID)\n   *\n   * @returns {Promise}\n   * @fulfill {AssetAttribute}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.assets.attributes\n   *   .get('c7f927c3-11a7-4024-9269-e1231baeb765')\n   *   .then((assetAttribute) => console.log(assetAttribute))\n   *   .catch((err) => console.log(err));\n   */\n  get(assetAttributeId) {\n    if (!assetAttributeId) {\n      return Promise.reject(\n        new Error(\n          'An asset attribute ID is required for getting information about an asset attribute.'\n        )\n      );\n    }\n\n    return this._request\n      .get(`${this._baseUrl}/assets/attributes/${assetAttributeId}`)\n      .then((assetAttribute) => toCamelCase(assetAttribute));\n  }\n\n  /**\n   * Gets a list of asset attributes for a specific asset type\n   *\n   * API Endpoint: '/assets/types/:assetTypeId/attributes'\n   * Method: GET\n   *\n   * @param {string} assetTypeId The ID of the asset type (formatted as a UUID)\n   * @param {PaginationOptions} [paginationOptions]\n   *\n   * @returns {Promise}\n   * @fulfill {AssetAttributeData}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.assets.attributes\n   *   .getAll('4f0e51c6-728b-4892-9863-6d002e61204d')\n   *   .then((assetAttributesData) => console.log(assetAttributesData))\n   *   .catch((err) => console.log(err));\n   */\n  getAll(assetTypeId, paginationOptions) {\n    if (!assetTypeId) {\n      return Promise.reject(\n        new Error(\n          'An asset type ID is required to get a list of all asset attributes.'\n        )\n      );\n    }\n\n    return this._request\n      .get(`${this._baseUrl}/assets/types/${assetTypeId}/attributes`, {\n        params: toSnakeCase(paginationOptions)\n      })\n      .then((assetAttributeData) =>\n        formatPaginatedDataFromServer(assetAttributeData)\n      );\n  }\n\n  /**\n   * Updates an asset attribute\n   *\n   * API Endpoint: '/assets/attributes/:assetAttributeId'\n   * Method: PUT\n   *\n   * @param {string} assetAttributeId The ID of the asset attribute to update (formatted as a UUID)\n   * @param {Object} update An object containing the updated data for the asset attribute\n   * @param {string} [update.dataType]\n   * @param {string} [update.description]\n   * @param {boolean} [update.isRequired]\n   * @param {string} [update.label]\n   * @param {string} [update.units]\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.assets.attributes\n   *   .update('c7f927c3-11a7-4024-9269-e1231baeb765', {\n   *     dataType: 'boolean',\n   *     description: 'Temperature of a facility',\n   *     isRequired: false,\n   *     label: 'Temperature',\n   *     units: 'Celsius'\n   *   });\n   */\n  update(assetAttributeId, update) {\n    if (!assetAttributeId) {\n      return Promise.reject(\n        new Error(\n          'An asset attribute ID is required to update an asset attribute.'\n        )\n      );\n    }\n\n    if (!update) {\n      return Promise.reject(\n        new Error('An update is required to update an asset attribute.')\n      );\n    }\n\n    if (!isPlainObject(update)) {\n      return Promise.reject(\n        new Error(\n          'The asset attribute update must be a well-formed object with the data you wish to update.'\n        )\n      );\n    }\n\n    const formattedUpdate = toSnakeCase(update, {\n      excludeKeys: ['assetTypeId', 'id', 'organizationId']\n    });\n\n    return this._request.put(\n      `${this._baseUrl}/assets/attributes/${assetAttributeId}`,\n      formattedUpdate\n    );\n  }\n\n  /**\n   * Creates a new asset attribute value\n   *\n   * API Endpoint: '/assets/:assetId/attributes/:assetAttributeId/values'\n   * Method: POST\n   *\n   * @param {string} assetId The ID of the asset type (formatted as a UUID)\n   * @param {Object} assetAttributeValue\n   * @param {string} assetAttributeValue.assetAttributeId UUID corresponding to the asset attribute\n   * @param {string} assetAttributeValue.effectiveDate ISO 8601 Extended Format date/time string\n   * @param {string} [assetAttributeValue.notes]\n   * @param {string} assetAttributeValue.value\n   *\n   * @returns {Promise}\n   * @fulfill {AssetAttributeValue}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.assets.attributes\n   *   .createValue('2140cc2e-6d13-42ee-9941-487fe98f8e2d', {\n   *     assetAttributeId: 'cca11baa-cf7d-44c0-9d0a-6ad73d5f30cb',\n   *     effectiveDate: '2018-07-09T14:36:36.004Z',\n   *     notes: 'Iure delectus non sunt a voluptates pariatur fuga.',\n   *     value: '2206'\n   *   })\n   *   .then((assetAttributeValue) => console.log(assetAttributeValue))\n   *   .catch((err) => console.log(err));\n   */\n  createValue(assetId, assetAttributeValue = {}) {\n    const requiredFields = ['assetAttributeId', 'effectiveDate', 'value'];\n\n    if (!assetId) {\n      return Promise.reject(\n        new Error(\n          'An asset ID is required to create a new asset attribute value.'\n        )\n      );\n    }\n\n    for (let i = 0; i < requiredFields.length; i++) {\n      const field = requiredFields[i];\n\n      if (!assetAttributeValue[field]) {\n        return Promise.reject(\n          new Error(\n            `A ${field} is required to create a new asset attribute value.`\n          )\n        );\n      }\n    }\n\n    return this._request\n      .post(\n        `${this._baseUrl}/assets/${assetId}/attributes/${\n          assetAttributeValue.assetAttributeId\n        }/values`,\n        toSnakeCase(assetAttributeValue)\n      )\n      .then((assetAttributeValue) => toCamelCase(assetAttributeValue));\n  }\n\n  /**\n   * Deletes an asset attribute value\n   *\n   * API Endpoint: '/assets/attributes/values/:assetAttributeValueId'\n   * Method: DELETE\n   *\n   * @param {string} assetAttributeValueId The ID of the asset attribute value (formatted as a UUID)\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.assets.attributes.deleteValue(\n   *   'f4cd0d84-6c61-4d19-9322-7c1ab226dc83'\n   * );\n   */\n  deleteValue(assetAttributeValueId) {\n    if (!assetAttributeValueId) {\n      return Promise.reject(\n        new Error(\n          'An asset attribute value ID is required for deleting an asset attribute value.'\n        )\n      );\n    }\n\n    return this._request.delete(\n      `${this._baseUrl}/assets/attributes/values/${assetAttributeValueId}`\n    );\n  }\n\n  /**\n   * Gets the effective attribute values for a particular asset\n   *\n   * API Endpoint: '/assets/:assetId/attributes/values'\n   * Method: GET\n   *\n   * @param {String} assetId The ID of the asset for which you are looking up\n   *   attribute values  (formatted as a UUID)\n   * @param {Object} [assetAttributeFilters] Specific information that is used to\n   *   filter the list of asset attribute values\n   * @param {String} [assetAttributeFilters.attributeLabel] Label of the parent\n   *   asset attribute\n   * @param {String} [assetAttributeFilters.effectiveDate = (new Date()).toISOString()] Effective\n   *   date of the asset attribute values\n   *\n   * @returns {Promise}\n   * @fulfill {AssetAttributeValue[]}\n   * @rejects {Error}\n   *\n   * @example\n   * contxtSdk.assets.attributes\n   *   .getEffectiveValuesByAssetId('d7329ef3-ca63-4ad5-bb3e-632b702584f8', {\n   *     attributeLabel: 'Square Footage',\n   *     effectiveDate: '2018-07-11T19:14:49.715Z'\n   *   })\n   *   .then((assetAttributeValues) => {\n   *     console.log(assetAttributeValues);\n   *   })\n   *   .catch((err) => console.log(err));\n   */\n  getEffectiveValuesByAssetId(assetId, assetAttributeFilters) {\n    if (!assetId) {\n      return Promise.reject(\n        new Error(\n          'An asset ID is required to get a list of asset attribute values.'\n        )\n      );\n    }\n\n    return this._request\n      .get(`${this._baseUrl}/assets/${assetId}/attributes/values`, {\n        params: toSnakeCase(assetAttributeFilters)\n      })\n      .then((assetAttributeValues) => toCamelCase(assetAttributeValues));\n  }\n\n  /**\n   * Gets a paginated list of effective asset attribute values for an\n   * organization.\n   *\n   * API Endpoint: '/organizations/:organizationId/attributes/values'\n   * Method: GET\n   *\n   * @param {String} organizationId UUID corresponding with an organization\n   * @param {PaginationOptions} [paginationOptions]\n   *\n   * @returns {Promise}\n   * @fulfill {AssetAttributeValueData}\n   * @rejects {Error}\n   *\n   * @example\n   * contxtSdk.assets.attributes\n   *   .getValuesByAttributeId(\n   *     '53fba880-70b7-47a2-b4e3-ad9ecfb67d5c',\n   *     {\n   *       limit: 100,\n   *       offset: 0\n   *     }\n   *   )\n   *   .then((assetAttributeValuesData) => {\n   *     console.log(assetAttributeValuesData);\n   *   })\n   *   .catch((err) => console.log(err));\n   */\n  getEffectiveValuesByOrganizationId(organizationId, paginationOptions) {\n    if (!organizationId) {\n      return Promise.reject(\n        new Error(\n          'An organization ID is required to get a list of asset attribute values.'\n        )\n      );\n    }\n\n    return this._request\n      .get(\n        `${this._baseUrl}/organizations/${organizationId}/attributes/values`,\n        { params: toSnakeCase(paginationOptions) }\n      )\n      .then((assetAttributeValueData) =>\n        formatPaginatedDataFromServer(assetAttributeValueData)\n      );\n  }\n\n  /**\n   * Gets a paginated list of asset attribute values for a particular attribute\n   * of a particular asset\n   *\n   * API Endpoint: '/assets/:assetId/attributes/:attributeId/values'\n   * Method: GET\n   *\n   * @param {String} assetId The ID of the asset for which you are looking up\n   *   attribute values  (formatted as a UUID)\n   * @param {String} assetAttributeId The ID of the asset attribute for which you are\n   *   looking up attribute values (formatted as a UUID)\n   * @param {PaginationOptions} [paginationOptions]\n   *\n   * @returns {Promise}\n   * @fulfill {AssetAttributeValueData}\n   * @rejects {Error}\n   *\n   * @example\n   * contxtSdk.assets.attributes\n   *   .getValuesByAttributeId(\n   *     'a4d80a97-cbf6-453b-bab5-0477e1ede04f',\n   *     'c2779610-44d7-4313-aea2-96cce58d6efd',\n   *     {\n   *       limit: 100,\n   *       offset: 0\n   *     }\n   *   )\n   *   .then((assetAttributeValuesData) => {\n   *     console.log(assetAttributeValuesData);\n   *   })\n   *   .catch((err) => console.log(err));\n   */\n  getValuesByAttributeId(assetId, assetAttributeId, paginationOptions) {\n    if (!assetId) {\n      return Promise.reject(\n        new Error(\n          'An asset ID is required to get a list of asset attribute values.'\n        )\n      );\n    }\n\n    if (!assetAttributeId) {\n      return Promise.reject(\n        new Error(\n          'An asset attribute ID is required to get a list of asset attribute values.'\n        )\n      );\n    }\n\n    return this._request\n      .get(\n        `${\n          this._baseUrl\n        }/assets/${assetId}/attributes/${assetAttributeId}/values`,\n        { params: toSnakeCase(paginationOptions) }\n      )\n      .then((assetAttributeValueData) =>\n        formatPaginatedDataFromServer(assetAttributeValueData)\n      );\n  }\n\n  /**\n   * Updates an asset attribute value\n   *\n   * API Endpoint: '/assets/attributes/values/:assetAttributeValueId'\n   * Method: PUT\n   *\n   * @param {string} assetAttributeId The ID of the asset attribute to update (formatted as a UUID)\n   * @param {Object} update An object containing the updated data for the asset attribute value\n   * @param {string} [update.effectiveDate] ISO 8601 Extended Format date/time string\n   * @param {string} [update.notes]\n   * @param {string} [update.value]\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.assets.attributes\n   *   .updateValue('2140cc2e-6d13-42ee-9941-487fe98f8e2d', {\n   *     effectiveDate: '2018-07-10T11:04:24.631Z',\n   *     notes: 'Dolores et sapiente sunt doloribus aut in.',\n   *     value: '61456'\n   *   })\n   *   .catch((err) => console.log(err));\n   */\n  updateValue(assetAttributeValueId, update) {\n    if (!assetAttributeValueId) {\n      return Promise.reject(\n        new Error(\n          'An asset attribute value ID is required to update an asset attribute value.'\n        )\n      );\n    }\n\n    if (!update) {\n      return Promise.reject(\n        new Error('An update is required to update an asset attribute value.')\n      );\n    }\n\n    if (!isPlainObject(update)) {\n      return Promise.reject(\n        new Error(\n          'The asset attribute value update must be a well-formed object with the data you wish to update.'\n        )\n      );\n    }\n\n    const formattedUpdate = toSnakeCase(update, {\n      excludeKeys: ['assetAttributeId', 'assetId', 'id']\n    });\n\n    return this._request.put(\n      `${this._baseUrl}/assets/attributes/values/${assetAttributeValueId}`,\n      formattedUpdate\n    );\n  }\n}\n\nexport default AssetAttributes;\n"]}