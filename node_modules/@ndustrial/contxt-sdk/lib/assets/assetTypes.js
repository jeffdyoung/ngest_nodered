'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash.has');

var _lodash2 = _interopRequireDefault(_lodash);

var _lodash3 = require('lodash.isplainobject');

var _lodash4 = _interopRequireDefault(_lodash3);

var _objects = require('../utils/objects');

var _pagination = require('../utils/pagination');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @typedef {Object} AssetType
 * @property {string} createdAt ISO 8601 Extended Format date/time string
 * @property {string} description
 * @property {string} id UUID
 * @property {string} label
 * @property {string} organizationId UUID corresponding with the organization
 * @property {string} updatedAt ISO 8601 Extended Format date/time string
 */

/**
 * @typedef {Object} AssetTypesFromServer
 * @property {Object} _metadata Metadata about the pagination settings
 * @property {number} _metadata.offset Offset of records in subsequent queries
 * @property {number} _metadata.totalRecords Total number of asset types found
 * @property {AssetType[]} records
 */

/**
 * Module that provides access to, and the manipulation of, information about different asset types
 *
 * @typicalname contxtSdk.assets.types
 */
var AssetTypes = function () {
  /**
   * @param {Object} sdk An instance of the SDK so the module can communicate with other modules.
   * @param {Object} request An instance of the request module tied to this module's audience.
   * @param {string} baseUrl The base URL provided by the parent module
   */
  function AssetTypes(sdk, request, baseUrl) {
    _classCallCheck(this, AssetTypes);

    this._baseUrl = baseUrl;
    this._request = request;
    this._sdk = sdk;
  }

  /**
   * Creates a new asset type
   *
   * API Endpoint: '/assets/types'
   * Method: POST
   *
   * @param {Object} assetType
   * @param {string} assetType.description
   * @param {string} assetType.label
   * @param {string} assetType.organizationId The ID of the asset type's parent organization. Can be
   *   explicitly set to `null` to create a global asset type
   *
   * @returns {Promise}
   * @fulfill {AssetType} Information about the new asset type
   * @reject {Error}
   *
   * @example
   * contxtSdk.assets.types
   *   .create({
   *     description: 'A physicial facility building',
   *     label: 'Facility',
   *     organizationId: 'b47e45af-3e18-408a-8070-008f9e6d7b42'
   *   })
   *   .then((assetType) => console.log(assetType))
   *   .catch((err) => console.log(err));
   */


  _createClass(AssetTypes, [{
    key: 'create',
    value: function create() {
      var assetType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var hasFieldFns = {
        default: function _default(object, key) {
          return !!object[key];
        },
        organizationId: function organizationId(object, key) {
          return (0, _lodash2.default)(object, key);
        }
      };
      var requiredFields = ['description', 'label', 'organizationId'];

      for (var i = 0; i < requiredFields.length; i++) {
        var field = requiredFields[i];
        var hasField = hasFieldFns[field] || hasFieldFns.default;

        if (!hasField(assetType, field)) {
          return Promise.reject(new Error('A ' + field + ' is required to create a new asset type.'));
        }
      }

      return this._request.post(this._baseUrl + '/assets/types', (0, _objects.toSnakeCase)(assetType)).then(function (assetType) {
        return (0, _objects.toCamelCase)(assetType);
      });
    }

    /**
     * Deletes an asset type
     *
     * API Endpoint: '/assets/types/:assetTypeId'
     * Method: DELETE
     *
     * @param {string} assetTypeId The ID of the asset type (formatted as a UUID)
     *
     * @returns {Promise}
     * @fulfill {undefined}
     * @reject {Error}
     *
     * @example
     * contxtSdk.assets.types.delete('4f0e51c6-728b-4892-9863-6d002e61204d')
     */

  }, {
    key: 'delete',
    value: function _delete(assetTypeId) {
      if (!assetTypeId) {
        return Promise.reject(new Error('An asset type ID is required for deleting an asset type.'));
      }

      return this._request.delete(this._baseUrl + '/assets/types/' + assetTypeId);
    }

    /**
     * Gets information about an asset type
     *
     * API Endpoint: '/assets/types/:assetTypeId'
     * Method: GET
     *
     * @param {string} assetTypeId The ID of the asset type (formatted as a UUID)
     *
     * @returns {Promise}
     * @fulfill {AssetType} Information about the asset type
     * @reject {Error}
     *
     * @example
     * contxtSdk.assets.types
     *   .get('4f0e51c6-728b-4892-9863-6d002e61204d')
     *   .then((assetType) => console.log(assetType))
     *   .catch((err) => console.log(err));
     */

  }, {
    key: 'get',
    value: function get(assetTypeId) {
      if (!assetTypeId) {
        return Promise.reject(new Error('An asset type ID is required for getting information about an asset type.'));
      }

      return this._request.get(this._baseUrl + '/assets/types/' + assetTypeId).then(function (assetType) {
        return (0, _objects.toCamelCase)(assetType);
      });
    }

    /**
     * Gets a list of all asset types
     *
     * API Endpoint: '/assets/types/
     * Method: GET
     *
     * @param {PaginationOptions} [paginationOptions]
     *
     * @returns {Promise}
     * @fulfill {AssetTypesFromServer}
     * @reject {Error}
     *
     * @example
     * contxtSdk.assets.types
     *   .getAll()
     *   .then((assetTypes) => console.log(assetTypes))
     *   .catch((err) => console.log(err));
     */

  }, {
    key: 'getAll',
    value: function getAll(paginationOptions) {
      return this._request.get(this._baseUrl + '/assets/types', {
        params: (0, _objects.toSnakeCase)(paginationOptions)
      }).then(function (assetTypesData) {
        return (0, _pagination.formatPaginatedDataFromServer)(assetTypesData);
      });
    }

    /**
     * Gets a list of all asset types that belong to a particular organization
     *
     * API Endpoint: '/organizations/:organizationId/assets/types'
     * Method: GET
     *
     * @param {string} organizationId UUID corresponding with an organization
     * @param {PaginationOptions} [paginationOptions]
     *
     * @returns {Promise}
     * @fulfill {AssetTypesFromServer}
     * @reject {Error}
     *
     * @example
     * contxtSdk.assets.types
     *   .getAllByOrganizationId('53fba880-70b7-47a2-b4e3-ad9ecfb67d5c')
     *   .then((assetTypes) => console.log(assetTypes))
     *   .catch((err) => console.log(assetTypes));
     */

  }, {
    key: 'getAllByOrganizationId',
    value: function getAllByOrganizationId(organizationId, paginationOptions) {
      if (!organizationId) {
        return Promise.reject(new Error("An organization ID is required for getting a list of an organization's asset types."));
      }

      return this._request.get(this._baseUrl + '/organizations/' + organizationId + '/assets/types', {
        params: (0, _objects.toSnakeCase)(paginationOptions)
      }).then(function (assetTypesData) {
        return (0, _pagination.formatPaginatedDataFromServer)(assetTypesData);
      });
    }

    /**
     * Updates an asset type's data
     *
     * API Endpoint: '/assets/types/:assetTypeId'
     * Method: PUT
     *
     * @param {string} assetTypeId The ID of the asset type to update (formatted as a UUID)
     * @param {Object} update An object containing the updated data for the asset type
     * @param {string} update.description
     *
     * @returns {Promise}
     * @fulfill {undefined}
     * @reject {Error}
     *
     * @example
     * contxtSdk.assets.types
     *   .update('5f310899-d8f9-4dac-ae82-cedb2048a8ef', {
     *     description: 'A physical facility building'
     *   });
     */

  }, {
    key: 'update',
    value: function update(assetTypeId, _update) {
      if (!assetTypeId) {
        return Promise.reject(new Error('An asset type ID is required to update an asset type.'));
      }

      if (!_update) {
        return Promise.reject(new Error('An update is required to update an asset type.'));
      }

      if (!(0, _lodash4.default)(_update)) {
        return Promise.reject(new Error('The asset type update must be a well-formed object with the data you wish to update.'));
      }

      var formattedUpdate = (0, _objects.toSnakeCase)(_update, {
        excludeKeys: ['id', 'label', 'organizationId']
      });

      return this._request.put(this._baseUrl + '/assets/types/' + assetTypeId, formattedUpdate);
    }
  }]);

  return AssetTypes;
}();

exports.default = AssetTypes;
//# sourceMappingURL=assetTypes.js.map
