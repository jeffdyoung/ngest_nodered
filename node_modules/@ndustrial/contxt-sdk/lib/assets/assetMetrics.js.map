{"version":3,"sources":["assets/assetMetrics.js"],"names":["AssetMetrics","sdk","request","baseUrl","_baseUrl","_request","_sdk","assetTypeId","assetMetric","Promise","reject","Error","hasFieldFns","default","object","key","organizationId","requiredFields","i","length","field","hasField","post","then","assetMetricId","delete","get","assetId","assetMetricsFilters","params","assetMetricsData","update","formattedUpdate","excludeKeys","put","assetMetricValue","assetMetricValueId","assetMetricValuesFilters","assetMetricValueData"],"mappings":"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","file":"assetMetrics.js","sourcesContent":["import has from 'lodash.has';\nimport isPlainObject from 'lodash.isplainobject';\nimport { toCamelCase, toSnakeCase } from '../utils/objects';\nimport { formatPaginatedDataFromServer } from '../utils/pagination';\n\n/**\n * @typedef {Object} AssetMetric\n * @property {string} assetTypeId UUID corresponding with the asset type\n * @property {string} createdAt ISO 8601 Extended Format date/time string\n * @property {string} description\n * @property {string} id UUID\n * @property {string} label\n * @property {string} organizationId UUID corresponding with the organization\n * @property {string} timeInterval Options are \"hourly\", \"daily\", \"weekly\", \"monthly\", \"yearly\"\n * @property {string} [units]\n * @property {string} updatedAt ISO 8601 Extended Format date/time string\n */\n\n/**\n * @typedef {Object} AssetMetricsFromServer\n * @property {Object} _metadata Metadata about the pagination settings\n * @property {number} _metadata.offset Offset of records in subsequent queries\n * @property {number} _metadata.totalRecords Total number of asset types found\n * @property {AssetMetric[]} records\n */\n\n/**\n * @typedef {Object} AssetMetricValue\n * @property {string} assetId UUID corresponding to the asset\n * @property {string} assetMetricId UUID corresponding to the asset metric\n * @property {string} createdAt ISO 8601 Extended Format date/time string\n * @property {string} effectiveEndDate ISO 8601 Extended Format date/time string\n * @property {string} effectiveStartDate ISO 8601 Extended Format date/time string\n * @property {string} id UUID\n * @property {string} notes\n * @property {string} updatedAt ISO 8601 Extended Format date/time string\n * @property {string} value\n */\n\n/**\n * @typedef {Object} AssetMetricValuesFromServer\n * @property {Object} _metadata Metadata about the pagination settings\n * @property {number} _metadata.offset Offset of records in subsequent queries\n * @property {number} _metadata.totalRecords Total number of asset types found\n * @property {AssetMetricValue[]} records\n */\n\n/**\n * Module that provides access to, and the manipulation of, information about different asset metrics\n *\n * @typicalname contxtSdk.assets.metrics\n */\nclass AssetMetrics {\n  /**\n   * @param {Object} sdk An instance of the SDK so the module can communicate with other modules.\n   * @param {Object} request An instance of the request module tied to this module's audience.\n   * @param {string} baseUrl The base URL provided by the parent module\n   */\n  constructor(sdk, request, baseUrl) {\n    this._baseUrl = baseUrl;\n    this._request = request;\n    this._sdk = sdk;\n  }\n\n  /**\n   * Creates a new asset metric\n   *\n   * API Endpoint: '/assets/types/:assetTypeId/metrics'\n   * Method: POST\n   *\n   * @param {string} assetTypeId The UUID formatted ID of the asset type\n   * @param {Object} assetMetric\n   * @param {string} assetMetric.description\n   * @param {string} assetMetric.label\n   * @param {string} assetMetric.organizationId Organization ID (UUID) to which the metric belongs\n   * @param {string} assetMetric.timeInterval Options are \"hourly\", \"daily\", \"weekly\", \"monthly\", \"yearly\"\n   * @param {string} [assetMetric.units] Units of the metric\n   *\n   * @returns {Promise}\n   * @fulfill {AssetMetric} Information about the new asset metric\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.assets.metrics\n   *   .create('4f0e51c6-728b-4892-9863-6d002e61204d', {\n   *     description: 'Number of injuries which occur in the facility each month',\n   *     label: 'Facility Injuries',\n   *     organizationId: 'b47e45af-3e18-408a-8070-008f9e6d7b42',\n   *     timeInterval: 'monthly',\n   *     units: 'injuries'\n   *   })\n   *   .then((assetMetric) => console.log(assetMetric))\n   *   .catch((err) => console.log(err));\n   */\n  create(assetTypeId, assetMetric = {}) {\n    if (!assetTypeId) {\n      return Promise.reject(\n        new Error('An asset type ID is required to create an asset metric.')\n      );\n    }\n\n    const hasFieldFns = {\n      default: (object, key) => !!object[key],\n      organizationId: (object, key) => has(object, key)\n    };\n    const requiredFields = [\n      'description',\n      'label',\n      'organizationId',\n      'timeInterval'\n    ];\n\n    for (let i = 0; i < requiredFields.length; i++) {\n      const field = requiredFields[i];\n      const hasField = hasFieldFns[field] || hasFieldFns.default;\n\n      if (!hasField(assetMetric, field)) {\n        return Promise.reject(\n          new Error(`A ${field} is required to create a new asset metric.`)\n        );\n      }\n    }\n\n    return this._request\n      .post(\n        `${this._baseUrl}/assets/types/${assetTypeId}/metrics`,\n        toSnakeCase(assetMetric)\n      )\n      .then((assetMetric) => toCamelCase(assetMetric));\n  }\n\n  /**\n   * Deletes an asset metric\n   *\n   * API Endpoint: '/assets/metrics/:assetMetricId'\n   * Method: DELETE\n   *\n   * @param {string} assetMetricId The UUID formatted ID of the asset metric\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.assets.metrics.delete('4f0e51c6-728b-4892-9863-6d002e61204d');\n   */\n  delete(assetMetricId) {\n    if (!assetMetricId) {\n      return Promise.reject(\n        new Error(\n          'An asset metric ID is required for deleting an asset metric.'\n        )\n      );\n    }\n\n    return this._request.delete(\n      `${this._baseUrl}/assets/metrics/${assetMetricId}`\n    );\n  }\n\n  /**\n   * Gets information about an asset metric\n   *\n   * API Endpoint: '/assets/metrics/:assetMetricId'\n   * Method: GET\n   *\n   * @param {string} assetMetricId The UUID formatted ID of the asset metric\n   *\n   * @returns {Promise}\n   * @fulfill {AssetMetric} Information about the asset metric\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.assets.metrics\n   *   .get('4f0e51c6-728b-4892-9863-6d002e61204d')\n   *   .then((assetMetric) => console.log(assetMetric))\n   *   .catch((err) => console.log(err));\n   */\n  get(assetMetricId) {\n    if (!assetMetricId) {\n      return Promise.reject(\n        new Error(\n          'An asset metric ID is required for getting information about an asset metric.'\n        )\n      );\n    }\n\n    return this._request\n      .get(`${this._baseUrl}/assets/metrics/${assetMetricId}`)\n      .then((assetMetric) => toCamelCase(assetMetric));\n  }\n\n  /**\n   * Gets a list of all asset metrics that belong to a given asset\n   *\n   * API Endpoint: '/assets/:assetId/metrics\n   * Method: GET\n   *\n   * @param {string} assetId The UUID formatted ID of the asset type\n   * @param {Object} [assetMetricsFilters] Specific information that is used to\n   *   filter the list of asset metrics\n   * @param {String} [assetMetricsFilters.assetMetricLabel] The label of the\n   *   associated asset metrics\n   * @param {Number} [assetMetricsFilters.limit] Maximum number of records to\n   *   return per query\n   * @param {Number} [assetMetricsFilters.offset] How many records from the first\n   *   record to start the query\n   *\n   * @returns {Promise}\n   * @fulfill {AssetMetricsFromServer}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.assets.metrics\n   *   .getByAssetId(\n   *     'f3be81fd-4494-443b-87a3-320b1c9aa495',\n   *      {\n   *        assetMetricLabel: 'Square Footage',\n   *        limit: 50,\n   *        offset: 150\n   *      }\n   *    )\n   *   .then((assetMetricData) => console.log(assetMetricData))\n   *   .catch((err) => console.log(err));\n   */\n  getByAssetId(assetId, assetMetricsFilters) {\n    if (!assetId) {\n      return Promise.reject(\n        new Error('An asset ID is required to get a list of all asset metrics.')\n      );\n    }\n\n    return this._request\n      .get(`${this._baseUrl}/assets/${assetId}/metrics`, {\n        params: toSnakeCase(assetMetricsFilters)\n      })\n      .then((assetMetricsData) =>\n        formatPaginatedDataFromServer(assetMetricsData)\n      );\n  }\n\n  /**\n   * Gets a list of all asset metrics that belong to a given type\n   *\n   * API Endpoint: '/assets/types/:assetTypeId/metrics\n   * Method: GET\n   *\n   * @param {string} assetTypeId The UUID formatted ID of the asset type\n   * @param {Object} [assetMetricsFilters] Specific information that is used to\n   *   filter the list of asset metrics\n   * @param {Number} [assetMetricsFilters.limit] Maximum number of records to\n   *   return per query\n   * @param {Number} [assetMetricsFilters.offset] How many records from the first\n   *   record to start the query\n   * @param {String} [assetMetricsFilters.organizationId] The UUID formatted ID\n   *   of the organization to filter asset metrics by\n   *\n   * @returns {Promise}\n   * @fulfill {AssetMetricsFromServer}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.assets.metrics\n   *   .getByAssetTypeId(\n   *     '4f0e51c6-728b-4892-9863-6d002e61204d'\n   *      {\n   *        limit: 50,\n   *        offset: 150\n   *      }\n   *    )\n   *   .then((assetMetrics) => console.log(assetMetrics))\n   *   .catch((err) => console.log(err));\n   */\n  getByAssetTypeId(assetTypeId, assetMetricsFilters) {\n    if (!assetTypeId) {\n      return Promise.reject(\n        new Error(\n          'An asset type ID is required to get a list of all asset metrics.'\n        )\n      );\n    }\n\n    return this._request\n      .get(`${this._baseUrl}/assets/types/${assetTypeId}/metrics`, {\n        params: toSnakeCase(assetMetricsFilters)\n      })\n      .then((assetMetricsData) =>\n        formatPaginatedDataFromServer(assetMetricsData)\n      );\n  }\n\n  /**\n   * Updates an asset metric's data\n   *\n   * API Endpoint: '/assets/metrics/:assetMetricId'\n   * Method: PUT\n   *\n   * @param {string} assetMetricId The ID of the asset metric to update (formatted as a UUID)\n   * @param {Object} update An object containing the updated data for the asset metric\n   * @param {string} [update.description]\n   * @param {string} [update.label]\n   * @param {string} [update.timeInterval]\n   * @param {string} [update.units]\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.assets.metrics\n   *   .update('5f310899-d8f9-4dac-ae82-cedb2048a8ef', {\n   *     description: 'An updated description of this metric'\n   *   });\n   */\n  update(assetMetricId, update) {\n    if (!assetMetricId) {\n      return Promise.reject(\n        new Error('An asset metric ID is required to update an asset metric.')\n      );\n    }\n\n    if (!update) {\n      return Promise.reject(\n        new Error('An update is required to update an asset metric.')\n      );\n    }\n\n    if (!isPlainObject(update)) {\n      return Promise.reject(\n        new Error(\n          'The asset metric update must be a well-formed object with the data you wish to update.'\n        )\n      );\n    }\n\n    const formattedUpdate = toSnakeCase(update, {\n      excludeKeys: ['createdAt', 'id', 'label', 'organizationId', 'updatedAt']\n    });\n\n    return this._request.put(\n      `${this._baseUrl}/assets/metrics/${assetMetricId}`,\n      formattedUpdate\n    );\n  }\n\n  /**\n   * Creates a new asset metric value\n   *\n   * API Endpoint: '/assets/:assetId/metrics/:assetMetricId/values'\n   * Method: POST\n   *\n   * @param {string} assetId The ID of the asset (formatted as a UUID)\n   * @param {Object} assetMetricValue\n   * @param {string} assetMetricValue.assetMetricId UUID corresponding to the asset metric\n   * @param {string} assetMetricValue.effectiveEndDate ISO 8601 Extended Format date/time string\n   * @param {string} assetMetricValue.effectiveStartDate ISO 8601 Extended Format date/time string\n   * @param {string} [assetMetricValue.notes]\n   * @param {string} assetMetricValue.value\n   *\n   * @returns {Promise}\n   * @fulfill {AssetMetricValue}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.assets.metrics\n   *   .createValue('1140cc2e-6d13-42ee-9941-487fe98f8e2d', {\n   *      assetMetricId: 'cca11baa-cf7d-44c0-9d0a-6ad73d5f30cb',\n   *      effectiveEndDate: '2018-08-28T18:18:18.264Z',\n   *      effectiveStartDate: '2018-08-27T18:18:03.175Z',\n   *      notes: 'Iure delectus non sunt a voluptates pariatur fuga.',\n   *      value: '2000'\n   *    })\n   *    .then((newAssetMetricValue) => {\n   *      console.log(newAssetMetricValue);\n   *    })\n   *    .catch((error) => {\n   *      console.error(error);\n   *    });\n   */\n  createValue(assetId, assetMetricValue = {}) {\n    const requiredFields = [\n      'assetMetricId',\n      'effectiveEndDate',\n      'effectiveStartDate',\n      'value'\n    ];\n\n    if (!assetId) {\n      return Promise.reject(\n        new Error('An asset ID is required to create a new asset metric value.')\n      );\n    }\n\n    for (let i = 0; i < requiredFields.length; i++) {\n      const field = requiredFields[i];\n\n      if (!assetMetricValue[field]) {\n        return Promise.reject(\n          new Error(\n            `A ${field} is required to create a new asset metric value.`\n          )\n        );\n      }\n    }\n\n    return this._request\n      .post(\n        `${this._baseUrl}/assets/${assetId}/metrics/${\n          assetMetricValue.assetMetricId\n        }/values`,\n        toSnakeCase(assetMetricValue)\n      )\n      .then((assetMetricValue) => toCamelCase(assetMetricValue));\n  }\n\n  /**\n   * Deletes an asset metric value\n   *\n   * API Endpoint: '/assets/metrics/values/:assetMetricValueId'\n   * Method: DELETE\n   *\n   * @param {string} assetMetricValueId The ID of the asset metric value (formatted as a UUID)\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.assets.metrics.deleteValue(\n   *   'f4cd0d84-6c61-4d19-9322-7c1ab226dc83'\n   * );\n   */\n  deleteValue(assetMetricValueId) {\n    if (!assetMetricValueId) {\n      return Promise.reject(\n        new Error(\n          'An asset metric value ID is required for deleting an asset metric value.'\n        )\n      );\n    }\n\n    return this._request.delete(\n      `${this._baseUrl}/assets/metrics/values/${assetMetricValueId}`\n    );\n  }\n\n  /**\n   * Gets asset metric values for a particular asset\n   *\n   * API Endpoint: '/assets/:assetId/metrics/values'\n   * Method: GET\n   *\n   * @param {String} assetId The ID of the asset (formatted as a UUID)\n   * @param {Object} [assetMetricValuesFilters] Specific information that is\n   *   used to filter the list of asset metric values\n   * @param {String} [assetMetricValuesFilters.assetMetricLabel] The label of\n   *   the associated asset metrics\n   * @param {String} [assetMetricValuesFilters.effectiveEndDate] Effective end\n   *   date (ISO 8601 Extended formatted) of the asset metric values\n   * @param {String} [assetMetricValuesFilters.effectiveStartDate] Effective\n   *   start date (ISO 8601 Extended formatted) of the asset metric values\n   * @param {Number} [assetMetricValuesFilters.limit] Maximum number of records\n   *   to return per query\n   * @param {Number} [assetMetricValuesFilters.offset] How many records from the\n   *   first record to start the query\n   *\n   * @returns {Promise}\n   * @fulfill {AssetMetricValuesFromServer}\n   * @rejects {Error}\n   *\n   * @example\n   * contxtSdk.assets.metrics\n   *   .getValuesByAssetId(\n   *      'f9c606f3-d270-4623-bf3b-b085424d9a8b',\n   *      {\n   *        assetMetricLabel: 'Square Footage',\n   *        effectiveEndDate: '2018-04-13T15:44:51.943Z'\n   *        effectiveStartDate: '2017-12-13T15:42:01.376Z'\n   *        limit: 10,\n   *        offset: 200\n   *      }\n   *    )\n   *   .then((assetMetricValuesData) => console.log(assetMetricValuesData))\n   *   .catch((err) => console.log(err));\n   */\n  getValuesByAssetId(assetId, assetMetricValuesFilters) {\n    if (!assetId) {\n      return Promise.reject(\n        new Error(\n          'An asset ID is required to get a list of asset metric values.'\n        )\n      );\n    }\n\n    return this._request\n      .get(`${this._baseUrl}/assets/${assetId}/metrics/values`, {\n        params: toSnakeCase(assetMetricValuesFilters)\n      })\n      .then((assetMetricValueData) =>\n        formatPaginatedDataFromServer(assetMetricValueData)\n      );\n  }\n\n  /**\n   * Gets asset metric values for a particular asset and metric\n   *\n   * API Endpoint: '/assets/:assetId/metrics/:assetMetricId/values'\n   * Method: GET\n   *\n   * @param {String} assetId The ID of the asset (formatted as a UUID)\n   * @param {String} assetMetricId The ID of the asset metric (formatted as a\n   *   UUID)\n   * @param {Object} [assetMetricValuesFilters] Specific information that is\n   *   used to filter the list of asset metric values\n   * @param {String} [assetMetricValuesFilters.effectiveEndDate] Effective end\n   *   date (ISO 8601 Extended formatted) of the asset metric values\n   * @param {String} [assetMetricValuesFilters.effectiveStartDate] Effective\n   *   start date (ISO 8601 Extended formatted) of the asset metric values\n   * @param {Number} [assetMetricValuesFilters.limit] Maximum number of records\n   *   to return per query\n   * @param {Number} [assetMetricValuesFilters.offset] How many records from the\n   *   first record to start the query\n   *\n   * @returns {Promise}\n   * @fulfill {AssetMetricValuesFromServer}\n   * @rejects {Error}\n   *\n   * @example\n   * contxtSdk.assets.metrics\n   *   .getValuesByMetricId(\n   *      'd7329ef3-ca63-4ad5-bb3e-632b702584f8',\n   *      'a1329ef3-ca63-4ad5-bb3e-632b702584f8',\n   *      {\n   *        limit: 10,\n   *        effectiveStartDate: '2018-07-11T19:14:49.715Z'\n   *      }\n   *    )\n   *   .then((assetMetricValuesData) => {\n   *     console.log(assetMetricValuesData);\n   *   })\n   *   .catch((err) => console.log(err));\n   */\n  getValuesByMetricId(assetId, assetMetricId, assetMetricValuesFilters) {\n    if (!assetId) {\n      return Promise.reject(\n        new Error(\n          'An asset ID is required to get a list of asset metric values.'\n        )\n      );\n    }\n\n    if (!assetMetricId) {\n      return Promise.reject(\n        new Error(\n          'An asset metric ID is required to get a list of asset metric values.'\n        )\n      );\n    }\n\n    return this._request\n      .get(\n        `${this._baseUrl}/assets/${assetId}/metrics/${assetMetricId}/values`,\n        {\n          params: toSnakeCase(assetMetricValuesFilters)\n        }\n      )\n      .then((assetMetricValueData) =>\n        formatPaginatedDataFromServer(assetMetricValueData)\n      );\n  }\n\n  /**\n   * Updates an asset metric value\n   *\n   * API Endpoint: '/assets/metrics/values/:assetMetricValueId'\n   * Method: PUT\n   *\n   * @param {string} assetMetricValueId The ID of the asset metric value to update (formatted as a UUID)\n   * @param {Object} update An object containing the updated data for the asset metric value\n   * @param {string} [update.effectiveEndDate] ISO 8601 Extended Format date/time string\n   * @param {string} [update.effectiveStartDate] ISO 8601 Extended Format date/time string\n   * @param {string} [update.notes]\n   * @param {string} [update.value]\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.assets.metrics\n   *   .updateValue('2140cc2e-6d13-42ee-9941-487fe98f8e2d', {\n   *     effectiveEndDate: '2018-07-10T11:04:24.631Z',\n   *     notes: 'Dolores et sapiente sunt doloribus aut in.',\n   *     value: '61456'\n   *   })\n   *   .catch((err) => console.log(err));\n   */\n  updateValue(assetMetricValueId, update) {\n    if (!assetMetricValueId) {\n      return Promise.reject(\n        new Error(\n          'An asset metric value ID is required to update an asset metric value.'\n        )\n      );\n    }\n\n    if (!update) {\n      return Promise.reject(\n        new Error('An update is required to update an asset metric value.')\n      );\n    }\n\n    if (!isPlainObject(update)) {\n      return Promise.reject(\n        new Error(\n          'The asset metric value update must be a well-formed object with the data you wish to update.'\n        )\n      );\n    }\n\n    const formattedUpdate = toSnakeCase(update, {\n      excludeKeys: ['assetId', 'assetMetricId', 'id']\n    });\n\n    return this._request.put(\n      `${this._baseUrl}/assets/metrics/values/${assetMetricValueId}`,\n      formattedUpdate\n    );\n  }\n}\n\nexport default AssetMetrics;\n"]}