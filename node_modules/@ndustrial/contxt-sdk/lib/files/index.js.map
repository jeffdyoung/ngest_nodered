{"version":3,"sources":["files/index.js"],"names":["Files","sdk","request","baseUrl","config","audiences","files","host","_baseUrl","_request","_sdk","fileInfo","requiredFields","i","length","Promise","reject","Error","post","then","upload_info","createdFile","uploadInfo","deep","excludeTransform","_generateError","message","stage","data","metadata","create","catch","originalError","resolve","upload","headers","url","setUploadFailed","id","setUploadComplete","get","fileId","delete","file","filesFilters","params","assetsData","axios","put","artifacts","errorMsg","Object","assign"],"mappings":"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","file":"index.js","sourcesContent":["import axios from 'axios';\nimport { toCamelCase, toSnakeCase } from '../utils/objects';\nimport { formatPaginatedDataFromServer } from '../utils/pagination';\n\n/**\n * @typedef {Object} File\n * @property {string} createdAt ISO 8601 Extended Format date/time string\n * @property {string} contentType The MIME type of the file\n * @property {string} description\n * @property {string} filename\n * @property {string} id UUID of the file\n * @property {string} organizationId UUID of the organization to which the file belongs\n * @property {string} ownerId The ID of the user who owns the file\n * @property {string} status The status of the File, e.g. \"ACTIVE\"\n * @property {string} updatedAt ISO 8601 Extended Format date/time string\n */\n\n/**\n * @typedef {Object} FileWithUploadInformation\n * @property {string} createdAt ISO 8601 Extended Format date/time string\n * @property {string} contentType The MIME type of the file\n * @property {string} description\n * @property {string} filename\n * @property {string} id UUID of the file\n * @property {string} organizationId UUID of the organization to which the file\n *   belongs\n * @property {string} ownerId The ID of the user who owns the file\n * @property {string} status The status of the File, e.g. \"ACTIVE\"\n * @property {string} updatedAt ISO 8601 Extended Format date/time string\n * @property {Object} uploadInfo Information related to the uploading the\n *   underlying file\n * @property {string} uploadInfo.expiresAt A ISO 8601 Extended format date/time\n *   string indicating when the validity of the included URL expires\n * @property {Object.<string, string>} uploadInfo.headers to be appended to the\n *   request when uploading the file. The key is the header name and the value\n *   is the included value.\n * @property {string} uploadInfo.method The HTTP method to be used when\n *   uploading the file.\n * @property {string} uploadInfo.url The URL to be used when uploading the file.\n */\n\n/**\n * @typedef {Object} FilesFromServer\n * @property {Object} _metadata Metadata about the pagination settings\n * @property {number} _metadata.offset Offset of records in subsequent queries\n * @property {number} _metadata.totalRecords Total number of files found\n * @property {File[]} records\n */\n\n/**\n * @typedef {Object} FileToDownload\n * @property {string} createdAt ISO 8601 Extended Format date/time string\n * @property {string} contentType The MIME type of the file\n * @property {string} description\n * @property {Object} downloadInfo\n * @property {string} downloadInfo.attachmentUrl A URL that can be used to download the file from the external storage\n * @property {string} downloadInfo.expiresAt ISO 8601 Extended Format date/time indicating when the attachement and inline URLs expire\n * @property {string} downloadInfo.inlineUrl A URL that can be used for embedding the file into a page\n * @property {string} filename\n * @property {string} id UUID of the file\n * @property {string} organizationId UUID of the organization to which the file belongs\n * @property {string} ownerId The ID of the user who owns the file\n * @property {string} status The status of the File, e.g. \"ACTIVE\"\n * @property {string} updatedAt ISO 8601 Extended Format date/time string\n */\n\n/**\n * @typedef {Error} FileError An error returned while creating and uploading an\n *   individual file\n * @property {Object} artifacts Records that may have been created while\n *   creating and uploading a file. Can be used to pick up the process manually\n *   or clean up before trying again.\n * @property {Object} [artifacts.file] A created File artifact\n * @property {Error} originalError The original error object that can be used\n *   for additional debugging purposes\n * @property {string} stage A string describing in what stage of the create and\n *   upload process the failure occurred. Possible choices are:\n *     - create (failed while creating the initial file record)\n *     - upload (failed while uploading the actual file for storage)\n *     - statusUpdate (failed while updating the upload status for the file record)\n *     - get (failed at the end while getting an updated file record)\n */\n\n/**\n * Module that provides access to information about Files.\n * More information about the best way to use this module is available at:\n * https://contxt.readme.io/reference#files-overview\n *\n * @typicalname contxtSdk.files\n */\nclass Files {\n  /**\n   * @param {Object} sdk An instance of the SDK so the module can communicate with other modules\n   * @param {Object} request An instance of the request module tied to this module's audience.\n   */\n  constructor(sdk, request) {\n    const baseUrl = `${sdk.config.audiences.files.host}/v1`;\n\n    this._baseUrl = baseUrl;\n    this._request = request;\n    this._sdk = sdk;\n  }\n\n  /**\n   * Creates a file record.\n   *\n   * API Endpoint: '/files'\n   * Method: POST\n   *\n   * @param {Object} fileInfo Metadata about the file\n   * @param {string} fileInfo.contentType The MIME type\n   * @param {string} [fileInfo.description] A short description\n   * @param {string} fileInfo.filename The filename\n   * @param {string} fileInfo.organizationId The organization ID to which the\n   *   file belongs\n   *\n   * @returns {Promise}\n   * @fulfill {FileWithUploadInformation}\n   * @rejects {Error}\n   *\n   * @example\n   * contxtSdk.files\n   *   .create({\n   *     contentType: 'application/pdf',\n   *     description:\n   *       'Electric Bill from Hawkins National Labratory (October 2018)',\n   *     filename: 'hawkins_national_labratory-hawkins_energy-october-2019.pdf',\n   *     organizationId: '8ba33864-01ff-4388-a4e0-63eebf36fed3'\n   *   })\n   *   .then((file) => console.log(file))\n   *   .catch((err) => console.log(err));\n   */\n  create(fileInfo) {\n    const requiredFields = ['contentType', 'filename', 'organizationId'];\n\n    for (let i = 0; i < requiredFields.length; i++) {\n      if (!fileInfo[requiredFields[i]]) {\n        return Promise.reject(\n          new Error(`A ${requiredFields[i]} is required to create a file`)\n        );\n      }\n    }\n\n    return this._request\n      .post(`${this._baseUrl}/files`, toSnakeCase(fileInfo))\n      .then(({ upload_info, ...createdFile }) => {\n        return {\n          ...toCamelCase(createdFile),\n          uploadInfo: toCamelCase(upload_info, {\n            deep: false,\n            excludeTransform: ['headers']\n          })\n        };\n      });\n  }\n\n  /**\n   * A procedural method that takes care of:\n   *   1. Creating a file record\n   *   2. Uploading the file from information returned when creating the file\n   *     record\n   *   3. Updating the file record's status to indicate if the upload was\n   *     successful or a failure\n   *   4. Returning an updated copy of the file record OR an error indicating\n   *     what failed, when it failed, and potentially, why it failed\n   *\n   * @param {Object} fileInfo\n   * @param {ArrayBuffer|Blob|Buffer|File|Stream} fileInfo.data The actual data of the file.\n   * @param {Object} fileInfo.metadata Metadata about the file to be uploaded\n   * @param {string} fileInfo.metadata.contentType The MIME type\n   * @param {string} [fileInfo.metadata.description] A short description\n   * @param {string} fileInfo.metadata.filename The filename\n   * @param {string} fileInfo.metadata.organizationId The organization ID to which the file belongs\n   *\n   * @returns {Promise}\n   * @fulfill {File}\n   * @rejects {FileError}\n   *\n   * @example\n   * contxtSdk\n   *   .createAndUpload({\n   *     data: fs.readFileSync(\n   *       path.join(\n   *         __dirname,\n   *         'hawkins_national_labratory-hawkins_energy-october-2019.pdf'\n   *       )\n   *     ),\n   *     metadata: {\n   *       contentType: 'application/pdf',\n   *       description:\n   *         'Electric Bill from Hawkins National Labratory (October 2018)',\n   *       filename:\n   *         'hawkins_national_labratory-hawkins_energy-october-2019.pdf',\n   *       organizationId: '8ba33864-01ff-4388-a4e0-63eebf36fed3'\n   *     }\n   *   })\n   *   .then((file) => console.log(file))\n   *   .catch((err) => console.log(err));\n   */\n  createAndUpload(fileInfo) {\n    const requiredFields = ['data', 'metadata'];\n\n    for (let i = 0; i < requiredFields.length; i++) {\n      if (!fileInfo[requiredFields[i]]) {\n        return Promise.reject(\n          this._generateError({\n            message: `A \\`${\n              requiredFields[i]\n            }\\` field is required to create and upload a file`,\n            stage: 'validation'\n          })\n        );\n      }\n    }\n\n    const { data, metadata } = fileInfo;\n\n    return this.create(metadata)\n      .catch((originalError) => {\n        throw this._generateError({\n          originalError,\n          message: 'There was a problem creating the file. Please try again.',\n          stage: 'create'\n        });\n      })\n      .then(({ uploadInfo, ...createdFile }) => {\n        return Promise.resolve()\n          .then(() => {\n            return this.upload({\n              data,\n              headers: uploadInfo.headers,\n              url: uploadInfo.url\n            }).catch((originalError) => {\n              this.setUploadFailed(createdFile.id);\n\n              throw this._generateError({\n                createdFile,\n                originalError,\n                message:\n                  'There was a problem uploading the file. Please try again.',\n                stage: 'upload'\n              });\n            });\n          })\n          .then(() => {\n            return this.setUploadComplete(createdFile.id).catch(\n              (originalError) => {\n                throw this._generateError({\n                  createdFile,\n                  originalError,\n                  message:\n                    'There was a problem updating the file status. Please try again.',\n                  stage: 'statusUpdate'\n                });\n              }\n            );\n          })\n          .then(() => {\n            return this.get(createdFile.id).catch((originalError) => {\n              throw this._generateError({\n                createdFile,\n                originalError,\n                message:\n                  'There was a problem getting updated information about the file. Please try again.',\n                stage: 'get'\n              });\n            });\n          });\n      });\n  }\n\n  /**\n   * Deletes a file and associated file actions.\n   *\n   * API Endpoint: '/files/:fileId'\n   * Method: DELETE\n   *\n   * @param {string} fileId The ID of the file\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.files.delete('8704f900-28f2-4951-aaf0-1827fcd0b0cb');\n   */\n  delete(fileId) {\n    if (!fileId) {\n      return Promise.reject(\n        new Error('A file ID is required to delete a file')\n      );\n    }\n\n    return this._request.delete(`${this._baseUrl}/files/${fileId}`);\n  }\n\n  /**\n   * Gets a temporary URL for the file.\n   *\n   * API Endpoint: '/files/:fileId/download'\n   * Method: GET\n   *\n   * @param {string} fileId The ID of the file\n   *\n   * @returns {Promise}\n   * @fulfill {FileToDownload} Information needed to download the file\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.files\n   *   .download('bbcdd201-58f7-4b69-a24e-752e9490a347')\n   *   .then((file) => console.log(file))\n   *   .catch((err) => console.log(err));\n   */\n  download(fileId) {\n    if (!fileId) {\n      return Promise.reject(\n        new Error('A file ID is required for downloading a file')\n      );\n    }\n\n    return this._request\n      .get(`${this._baseUrl}/files/${fileId}/download`)\n      .then((file) => toCamelCase(file));\n  }\n\n  /**\n   * Gets metadata about a file. This does not return the actual file.\n   *\n   * API Endpoint: '/files/:fileId'\n   * Method: GET\n   *\n   * @param {string} fileId The ID of the file\n   *\n   * @returns {Promise}\n   * @fulfill {File} Information about a file\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.files\n   *   .get('bbcdd201-58f7-4b69-a24e-752e9490a347')\n   *   .then((file) => console.log(file))\n   *   .catch((err) => console.log(err));\n   */\n  get(fileId) {\n    if (!fileId) {\n      return Promise.reject(\n        new Error('A file ID is required for getting information about a file')\n      );\n    }\n\n    return this._request\n      .get(`${this._baseUrl}/files/${fileId}`)\n      .then((file) => toCamelCase(file));\n  }\n\n  /**\n   * Gets a paginated list of files and their metadata. This does not return\n   * the actual files.\n   *\n   * API Endpoint: '/files'\n   * Method: GET\n   *\n   * @param {Object} [filesFilters]\n   * @param {Number} [filesFilters.limit = 100] Maximum number of records to return per query\n   * @param {Number} [filesFilters.offset = 0] How many records from the first record to start the query\n   * @param {String} [filesFilters.orderBy = 'createdAt'] How many records from the first record to start the query\n   * @param {Boolean} [filesFilters.reverseOrder = false] Determine the results should be sorted in reverse (ascending) order\n   * @param {String} [filesFilters.status = 'ACTIVE'] Filter by a file's current status\n   *\n   * @returns {Promise}\n   * @fulfill {FilesFromServer} Information about the files\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.files\n   *   .getAll()\n   *   .then((files) => console.log(files))\n   *   .catch((err) => console.log(err));\n   */\n  getAll(filesFilters) {\n    return this._request\n      .get(`${this._baseUrl}/files`, {\n        params: toSnakeCase(filesFilters)\n      })\n      .then((assetsData) => formatPaginatedDataFromServer(assetsData));\n  }\n\n  /**\n   * Updates the upload status of a file to indicate the upload is complete.\n   *\n   * API Endpoint: '/files/:fileId/complete'\n   * Method: POST\n   *\n   * @param {string} fileId The ID of the file to update\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @rejects {Error}\n   *\n   * @example\n   * contxtSdk.files\n   *   .setUploadComplete('ecd0439e-d5be-4529-ad6a-4a9cbfa7202f')\n   *   .catch((err) => console.log(err));\n   */\n  setUploadComplete(fileId) {\n    if (!fileId) {\n      return Promise.reject(\n        new Error('A file ID is required to mark a file upload as complete')\n      );\n    }\n\n    return this._request.post(`${this._baseUrl}/files/${fileId}/complete`);\n  }\n\n  /**\n   * Updates the upload status of a file to indicate the upload has failed.\n   *\n   * API Endpoint: '/files/:fileId/failed'\n   * Method: POST\n   *\n   * @param {string} fileId The ID of the file to update\n   *\n   * @returns {Promise}\n   * @fulfill {undefined}\n   * @rejects {Error}\n   *\n   * @example\n   * contxtSdk.files\n   *   .setUploadFailed('ecd0439e-d5be-4529-ad6a-4a9cbfa7202f')\n   *   .catch((err) => console.log(err));\n   */\n  setUploadFailed(fileId) {\n    if (!fileId) {\n      return Promise.reject(\n        new Error('A file ID is required to mark a file upload as failed')\n      );\n    }\n\n    return this._request.post(`${this._baseUrl}/files/${fileId}/failed`);\n  }\n\n  /**\n   * Uploads a file to the provided URL. The URL and the headers should be\n   * sourced from the response when initially creating a File record.\n   *\n   * Method: PUT\n   *\n   * @param {Object} fileInfo\n   * @param {ArrayBuffer|Blob|Buffer|File|Stream} fileInfo.data The data to be\n   *   uploaded\n   * @param {Object.<string, string>} [fileInfo.headers] Headers to be appended\n   *   to the request. The key is the header name and the value is the included\n   *   value\n   * @param {String} fileInfo.url The URL to use for the request\n   *\n   * @returns {Promise}\n   * @fulfill {Object}\n   * @reject {Error}\n   *\n   * @example\n   * contxtSdk.files\n   *   .upload({\n   *     data: fs.readFileSync(\n   *       path.join(\n   *         __dirname,\n   *         'hawkins_national_labratory-hawkins_energy-october-2019.pdf'\n   *       )\n   *     ),\n   *     headers: {\n   *       'Content-Type': 'application/pdf'\n   *     },\n   *     url:\n   *       'https://files.ndustrial.example.org/hawkins_national_labratory-hawkins_energy-october-2019.pdf'\n   *   })\n   *   .catch((err) => console.log(err));\n   */\n  upload(fileInfo) {\n    const requiredFields = ['data', 'url'];\n\n    for (let i = 0; i < requiredFields.length; i++) {\n      if (!fileInfo[requiredFields[i]]) {\n        return Promise.reject(\n          new Error(`A ${requiredFields[i]} is required to upload a file`)\n        );\n      }\n    }\n\n    const { data, headers, url } = fileInfo;\n\n    return axios.put(url, data, { headers });\n  }\n\n  /**\n   * Generates a consistent error message with information needed to debug why\n   * creating and uploading a file may have failed.\n   *\n   * @param {Object} errorInfo\n   * @param {Object} [errorInfo.createdFile] An object containing information\n   *   about a created created by Files#create\n   * @param {string} [errorInfo.message] The message to be applied to the new\n   *   Error\n   * @param {Error} errorInfo.originalError The original error that was thrown\n   *   that will be included in the new Error's body\n   * @param {string} errorInfo.stage A string describing in what stage of the\n   *   create and upload process the failure occurred\n   *\n   * @returns {FileError}\n   *\n   * @private\n   */\n  _generateError({ createdFile, message, originalError, stage }) {\n    const artifacts = {};\n    const errorMsg = message || originalError.message;\n\n    if (createdFile) {\n      artifacts.file = createdFile;\n    }\n\n    return Object.assign(new Error(errorMsg), {\n      artifacts,\n      originalError,\n      stage\n    });\n  }\n}\n\nexport default Files;\n"]}